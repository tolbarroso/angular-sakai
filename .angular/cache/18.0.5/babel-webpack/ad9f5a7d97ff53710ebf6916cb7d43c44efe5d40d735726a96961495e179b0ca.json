{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, Component, ViewEncapsulation, Inject, Input, EventEmitter, ChangeDetectionStrategy, Optional, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport * as i3 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { PlusIcon } from 'primeng/icons/plus';\nimport { SearchIcon } from 'primeng/icons/search';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nconst _c0 = a0 => ({\n  \"p-treenode-droppoint-active\": a0\n});\nconst _c1 = (a0, a1) => [\"p-treenode\", a0, a1];\nconst _c2 = a0 => ({\n  height: a0\n});\nconst _c3 = (a0, a1, a2) => ({\n  \"p-treenode-selectable\": a0,\n  \"p-treenode-dragover\": a1,\n  \"p-highlight\": a2\n});\nconst _c4 = a0 => ({\n  $implicit: a0\n});\nconst _c5 = a0 => ({\n  \"p-checkbox-disabled\": a0\n});\nconst _c6 = (a0, a1) => ({\n  \"p-highlight\": a0,\n  \"p-indeterminate\": a1\n});\nconst _c7 = (a0, a1) => ({\n  $implicit: a0,\n  partialSelected: a1\n});\nconst _c8 = a0 => ({\n  \"p-treenode-collapsed\": a0\n});\nconst _c9 = (a0, a1) => ({\n  \"p-treenode-selectable\": a0,\n  \"p-highlight\": a1\n});\nconst _c10 = a0 => ({\n  \"p-treenode-connector-line\": a0\n});\nfunction UITreeNode_ng_template_0_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 4);\n    i0.ɵɵlistener(\"drop\", function UITreeNode_ng_template_0_li_0_Template_li_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPoint($event, -1));\n    })(\"dragover\", function UITreeNode_ng_template_0_li_0_Template_li_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragOver($event));\n    })(\"dragenter\", function UITreeNode_ng_template_0_li_0_Template_li_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragEnter($event, -1));\n    })(\"dragleave\", function UITreeNode_ng_template_0_li_0_Template_li_dragleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragLeave($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0, ctx_r1.draghoverPrev));\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_ng_container_3_ChevronRightIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronRightIcon\", 14);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-toggler-icon\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_ng_container_3_ChevronDownIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronDownIcon\", 14);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-toggler-icon\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_ng_container_3_ChevronRightIcon_1_Template, 1, 1, \"ChevronRightIcon\", 13)(2, UITreeNode_ng_template_0_li_1_ng_container_3_ChevronDownIcon_2_Template, 1, 1, \"ChevronDownIcon\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.node.expanded);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.expanded);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_4_1_ng_template_0_Template(rf, ctx) {}\nfunction UITreeNode_ng_template_0_li_1_span_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_ng_template_0_li_1_span_4_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 15);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_span_4_1_Template, 1, 0, null, 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tree.togglerIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r1.node.expanded));\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_div_5_ng_container_2_CheckIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"CheckIcon\", 14);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_div_5_ng_container_2_MinusIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"MinusIcon\", 14);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_div_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_div_5_ng_container_2_CheckIcon_1_Template, 1, 1, \"CheckIcon\", 13)(2, UITreeNode_ng_template_0_li_1_div_5_ng_container_2_MinusIcon_2_Template, 1, 1, \"MinusIcon\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.node.partialSelected && ctx_r1.isSelected());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.partialSelected);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_div_5_3_ng_template_0_Template(rf, ctx) {}\nfunction UITreeNode_ng_template_0_li_1_div_5_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_ng_template_0_li_1_div_5_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 18);\n    i0.ɵɵtemplate(2, UITreeNode_ng_template_0_li_1_div_5_ng_container_2_Template, 3, 2, \"ng-container\", 8)(3, UITreeNode_ng_template_0_li_1_div_5_3_Template, 1, 0, null, 16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c5, ctx_r1.node.selectable === false));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c6, ctx_r1.isSelected(), ctx_r1.node.partialSelected));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.checkboxIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tree.checkboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(10, _c7, ctx_r1.isSelected(), ctx_r1.node.partialSelected));\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(ctx_r1.getIcon());\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.node.label);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_9_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_span_9_ng_container_1_Template, 1, 0, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tree.getTemplateForNode(ctx_r1.node))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r1.node));\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_ul_10_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 21);\n  }\n  if (rf & 2) {\n    const childNode_r4 = ctx.$implicit;\n    const firstChild_r5 = ctx.first;\n    const lastChild_r6 = ctx.last;\n    const index_r7 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"node\", childNode_r4)(\"parentNode\", ctx_r1.node)(\"firstChild\", firstChild_r5)(\"lastChild\", lastChild_r6)(\"index\", index_r7)(\"itemSize\", ctx_r1.itemSize)(\"level\", ctx_r1.level + 1);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_ul_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 19);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_ul_10_p_treeNode_1_Template, 1, 7, \"p-treeNode\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"display\", ctx_r1.node.expanded ? \"block\" : \"none\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.node.children)(\"ngForTrackBy\", ctx_r1.tree.trackBy);\n  }\n}\nfunction UITreeNode_ng_template_0_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 5);\n    i0.ɵɵlistener(\"keydown\", function UITreeNode_ng_template_0_li_1_Template_li_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onKeyDown($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function UITreeNode_ng_template_0_li_1_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeClick($event));\n    })(\"contextmenu\", function UITreeNode_ng_template_0_li_1_Template_div_contextmenu_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeRightClick($event));\n    })(\"touchend\", function UITreeNode_ng_template_0_li_1_Template_div_touchend_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeTouchEnd());\n    })(\"drop\", function UITreeNode_ng_template_0_li_1_Template_div_drop_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropNode($event));\n    })(\"dragover\", function UITreeNode_ng_template_0_li_1_Template_div_dragover_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropNodeDragOver($event));\n    })(\"dragenter\", function UITreeNode_ng_template_0_li_1_Template_div_dragenter_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropNodeDragEnter($event));\n    })(\"dragleave\", function UITreeNode_ng_template_0_li_1_Template_div_dragleave_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropNodeDragLeave($event));\n    })(\"dragstart\", function UITreeNode_ng_template_0_li_1_Template_div_dragstart_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDragStart($event));\n    })(\"dragend\", function UITreeNode_ng_template_0_li_1_Template_div_dragend_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDragStop($event));\n    });\n    i0.ɵɵelementStart(2, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function UITreeNode_ng_template_0_li_1_Template_button_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.toggle($event));\n    });\n    i0.ɵɵtemplate(3, UITreeNode_ng_template_0_li_1_ng_container_3_Template, 3, 2, \"ng-container\", 8)(4, UITreeNode_ng_template_0_li_1_span_4_Template, 2, 4, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, UITreeNode_ng_template_0_li_1_div_5_Template, 4, 13, \"div\", 10)(6, UITreeNode_ng_template_0_li_1_span_6_Template, 1, 2, \"span\", 3);\n    i0.ɵɵelementStart(7, \"span\", 11);\n    i0.ɵɵtemplate(8, UITreeNode_ng_template_0_li_1_span_8_Template, 2, 1, \"span\", 8)(9, UITreeNode_ng_template_0_li_1_span_9_Template, 2, 4, \"span\", 8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(10, UITreeNode_ng_template_0_li_1_ul_10_Template, 2, 4, \"ul\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(ctx_r1.node.style);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(24, _c1, ctx_r1.node.styleClass || \"\", ctx_r1.isLeaf() ? \"p-treenode-leaf\" : \"\"))(\"ngStyle\", i0.ɵɵpureFunction1(27, _c2, ctx_r1.itemSize + \"px\"));\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.node.label)(\"aria-checked\", ctx_r1.ariaChecked)(\"aria-setsize\", ctx_r1.node.children ? ctx_r1.node.children.length : 0)(\"aria-selected\", ctx_r1.ariaSelected)(\"aria-expanded\", ctx_r1.node.expanded)(\"aria-posinset\", ctx_r1.index + 1)(\"aria-level\", ctx_r1.level)(\"tabindex\", ctx_r1.index === 0 ? 0 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"padding-left\", ctx_r1.level * ctx_r1.indentation + \"rem\");\n    i0.ɵɵproperty(\"draggable\", ctx_r1.tree.draggableNodes)(\"ngClass\", i0.ɵɵpureFunction3(29, _c3, ctx_r1.tree.selectionMode && ctx_r1.node.selectable !== false, ctx_r1.draghoverNode, ctx_r1.isSelected()));\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"data-pc-section\", \"toggler\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.togglerIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.togglerIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.selectionMode == \"checkbox\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.icon || ctx_r1.node.expandedIcon || ctx_r1.node.collapsedIcon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.getTemplateForNode(ctx_r1.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.getTemplateForNode(ctx_r1.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.virtualScroll && ctx_r1.node.children && ctx_r1.node.expanded);\n  }\n}\nfunction UITreeNode_ng_template_0_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 4);\n    i0.ɵɵlistener(\"drop\", function UITreeNode_ng_template_0_li_2_Template_li_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPoint($event, 1));\n    })(\"dragover\", function UITreeNode_ng_template_0_li_2_Template_li_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragOver($event));\n    })(\"dragenter\", function UITreeNode_ng_template_0_li_2_Template_li_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragEnter($event, 1));\n    })(\"dragleave\", function UITreeNode_ng_template_0_li_2_Template_li_dragleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onDropPointDragLeave($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0, ctx_r1.draghoverNext));\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 27)(1, \"table\", 28)(2, \"tbody\")(3, \"tr\");\n    i0.ɵɵelement(4, \"td\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tr\");\n    i0.ɵɵelement(6, \"td\", 29);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c10, !ctx_r1.firstChild));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c10, !ctx_r1.lastChild));\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_ng_container_1_PlusIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"PlusIcon\", 32);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-toggler-icon\")(\"ariaLabel\", ctx_r1.tree.togglerAriaLabel);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_ng_container_1_MinusIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"MinusIcon\", 32);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-toggler-icon\")(\"ariaLabel\", ctx_r1.tree.togglerAriaLabel);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_table_3_span_6_ng_container_1_PlusIcon_1_Template, 1, 2, \"PlusIcon\", 31)(2, UITreeNode_ng_template_0_table_3_span_6_ng_container_1_MinusIcon_2_Template, 1, 2, \"MinusIcon\", 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.node.expanded);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.expanded);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction UITreeNode_ng_template_0_table_3_span_6_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_ng_template_0_table_3_span_6_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 15);\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_table_3_span_6_span_2_1_Template, 1, 0, null, 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tree.togglerIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r1.node.expanded));\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵlistener(\"click\", function UITreeNode_ng_template_0_table_3_span_6_Template_span_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r1 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r1.toggle($event));\n    });\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_table_3_span_6_ng_container_1_Template, 3, 2, \"ng-container\", 8)(2, UITreeNode_ng_template_0_table_3_span_6_span_2_Template, 2, 4, \"span\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", \"p-tree-toggler\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.togglerIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.togglerIconTemplate);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(ctx_r1.getIcon());\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.node.label);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, UITreeNode_ng_template_0_table_3_span_10_ng_container_1_Template, 1, 0, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tree.getTemplateForNode(ctx_r1.node))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r1.node));\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_td_11_p_treeNode_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 36);\n  }\n  if (rf & 2) {\n    const childNode_r11 = ctx.$implicit;\n    const firstChild_r12 = ctx.first;\n    const lastChild_r13 = ctx.last;\n    i0.ɵɵproperty(\"node\", childNode_r11)(\"firstChild\", firstChild_r12)(\"lastChild\", lastChild_r13);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 33)(1, \"div\", 34);\n    i0.ɵɵtemplate(2, UITreeNode_ng_template_0_table_3_td_11_p_treeNode_2_Template, 1, 3, \"p-treeNode\", 35);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"display\", ctx_r1.node.expanded ? \"table-cell\" : \"none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.node.children)(\"ngForTrackBy\", ctx_r1.tree.trackBy);\n  }\n}\nfunction UITreeNode_ng_template_0_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\")(1, \"tbody\")(2, \"tr\");\n    i0.ɵɵtemplate(3, UITreeNode_ng_template_0_table_3_td_3_Template, 7, 6, \"td\", 22);\n    i0.ɵɵelementStart(4, \"td\", 23)(5, \"div\", 24);\n    i0.ɵɵlistener(\"click\", function UITreeNode_ng_template_0_table_3_Template_div_click_5_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeClick($event));\n    })(\"contextmenu\", function UITreeNode_ng_template_0_table_3_Template_div_contextmenu_5_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeRightClick($event));\n    })(\"touchend\", function UITreeNode_ng_template_0_table_3_Template_div_touchend_5_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeTouchEnd());\n    })(\"keydown\", function UITreeNode_ng_template_0_table_3_Template_div_keydown_5_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onNodeKeydown($event));\n    });\n    i0.ɵɵtemplate(6, UITreeNode_ng_template_0_table_3_span_6_Template, 3, 3, \"span\", 25)(7, UITreeNode_ng_template_0_table_3_span_7_Template, 1, 2, \"span\", 3);\n    i0.ɵɵelementStart(8, \"span\", 11);\n    i0.ɵɵtemplate(9, UITreeNode_ng_template_0_table_3_span_9_Template, 2, 1, \"span\", 8)(10, UITreeNode_ng_template_0_table_3_span_10_Template, 2, 4, \"span\", 8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(11, UITreeNode_ng_template_0_table_3_td_11_Template, 3, 4, \"td\", 26);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.node.styleClass);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.root);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c8, !ctx_r1.node.expanded));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c9, ctx_r1.tree.selectionMode, ctx_r1.isSelected()));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLeaf());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.icon || ctx_r1.node.expandedIcon || ctx_r1.node.collapsedIcon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.getTemplateForNode(ctx_r1.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.getTemplateForNode(ctx_r1.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.children && ctx_r1.node.expanded);\n  }\n}\nfunction UITreeNode_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_ng_template_0_li_0_Template, 1, 3, \"li\", 1)(1, UITreeNode_ng_template_0_li_1_Template, 11, 33, \"li\", 2)(2, UITreeNode_ng_template_0_li_2_Template, 1, 3, \"li\", 1)(3, UITreeNode_ng_template_0_table_3_Template, 12, 15, \"table\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.droppableNodes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.tree.horizontal);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.droppableNodes && ctx_r1.lastChild);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tree.horizontal);\n  }\n}\nconst _c11 = [\"filter\"];\nconst _c12 = [\"scroller\"];\nconst _c13 = [\"wrapper\"];\nconst _c14 = (a0, a1, a2, a3) => ({\n  \"p-tree p-component\": true,\n  \"p-tree-selectable\": a0,\n  \"p-treenode-dragover\": a1,\n  \"p-tree-loading\": a2,\n  \"p-tree-flex-scrollable\": a3\n});\nconst _c15 = a0 => ({\n  options: a0\n});\nconst _c16 = a0 => ({\n  \"p-tree p-tree-horizontal p-component\": true,\n  \"p-tree-selectable\": a0\n});\nfunction Tree_div_0_div_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(\"p-tree-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\nfunction Tree_div_0_div_1_ng_container_2_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 18);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-tree-loading-icon\");\n  }\n}\nfunction Tree_div_0_div_1_ng_container_2_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction Tree_div_0_div_1_ng_container_2_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_0_div_1_ng_container_2_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tree_div_0_div_1_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtemplate(1, Tree_div_0_div_1_ng_container_2_span_2_1_Template, 1, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingIconTemplate);\n  }\n}\nfunction Tree_div_0_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_div_0_div_1_ng_container_2_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 16)(2, Tree_div_0_div_1_ng_container_2_span_2_Template, 2, 1, \"span\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loadingIconTemplate);\n  }\n}\nfunction Tree_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, Tree_div_0_div_1_i_1_Template, 1, 2, \"i\", 15)(2, Tree_div_0_div_1_ng_container_2_Template, 3, 2, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loadingIcon);\n  }\n}\nfunction Tree_div_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_div_0_div_3_SearchIcon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SearchIcon\", 24);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-filter-icon\");\n  }\n}\nfunction Tree_div_0_div_3_span_4_1_ng_template_0_Template(rf, ctx) {}\nfunction Tree_div_0_div_3_span_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_0_div_3_span_4_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tree_div_0_div_3_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 25);\n    i0.ɵɵtemplate(1, Tree_div_0_div_3_span_4_1_Template, 1, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.filterIconTemplate);\n  }\n}\nfunction Tree_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"input\", 21, 0);\n    i0.ɵɵlistener(\"keydown.enter\", function Tree_div_0_div_3_Template_input_keydown_enter_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      return i0.ɵɵresetView($event.preventDefault());\n    })(\"input\", function Tree_div_0_div_3_Template_input_input_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1._filter($event.target.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, Tree_div_0_div_3_SearchIcon_3_Template, 1, 1, \"SearchIcon\", 22)(4, Tree_div_0_div_3_span_4_Template, 2, 1, \"span\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"placeholder\", ctx_r1.filterPlaceholder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.filterIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.filterIconTemplate);\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_template_2_ul_0_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 31, 2);\n  }\n  if (rf & 2) {\n    const rowNode_r5 = ctx.$implicit;\n    const firstChild_r6 = ctx.first;\n    const lastChild_r7 = ctx.last;\n    const index_r8 = ctx.index;\n    const scrollerOptions_r9 = i0.ɵɵnextContext(2).options;\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"level\", rowNode_r5.level)(\"rowNode\", rowNode_r5)(\"node\", rowNode_r5.node)(\"firstChild\", firstChild_r6)(\"lastChild\", lastChild_r7)(\"index\", ctx_r1.getIndex(scrollerOptions_r9, index_r8))(\"itemSize\", scrollerOptions_r9.itemSize)(\"indentation\", ctx_r1.indentation);\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_template_2_ul_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 29);\n    i0.ɵɵtemplate(1, Tree_div_0_p_scroller_4_ng_template_2_ul_0_p_treeNode_1_Template, 2, 8, \"p-treeNode\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    const items_r11 = ctx_r9.$implicit;\n    const scrollerOptions_r9 = ctx_r9.options;\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleMap(scrollerOptions_r9.contentStyle);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r9.contentStyleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel)(\"aria-labelledby\", ctx_r1.ariaLabelledBy);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", items_r11)(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_0_p_scroller_4_ng_template_2_ul_0_Template, 2, 7, \"ul\", 28);\n  }\n  if (rf & 2) {\n    const items_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", items_r11);\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 33);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r12 = ctx.options;\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c15, scrollerOptions_r12));\n  }\n}\nfunction Tree_div_0_p_scroller_4_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_Template, 1, 4, \"ng-template\", 32);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction Tree_div_0_p_scroller_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 26, 1);\n    i0.ɵɵlistener(\"onScroll\", function Tree_div_0_p_scroller_4_Template_p_scroller_onScroll_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onScroll.emit($event));\n    })(\"onScrollIndexChange\", function Tree_div_0_p_scroller_4_Template_p_scroller_onScrollIndexChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onScrollIndexChange.emit($event));\n    })(\"onLazyLoad\", function Tree_div_0_p_scroller_4_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onLazyLoad.emit($event));\n    });\n    i0.ɵɵtemplate(2, Tree_div_0_p_scroller_4_ng_template_2_Template, 1, 1, \"ng-template\", 27)(3, Tree_div_0_p_scroller_4_ng_container_3_Template, 2, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(9, _c2, ctx_r1.scrollHeight !== \"flex\" ? ctx_r1.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r1.serializedValue)(\"tabindex\", -1)(\"scrollHeight\", ctx_r1.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r1.virtualScrollItemSize || ctx_r1._virtualNodeHeight)(\"lazy\", ctx_r1.lazy)(\"options\", ctx_r1.virtualScrollOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loaderTemplate);\n  }\n}\nfunction Tree_div_0_ng_container_5_ul_3_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 38);\n  }\n  if (rf & 2) {\n    const node_r13 = ctx.$implicit;\n    const firstChild_r14 = ctx.first;\n    const lastChild_r15 = ctx.last;\n    const index_r16 = ctx.index;\n    i0.ɵɵproperty(\"node\", node_r13)(\"firstChild\", firstChild_r14)(\"lastChild\", lastChild_r15)(\"index\", index_r16)(\"level\", 0);\n  }\n}\nfunction Tree_div_0_ng_container_5_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 36);\n    i0.ɵɵtemplate(1, Tree_div_0_ng_container_5_ul_3_p_treeNode_1_Template, 1, 5, \"p-treeNode\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel)(\"aria-labelledby\", ctx_r1.ariaLabelledBy);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getRootNode())(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\nfunction Tree_div_0_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 34, 3);\n    i0.ɵɵtemplate(3, Tree_div_0_ng_container_5_ul_3_Template, 2, 4, \"ul\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"max-height\", ctx_r1.scrollHeight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getRootNode());\n  }\n}\nfunction Tree_div_0_div_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.emptyMessageLabel, \" \");\n  }\n}\nfunction Tree_div_0_div_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 4);\n  }\n}\nfunction Tree_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵtemplate(1, Tree_div_0_div_6_ng_container_1_Template, 2, 1, \"ng-container\", 40)(2, Tree_div_0_div_6_ng_container_2_Template, 2, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.emptyMessageTemplate)(\"ngIfElse\", ctx_r1.emptyFilter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.emptyMessageTemplate);\n  }\n}\nfunction Tree_div_0_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵlistener(\"drop\", function Tree_div_0_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDrop($event));\n    })(\"dragover\", function Tree_div_0_Template_div_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragOver($event));\n    })(\"dragenter\", function Tree_div_0_Template_div_dragenter_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragEnter());\n    })(\"dragleave\", function Tree_div_0_Template_div_dragleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragLeave($event));\n    });\n    i0.ɵɵtemplate(1, Tree_div_0_div_1_Template, 3, 2, \"div\", 8)(2, Tree_div_0_ng_container_2_Template, 1, 0, \"ng-container\", 9)(3, Tree_div_0_div_3_Template, 5, 3, \"div\", 10)(4, Tree_div_0_p_scroller_4_Template, 4, 11, \"p-scroller\", 11)(5, Tree_div_0_ng_container_5_Template, 4, 3, \"ng-container\", 12)(6, Tree_div_0_div_6_Template, 3, 3, \"div\", 13)(7, Tree_div_0_ng_container_7_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.styleClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(11, _c14, ctx_r1.selectionMode, ctx_r1.dragHover, ctx_r1.loading, ctx_r1.scrollHeight === \"flex\"))(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.headerTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.filter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.virtualScroll);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.virtualScroll);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loading && (ctx_r1.getRootNode() == null || ctx_r1.getRootNode().length === 0));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.footerTemplate);\n  }\n}\nfunction Tree_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_div_1_div_2_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(\"p-tree-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\nfunction Tree_div_1_div_2_ng_container_2_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 18);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-tree-loading-icon\");\n  }\n}\nfunction Tree_div_1_div_2_ng_container_2_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction Tree_div_1_div_2_ng_container_2_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_1_div_2_ng_container_2_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tree_div_1_div_2_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtemplate(1, Tree_div_1_div_2_ng_container_2_span_2_1_Template, 1, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingIconTemplate);\n  }\n}\nfunction Tree_div_1_div_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_div_1_div_2_ng_container_2_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 16)(2, Tree_div_1_div_2_ng_container_2_span_2_Template, 2, 1, \"span\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loadingIconTemplate);\n  }\n}\nfunction Tree_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtemplate(1, Tree_div_1_div_2_i_1_Template, 1, 2, \"i\", 15)(2, Tree_div_1_div_2_ng_container_2_Template, 3, 2, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loadingIcon);\n  }\n}\nfunction Tree_div_1_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\");\n    i0.ɵɵelement(1, \"p-treeNode\", 44);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"node\", ctx_r1.value[0])(\"root\", true);\n  }\n}\nfunction Tree_div_1_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.emptyMessageLabel, \" \");\n  }\n}\nfunction Tree_div_1_div_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 4);\n  }\n}\nfunction Tree_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵtemplate(1, Tree_div_1_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 40)(2, Tree_div_1_div_4_ng_container_2_Template, 2, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.emptyMessageTemplate)(\"ngIfElse\", ctx_r1.emptyFilter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.emptyMessageTemplate);\n  }\n}\nfunction Tree_div_1_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵtemplate(1, Tree_div_1_ng_container_1_Template, 1, 0, \"ng-container\", 9)(2, Tree_div_1_div_2_Template, 3, 2, \"div\", 42)(3, Tree_div_1_table_3_Template, 2, 2, \"table\", 12)(4, Tree_div_1_div_4_Template, 3, 3, \"div\", 13)(5, Tree_div_1_ng_container_5_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.styleClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c16, ctx_r1.selectionMode))(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.headerTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.value && ctx_r1.value[0]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loading && (ctx_r1.getRootNode() == null || ctx_r1.getRootNode().length === 0));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.footerTemplate);\n  }\n}\nclass UITreeNode {\n  static ICON_CLASS = 'p-treenode-icon ';\n  rowNode;\n  node;\n  parentNode;\n  root;\n  index;\n  firstChild;\n  lastChild;\n  level;\n  indentation;\n  itemSize;\n  tree;\n  timeout;\n  draghoverPrev;\n  draghoverNext;\n  draghoverNode;\n  get ariaSelected() {\n    return this.tree.selectionMode === 'single' || this.tree.selectionMode === 'multiple' ? this.isSelected() : undefined;\n  }\n  get ariaChecked() {\n    return this.tree.selectionMode === 'checkbox' ? this.isSelected() : undefined;\n  }\n  constructor(tree) {\n    this.tree = tree;\n  }\n  ngOnInit() {\n    this.node.parent = this.parentNode;\n    if (this.parentNode) {\n      this.setAllNodesTabIndexes();\n      this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n    }\n  }\n  getIcon() {\n    let icon;\n    if (this.node.icon) icon = this.node.icon;else icon = this.node.expanded && this.node.children && this.node.children?.length ? this.node.expandedIcon : this.node.collapsedIcon;\n    return UITreeNode.ICON_CLASS + ' ' + icon;\n  }\n  isLeaf() {\n    return this.tree.isNodeLeaf(this.node);\n  }\n  toggle(event) {\n    if (this.node.expanded) this.collapse(event);else this.expand(event);\n    event.stopPropagation();\n  }\n  expand(event) {\n    this.node.expanded = true;\n    if (this.tree.virtualScroll) {\n      this.tree.updateSerializedValue();\n      this.focusVirtualNode();\n    }\n    this.tree.onNodeExpand.emit({\n      originalEvent: event,\n      node: this.node\n    });\n  }\n  collapse(event) {\n    this.node.expanded = false;\n    if (this.tree.virtualScroll) {\n      this.tree.updateSerializedValue();\n      this.focusVirtualNode();\n    }\n    this.tree.onNodeCollapse.emit({\n      originalEvent: event,\n      node: this.node\n    });\n  }\n  onNodeClick(event) {\n    this.tree.onNodeClick(event, this.node);\n  }\n  onNodeKeydown(event) {\n    if (event.key === 'Enter') {\n      this.tree.onNodeClick(event, this.node);\n    }\n  }\n  onNodeTouchEnd() {\n    this.tree.onNodeTouchEnd();\n  }\n  onNodeRightClick(event) {\n    this.tree.onNodeRightClick(event, this.node);\n  }\n  isSelected() {\n    return this.tree.isSelected(this.node);\n  }\n  isSameNode(event) {\n    return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n  }\n  onDropPoint(event, position) {\n    event.preventDefault();\n    let dragNode = this.tree.dragNode;\n    let dragNodeIndex = this.tree.dragNodeIndex;\n    let dragNodeScope = this.tree.dragNodeScope;\n    let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\n    if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n      let dropParams = {\n        ...this.createDropPointEventMetadata(position)\n      };\n      if (this.tree.validateDrop) {\n        this.tree.onNodeDrop.emit({\n          originalEvent: event,\n          dragNode: dragNode,\n          dropNode: this.node,\n          index: this.index,\n          accept: () => {\n            this.processPointDrop(dropParams);\n          }\n        });\n      } else {\n        this.processPointDrop(dropParams);\n        this.tree.onNodeDrop.emit({\n          originalEvent: event,\n          dragNode: dragNode,\n          dropNode: this.node,\n          index: this.index\n        });\n      }\n    }\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  }\n  processPointDrop(event) {\n    let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n    event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n    let dropIndex = this.index;\n    if (event.position < 0) {\n      dropIndex = event.dragNodeSubNodes === newNodeList ? event.dragNodeIndex > event.index ? event.index : event.index - 1 : event.index;\n      newNodeList.splice(dropIndex, 0, event.dragNode);\n    } else {\n      dropIndex = newNodeList.length;\n      newNodeList.push(event.dragNode);\n    }\n    this.tree.dragDropService.stopDrag({\n      node: event.dragNode,\n      subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n      index: event.dragNodeIndex\n    });\n  }\n  createDropPointEventMetadata(position) {\n    return {\n      dragNode: this.tree.dragNode,\n      dragNodeIndex: this.tree.dragNodeIndex,\n      dragNodeSubNodes: this.tree.dragNodeSubNodes,\n      dropNode: this.node,\n      index: this.index,\n      position: position\n    };\n  }\n  onDropPointDragOver(event) {\n    event.dataTransfer.dropEffect = 'move';\n    event.preventDefault();\n  }\n  onDropPointDragEnter(event, position) {\n    if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      if (position < 0) this.draghoverPrev = true;else this.draghoverNext = true;\n    }\n  }\n  onDropPointDragLeave(event) {\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  }\n  onDragStart(event) {\n    if (this.tree.draggableNodes && this.node.draggable !== false) {\n      event.dataTransfer.setData('text', 'data');\n      this.tree.dragDropService.startDrag({\n        tree: this,\n        node: this.node,\n        subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n        index: this.index,\n        scope: this.tree.draggableScope\n      });\n    } else {\n      event.preventDefault();\n    }\n  }\n  onDragStop(event) {\n    this.tree.dragDropService.stopDrag({\n      node: this.node,\n      subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n      index: this.index\n    });\n  }\n  onDropNodeDragOver(event) {\n    event.dataTransfer.dropEffect = 'move';\n    if (this.tree.droppableNodes) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  onDropNode(event) {\n    if (this.tree.droppableNodes && this.node?.droppable !== false) {\n      let dragNode = this.tree.dragNode;\n      if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n        let dropParams = {\n          ...this.createDropNodeEventMetadata()\n        };\n        if (this.tree.validateDrop) {\n          this.tree.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: this.node,\n            index: this.index,\n            accept: () => {\n              this.processNodeDrop(dropParams);\n            }\n          });\n        } else {\n          this.processNodeDrop(dropParams);\n          this.tree.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: this.node,\n            index: this.index\n          });\n        }\n      }\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.draghoverNode = false;\n  }\n  createDropNodeEventMetadata() {\n    return {\n      dragNode: this.tree.dragNode,\n      dragNodeIndex: this.tree.dragNodeIndex,\n      dragNodeSubNodes: this.tree.dragNodeSubNodes,\n      dropNode: this.node\n    };\n  }\n  processNodeDrop(event) {\n    let dragNodeIndex = event.dragNodeIndex;\n    event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n    if (event.dropNode.children) event.dropNode.children.push(event.dragNode);else event.dropNode.children = [event.dragNode];\n    this.tree.dragDropService.stopDrag({\n      node: event.dragNode,\n      subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n      index: dragNodeIndex\n    });\n  }\n  onDropNodeDragEnter(event) {\n    if (this.tree.droppableNodes && this.node?.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      this.draghoverNode = true;\n    }\n  }\n  onDropNodeDragLeave(event) {\n    if (this.tree.droppableNodes) {\n      let rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n        this.draghoverNode = false;\n      }\n    }\n  }\n  onKeyDown(event) {\n    if (!this.isSameNode(event) || this.tree.contextMenu && this.tree.contextMenu.containerViewChild?.nativeElement.style.display === 'block') {\n      return;\n    }\n    switch (event.code) {\n      //down arrow\n      case 'ArrowDown':\n        this.onArrowDown(event);\n        break;\n      //up arrow\n      case 'ArrowUp':\n        this.onArrowUp(event);\n        break;\n      //right arrow\n      case 'ArrowRight':\n        this.onArrowRight(event);\n        break;\n      //left arrow\n      case 'ArrowLeft':\n        this.onArrowLeft(event);\n        break;\n      //enter\n      case 'Enter':\n      case 'Space':\n        this.onEnter(event);\n        break;\n      //tab\n      case 'Tab':\n        this.setAllNodesTabIndexes();\n        break;\n      default:\n        //no op\n        break;\n    }\n  }\n  onArrowUp(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target.parentElement;\n    if (nodeElement.previousElementSibling) {\n      this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n    } else {\n      let parentNodeElement = this.getParentNodeElement(nodeElement);\n      if (parentNodeElement) {\n        this.focusRowChange(nodeElement, parentNodeElement);\n      }\n    }\n    event.preventDefault();\n  }\n  onArrowDown(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n    const listElement = nodeElement.children[1];\n    if (listElement && listElement.children.length > 0) {\n      this.focusRowChange(nodeElement, listElement.children[0]);\n    } else {\n      if (nodeElement.parentElement.nextElementSibling) {\n        this.focusRowChange(nodeElement, nodeElement.parentElement.nextElementSibling);\n      } else {\n        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement.parentElement);\n        if (nextSiblingAncestor) {\n          this.focusRowChange(nodeElement, nextSiblingAncestor);\n        }\n      }\n    }\n    event.preventDefault();\n  }\n  onArrowRight(event) {\n    if (!this.node?.expanded && !this.tree.isNodeLeaf(this.node)) {\n      this.expand(event);\n      event.currentTarget.tabIndex = -1;\n      setTimeout(() => {\n        this.onArrowDown(event);\n      }, 1);\n    }\n    event.preventDefault();\n  }\n  onArrowLeft(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n    if (this.level === 0 && !this.node?.expanded) {\n      return false;\n    }\n    if (this.node?.expanded) {\n      this.collapse(event);\n      return;\n    }\n    let parentNodeElement = this.getParentNodeElement(nodeElement.parentElement);\n    if (parentNodeElement) {\n      this.focusRowChange(event.currentTarget, parentNodeElement);\n    }\n    event.preventDefault();\n  }\n  onEnter(event) {\n    this.tree.onNodeClick(event, this.node);\n    this.setTabIndexForSelectionMode(event, this.tree.nodeTouched);\n    event.preventDefault();\n  }\n  setAllNodesTabIndexes() {\n    const nodes = DomHandler.find(this.tree.el.nativeElement, '.p-treenode');\n    const hasSelectedNode = [...nodes].some(node => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n    [...nodes].forEach(node => {\n      node.tabIndex = -1;\n    });\n    if (hasSelectedNode) {\n      const selectedNodes = [...nodes].filter(node => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n      selectedNodes[0].tabIndex = 0;\n      return;\n    }\n    [...nodes][0].tabIndex = 0;\n  }\n  setTabIndexForSelectionMode(event, nodeTouched) {\n    if (this.tree.selectionMode !== null) {\n      const elements = [...DomHandler.find(this.tree.el.nativeElement, '.p-treenode')];\n      event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n      if (elements.every(element => element.tabIndex === -1)) {\n        elements[0].tabIndex = 0;\n      }\n    }\n  }\n  findNextSiblingOfAncestor(nodeElement) {\n    let parentNodeElement = this.getParentNodeElement(nodeElement);\n    if (parentNodeElement) {\n      if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;else return this.findNextSiblingOfAncestor(parentNodeElement);\n    } else {\n      return null;\n    }\n  }\n  findLastVisibleDescendant(nodeElement) {\n    const listElement = Array.from(nodeElement.children).find(el => DomHandler.hasClass(el, 'p-treenode'));\n    const childrenListElement = listElement.children[1];\n    if (childrenListElement && childrenListElement.children.length > 0) {\n      const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n      return this.findLastVisibleDescendant(lastChildElement);\n    } else {\n      return nodeElement;\n    }\n  }\n  getParentNodeElement(nodeElement) {\n    const parentNodeElement = nodeElement.parentElement?.parentElement?.parentElement;\n    return parentNodeElement?.tagName === 'P-TREENODE' ? parentNodeElement : null;\n  }\n  focusNode(element) {\n    if (this.tree.droppableNodes) element.children[1].focus();else element.children[0].focus();\n  }\n  focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n    firstFocusableRow.tabIndex = '-1';\n    currentFocusedRow.children[0].tabIndex = '0';\n    this.focusNode(lastVisibleDescendant || currentFocusedRow);\n  }\n  focusVirtualNode() {\n    this.timeout = setTimeout(() => {\n      let node = DomHandler.findSingle(document.body, `[data-id=\"${this.node?.key ?? this.node?.data}\"]`);\n      DomHandler.focus(node);\n    }, 1);\n  }\n  static ɵfac = function UITreeNode_Factory(t) {\n    return new (t || UITreeNode)(i0.ɵɵdirectiveInject(forwardRef(() => Tree)));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UITreeNode,\n    selectors: [[\"p-treeNode\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 1,\n    hostBindings: function UITreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", \"treeitem\");\n      }\n    },\n    inputs: {\n      rowNode: \"rowNode\",\n      node: \"node\",\n      parentNode: \"parentNode\",\n      root: \"root\",\n      index: \"index\",\n      firstChild: \"firstChild\",\n      lastChild: \"lastChild\",\n      level: \"level\",\n      indentation: \"indentation\",\n      itemSize: \"itemSize\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngIf\"], [\"class\", \"p-treenode-droppoint\", 3, \"ngClass\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\", 4, \"ngIf\"], [\"role\", \"treeitem\", 3, \"ngClass\", \"ngStyle\", \"style\", \"keydown\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [1, \"p-treenode-droppoint\", 3, \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"ngClass\"], [\"role\", \"treeitem\", 3, \"keydown\", \"ngClass\", \"ngStyle\"], [1, \"p-treenode-content\", 3, \"click\", \"contextmenu\", \"touchend\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"dragstart\", \"dragend\", \"draggable\", \"ngClass\"], [\"type\", \"button\", \"pRipple\", \"\", \"tabindex\", \"-1\", \"aria-hidden\", \"true\", 1, \"p-tree-toggler\", \"p-link\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"p-tree-toggler-icon\", 4, \"ngIf\"], [\"class\", \"p-checkbox p-component\", \"aria-hidden\", \"true\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"p-treenode-label\"], [\"class\", \"p-treenode-children\", \"style\", \"display: none;\", \"role\", \"group\", 3, \"display\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-tree-toggler-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"aria-hidden\", \"true\", 1, \"p-checkbox\", \"p-component\", 3, \"ngClass\"], [\"role\", \"checkbox\", 1, \"p-checkbox-box\", 3, \"ngClass\"], [\"role\", \"group\", 1, \"p-treenode-children\", 2, \"display\", \"none\"], [3, \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"level\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"level\"], [\"class\", \"p-treenode-connector\", 4, \"ngIf\"], [1, \"p-treenode\", 3, \"ngClass\"], [\"tabindex\", \"0\", 1, \"p-treenode-content\", 3, \"click\", \"contextmenu\", \"touchend\", \"keydown\", \"ngClass\"], [3, \"ngClass\", \"click\", 4, \"ngIf\"], [\"class\", \"p-treenode-children-container\", 3, \"display\", 4, \"ngIf\"], [1, \"p-treenode-connector\"], [1, \"p-treenode-connector-table\"], [3, \"ngClass\"], [3, \"click\", \"ngClass\"], [3, \"styleClass\", \"ariaLabel\", 4, \"ngIf\"], [3, \"styleClass\", \"ariaLabel\"], [1, \"p-treenode-children-container\"], [1, \"p-treenode-children\"], [3, \"node\", \"firstChild\", \"lastChild\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"firstChild\", \"lastChild\"]],\n    template: function UITreeNode_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UITreeNode_ng_template_0_Template, 4, 4, \"ng-template\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.node);\n      }\n    },\n    dependencies: () => [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i2.Ripple, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, PlusIcon, UITreeNode],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UITreeNode, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeNode',\n      template: `\n        <ng-template [ngIf]=\"node\">\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                *ngIf=\"!tree.horizontal\"\n                [ngClass]=\"['p-treenode', node.styleClass || '', isLeaf() ? 'p-treenode-leaf' : '']\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"ariaChecked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"ariaSelected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    class=\"p-treenode-content\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                    [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode && node.selectable !== false, 'p-treenode-dragover': draghoverNode, 'p-highlight': isSelected() }\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-toggler p-link\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\" aria-hidden=\"true\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                            <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                            <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                        </span>\n                    </button>\n                    <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-disabled': node.selectable === false }\" *ngIf=\"tree.selectionMode == 'checkbox'\" aria-hidden=\"true\">\n                        <div class=\"p-checkbox-box\" [ngClass]=\"{ 'p-highlight': isSelected(), 'p-indeterminate': node.partialSelected }\" role=\"checkbox\">\n                            <ng-container *ngIf=\"!tree.checkboxIconTemplate\">\n                                <CheckIcon *ngIf=\"!node.partialSelected && isSelected()\" [styleClass]=\"'p-checkbox-icon'\" />\n                                <MinusIcon *ngIf=\"node.partialSelected\" [styleClass]=\"'p-checkbox-icon'\" />\n                            </ng-container>\n                            <ng-template *ngTemplateOutlet=\"tree.checkboxIconTemplate; context: { $implicit: isSelected(), partialSelected: node.partialSelected }\"></ng-template>\n                        </div>\n                    </div>\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-treenode-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"p-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"p-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !firstChild }\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !lastChild }\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"p-treenode\" [ngClass]=\"{ 'p-treenode-collapsed': !node.expanded }\">\n                            <div\n                                class=\"p-treenode-content\"\n                                tabindex=\"0\"\n                                [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode, 'p-highlight': isSelected() }\"\n                                (click)=\"onNodeClick($event)\"\n                                (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\"\n                                (keydown)=\"onNodeKeydown($event)\"\n                            >\n                                <span *ngIf=\"!isLeaf()\" [ngClass]=\"'p-tree-toggler'\" (click)=\"toggle($event)\">\n                                    <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                                        <PlusIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                        <MinusIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                    </ng-container>\n                                    <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                                        <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                                    </span>\n                                </span>\n                                <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                                <span class=\"p-treenode-label\">\n                                    <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                                    <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                                    </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"p-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"p-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; trackBy: tree.trackBy\" [node]=\"childNode\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element',\n        '[attr.role]': '\"treeitem\"'\n      }\n    }]\n  }], () => [{\n    type: Tree,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(() => Tree)]\n    }]\n  }], {\n    rowNode: [{\n      type: Input\n    }],\n    node: [{\n      type: Input\n    }],\n    parentNode: [{\n      type: Input\n    }],\n    root: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    firstChild: [{\n      type: Input\n    }],\n    lastChild: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    indentation: [{\n      type: Input\n    }],\n    itemSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Tree is used to display hierarchical data.\n * @group Components\n */\nclass Tree {\n  el;\n  dragDropService;\n  config;\n  cd;\n  /**\n   * An array of treenodes.\n   * @group Props\n   */\n  value;\n  /**\n   * Defines the selection mode.\n   * @group Props\n   */\n  selectionMode;\n  /**\n   * A single treenode instance or an array to refer to the selections.\n   * @group Props\n   */\n  selection;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Context menu instance.\n   * @group Props\n   */\n  contextMenu;\n  /**\n   * Defines the orientation of the tree, valid values are 'vertical' and 'horizontal'.\n   * @group Props\n   */\n  layout = 'vertical';\n  /**\n   * Scope of the draggable nodes to match a droppableScope.\n   * @group Props\n   */\n  draggableScope;\n  /**\n   * Scope of the droppable nodes to match a draggableScope.\n   * @group Props\n   */\n  droppableScope;\n  /**\n   * Whether the nodes are draggable.\n   * @group Props\n   */\n  draggableNodes;\n  /**\n   * Whether the nodes are droppable.\n   * @group Props\n   */\n  droppableNodes;\n  /**\n   * Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.\n   * @group Props\n   */\n  metaKeySelection = true;\n  /**\n   * Whether checkbox selections propagate to ancestor nodes.\n   * @group Props\n   */\n  propagateSelectionUp = true;\n  /**\n   * Whether checkbox selections propagate to descendant nodes.\n   * @group Props\n   */\n  propagateSelectionDown = true;\n  /**\n   * Displays a loader to indicate data load is in progress.\n   * @group Props\n   */\n  loading;\n  /**\n   * The icon to show while indicating data load is in progress.\n   * @group Props\n   */\n  loadingIcon;\n  /**\n   * Text to display when there is no data.\n   * @group Props\n   */\n  emptyMessage = '';\n  /**\n   * Used to define a string that labels the tree.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Defines a string that labels the toggler icon for accessibility.\n   * @group Props\n   */\n  togglerAriaLabel;\n  /**\n   * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n   * @group Props\n   */\n  ariaLabelledBy;\n  /**\n   * When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop.\n   * @group Props\n   */\n  validateDrop;\n  /**\n   * When specified, displays an input field to filter the items.\n   * @group Props\n   */\n  filter;\n  /**\n   * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.\n   * @group Props\n   */\n  filterBy = 'label';\n  /**\n   * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n   * @group Props\n   */\n  filterMode = 'lenient';\n  /**\n   * Placeholder text to show when filter input is empty.\n   * @group Props\n   */\n  filterPlaceholder;\n  /**\n   * Values after the tree nodes are filtered.\n   * @group Props\n   */\n  filteredNodes;\n  /**\n   * Locale to use in filtering. The default locale is the host environment's current locale.\n   * @group Props\n   */\n  filterLocale;\n  /**\n   * Height of the scrollable viewport.\n   * @group Props\n   */\n  scrollHeight;\n  /**\n   * Defines if data is loaded and interacted with in lazy manner.\n   * @group Props\n   */\n  lazy = false;\n  /**\n   * Whether the data should be loaded on demand during scroll.\n   * @group Props\n   */\n  virtualScroll;\n  /**\n   * Height of an item in the list for VirtualScrolling.\n   * @group Props\n   */\n  virtualScrollItemSize;\n  /**\n   * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n   * @group Props\n   */\n  virtualScrollOptions;\n  /**\n   * Indentation factor for spacing of the nested node when virtual scrolling is enabled.\n   * @group Props\n   */\n  indentation = 1.5;\n  /**\n   * Custom templates of the component.\n   * @group Props\n   */\n  _templateMap;\n  /**\n   * Function to optimize the node list rendering, default algorithm checks for object identity.\n   * @group Props\n   */\n  trackBy = (index, item) => item;\n  /**\n   * Height of the node.\n   * @group Props\n   * @deprecated use virtualScrollItemSize property instead.\n   */\n  _virtualNodeHeight;\n  get virtualNodeHeight() {\n    return this._virtualNodeHeight;\n  }\n  set virtualNodeHeight(val) {\n    this._virtualNodeHeight = val;\n    console.warn('The virtualNodeHeight property is deprecated, use virtualScrollItemSize property instead.');\n  }\n  /**\n   * Callback to invoke on selection change.\n   * @param {(TreeNode<any> | TreeNode<any>[] | null)} event - Custom selection change event.\n   * @group Emits\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected.\n   * @param {TreeNodeSelectEvent} event - Node select event.\n   * @group Emits\n   */\n  onNodeSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is unselected.\n   * @param {TreeNodeUnSelectEvent} event - Node unselect event.\n   * @group Emits\n   */\n  onNodeUnselect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is expanded.\n   * @param {TreeNodeExpandEvent} event - Node expand event.\n   * @group Emits\n   */\n  onNodeExpand = new EventEmitter();\n  /**\n   * Callback to invoke when a node is collapsed.\n   * @param {TreeNodeCollapseEvent} event - Node collapse event.\n   * @group Emits\n   */\n  onNodeCollapse = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected with right click.\n   * @param {onNodeContextMenuSelect} event - Node context menu select event.\n   * @group Emits\n   */\n  onNodeContextMenuSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is dropped.\n   * @param {TreeNodeDropEvent} event - Node drop event.\n   * @group Emits\n   */\n  onNodeDrop = new EventEmitter();\n  /**\n   * Callback to invoke in lazy mode to load new data.\n   * @param {TreeLazyLoadEvent} event - Custom lazy load event.\n   * @group Emits\n   */\n  onLazyLoad = new EventEmitter();\n  /**\n   * Callback to invoke in virtual scroll mode when scroll position changes.\n   * @param {TreeScrollEvent} event - Custom scroll event.\n   * @group Emits\n   */\n  onScroll = new EventEmitter();\n  /**\n   * Callback to invoke in virtual scroll mode when scroll position and item's range in view changes.\n   * @param {TreeScrollIndexChangeEvent} event - Scroll index change event.\n   * @group Emits\n   */\n  onScrollIndexChange = new EventEmitter();\n  /**\n   * Callback to invoke when data is filtered.\n   * @param {TreeFilterEvent} event - Custom filter event.\n   * @group Emits\n   */\n  onFilter = new EventEmitter();\n  templates;\n  filterViewChild;\n  scroller;\n  wrapperViewChild;\n  serializedValue;\n  headerTemplate;\n  footerTemplate;\n  loaderTemplate;\n  emptyMessageTemplate;\n  togglerIconTemplate;\n  checkboxIconTemplate;\n  loadingIconTemplate;\n  filterIconTemplate;\n  nodeTouched;\n  dragNodeTree;\n  dragNode;\n  dragNodeSubNodes;\n  dragNodeIndex;\n  dragNodeScope;\n  dragHover;\n  dragStartSubscription;\n  dragStopSubscription;\n  constructor(el, dragDropService, config, cd) {\n    this.el = el;\n    this.dragDropService = dragDropService;\n    this.config = config;\n    this.cd = cd;\n  }\n  ngOnInit() {\n    if (this.droppableNodes) {\n      this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(event => {\n        this.dragNodeTree = event.tree;\n        this.dragNode = event.node;\n        this.dragNodeSubNodes = event.subNodes;\n        this.dragNodeIndex = event.index;\n        this.dragNodeScope = event.scope;\n      });\n      this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(event => {\n        this.dragNodeTree = null;\n        this.dragNode = null;\n        this.dragNodeSubNodes = null;\n        this.dragNodeIndex = null;\n        this.dragNodeScope = null;\n        this.dragHover = false;\n      });\n    }\n  }\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this.updateSerializedValue();\n    }\n  }\n  get horizontal() {\n    return this.layout == 'horizontal';\n  }\n  get emptyMessageLabel() {\n    return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n  }\n  ngAfterContentInit() {\n    if (this.templates.length) {\n      this._templateMap = {};\n    }\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'empty':\n          this.emptyMessageTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'loader':\n          this.loaderTemplate = item.template;\n          break;\n        case 'togglericon':\n          this.togglerIconTemplate = item.template;\n          break;\n        case 'checkboxicon':\n          this.checkboxIconTemplate = item.template;\n          break;\n        case 'loadingicon':\n          this.loadingIconTemplate = item.template;\n          break;\n        case 'filtericon':\n          this.filterIconTemplate = item.template;\n          break;\n        default:\n          this._templateMap[item.name] = item.template;\n          break;\n      }\n    });\n  }\n  updateSerializedValue() {\n    this.serializedValue = [];\n    this.serializeNodes(null, this.getRootNode(), 0, true);\n  }\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n  onNodeClick(event, node) {\n    let eventTarget = event.target;\n    if (DomHandler.hasClass(eventTarget, 'p-tree-toggler') || DomHandler.hasClass(eventTarget, 'p-tree-toggler-icon')) {\n      return;\n    } else if (this.selectionMode) {\n      if (node.selectable === false) {\n        return;\n      }\n      if (this.hasFilteredNodes()) {\n        node = this.getNodeWithKey(node.key, this.value);\n        if (!node) {\n          return;\n        }\n      }\n      let index = this.findIndexInSelection(node);\n      let selected = index >= 0;\n      if (this.isCheckboxSelectionMode()) {\n        if (selected) {\n          if (this.propagateSelectionDown) this.propagateDown(node, false);else this.selection = this.selection.filter((val, i) => i != index);\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, false);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeUnselect.emit({\n            originalEvent: event,\n            node: node\n          });\n        } else {\n          if (this.propagateSelectionDown) this.propagateDown(node, true);else this.selection = [...(this.selection || []), node];\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, true);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeSelect.emit({\n            originalEvent: event,\n            node: node\n          });\n        }\n      } else {\n        let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n        if (metaSelection) {\n          let metaKey = event.metaKey || event.ctrlKey;\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(null);\n            } else {\n              this.selection = this.selection.filter((val, i) => i != index);\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(node);\n            } else if (this.isMultipleSelectionMode()) {\n              this.selection = !metaKey ? [] : this.selection || [];\n              this.selection = [...this.selection, node];\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              this.selection = null;\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = node;\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          } else {\n            if (selected) {\n              this.selection = this.selection.filter((val, i) => i != index);\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = [...(this.selection || []), node];\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          }\n          this.selectionChange.emit(this.selection);\n        }\n      }\n    }\n    this.nodeTouched = false;\n  }\n  onNodeTouchEnd() {\n    this.nodeTouched = true;\n  }\n  onNodeRightClick(event, node) {\n    if (this.contextMenu) {\n      let eventTarget = event.target;\n      if (eventTarget.className && eventTarget.className.indexOf('p-tree-toggler') === 0) {\n        return;\n      } else {\n        let index = this.findIndexInSelection(node);\n        let selected = index >= 0;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) this.selectionChange.emit(node);else this.selectionChange.emit([node]);\n        }\n        this.contextMenu.show(event);\n        this.onNodeContextMenuSelect.emit({\n          originalEvent: event,\n          node: node\n        });\n      }\n    }\n  }\n  findIndexInSelection(node) {\n    let index = -1;\n    if (this.selectionMode && this.selection) {\n      if (this.isSingleSelectionMode()) {\n        let areNodesEqual = this.selection.key && this.selection.key === node.key || this.selection == node;\n        index = areNodesEqual ? 0 : -1;\n      } else {\n        for (let i = 0; i < this.selection.length; i++) {\n          let selectedNode = this.selection[i];\n          let areNodesEqual = selectedNode.key && selectedNode.key === node.key || selectedNode == node;\n          if (areNodesEqual) {\n            index = i;\n            break;\n          }\n        }\n      }\n    }\n    return index;\n  }\n  syncNodeOption(node, parentNodes, option, value) {\n    // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n    const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n    if (_node) {\n      _node[option] = value || node[option];\n    }\n  }\n  hasFilteredNodes() {\n    return this.filter && this.filteredNodes && this.filteredNodes.length;\n  }\n  getNodeWithKey(key, nodes) {\n    for (let node of nodes) {\n      if (node.key === key) {\n        return node;\n      }\n      if (node.children) {\n        let matchedNode = this.getNodeWithKey(key, node.children);\n        if (matchedNode) {\n          return matchedNode;\n        }\n      }\n    }\n  }\n  propagateUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedCount = 0;\n      let childPartialSelected = false;\n      for (let child of node.children) {\n        if (this.isSelected(child)) {\n          selectedCount++;\n        } else if (child.partialSelected) {\n          childPartialSelected = true;\n        }\n      }\n      if (select && selectedCount == node.children.length) {\n        this.selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n          if (index >= 0) {\n            this.selection = this.selection.filter((val, i) => i != index);\n          }\n        }\n        if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n      this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n    }\n    let parent = node.parent;\n    if (parent) {\n      this.propagateUp(parent, select);\n    }\n  }\n  propagateDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    if (select && index == -1) {\n      this.selection = [...(this.selection || []), node];\n    } else if (!select && index > -1) {\n      this.selection = this.selection.filter((val, i) => i != index);\n    }\n    node.partialSelected = false;\n    this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateDown(child, select);\n      }\n    }\n  }\n  isSelected(node) {\n    return this.findIndexInSelection(node) != -1;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'multiple';\n  }\n  isCheckboxSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'checkbox';\n  }\n  isNodeLeaf(node) {\n    return node.leaf == false ? false : !(node.children && node.children.length);\n  }\n  getRootNode() {\n    return this.filteredNodes ? this.filteredNodes : this.value;\n  }\n  getTemplateForNode(node) {\n    if (this._templateMap) return node.type ? this._templateMap[node.type] : this._templateMap['default'];else return null;\n  }\n  onDragOver(event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.dataTransfer.dropEffect = 'move';\n      event.preventDefault();\n    }\n  }\n  onDrop(event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.preventDefault();\n      let dragNode = this.dragNode;\n      if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n        let dragNodeIndex = this.dragNodeIndex;\n        this.value = this.value || [];\n        if (this.validateDrop) {\n          this.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: null,\n            index: dragNodeIndex,\n            accept: () => {\n              this.processTreeDrop(dragNode, dragNodeIndex);\n            }\n          });\n        } else {\n          this.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: null,\n            index: dragNodeIndex\n          });\n          this.processTreeDrop(dragNode, dragNodeIndex);\n        }\n      }\n    }\n  }\n  processTreeDrop(dragNode, dragNodeIndex) {\n    this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n    this.value.push(dragNode);\n    this.dragDropService.stopDrag({\n      node: dragNode\n    });\n  }\n  onDragEnter() {\n    if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n      this.dragHover = true;\n    }\n  }\n  onDragLeave(event) {\n    if (this.droppableNodes) {\n      let rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n        this.dragHover = false;\n      }\n    }\n  }\n  allowDrop(dragNode, dropNode, dragNodeScope) {\n    if (!dragNode) {\n      //prevent random html elements to be dragged\n      return false;\n    } else if (this.isValidDragScope(dragNodeScope)) {\n      let allow = true;\n      if (dropNode) {\n        if (dragNode === dropNode) {\n          allow = false;\n        } else {\n          let parent = dropNode.parent;\n          while (parent != null) {\n            if (parent === dragNode) {\n              allow = false;\n              break;\n            }\n            parent = parent.parent;\n          }\n        }\n      }\n      return allow;\n    } else {\n      return false;\n    }\n  }\n  isValidDragScope(dragScope) {\n    let dropScope = this.droppableScope;\n    if (dropScope) {\n      if (typeof dropScope === 'string') {\n        if (typeof dragScope === 'string') return dropScope === dragScope;else if (Array.isArray(dragScope)) return dragScope.indexOf(dropScope) != -1;\n      } else if (Array.isArray(dropScope)) {\n        if (typeof dragScope === 'string') {\n          return dropScope.indexOf(dragScope) != -1;\n        } else if (Array.isArray(dragScope)) {\n          for (let s of dropScope) {\n            for (let ds of dragScope) {\n              if (s === ds) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n  _filter(value) {\n    let filterValue = value;\n    if (filterValue === '') {\n      this.filteredNodes = null;\n    } else {\n      this.filteredNodes = [];\n      const searchFields = this.filterBy.split(',');\n      const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n      const isStrictMode = this.filterMode === 'strict';\n      for (let node of this.value) {\n        let copyNode = {\n          ...node\n        };\n        let paramsWithoutNode = {\n          searchFields,\n          filterText,\n          isStrictMode\n        };\n        if (isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n          this.filteredNodes.push(copyNode);\n        }\n      }\n    }\n    this.updateSerializedValue();\n    this.onFilter.emit({\n      filter: filterValue,\n      filteredValue: this.filteredNodes\n    });\n  }\n  /**\n   * Resets filter.\n   * @group Method\n   */\n  resetFilter() {\n    this.filteredNodes = null;\n    if (this.filterViewChild && this.filterViewChild.nativeElement) {\n      this.filterViewChild.nativeElement.value = '';\n    }\n  }\n  /**\n   * Scrolls to virtual index.\n   * @param {number} number - Index to be scrolled.\n   * @group Method\n   */\n  scrollToVirtualIndex(index) {\n    this.virtualScroll && this.scroller?.scrollToIndex(index);\n  }\n  /**\n   * Scrolls to virtual index.\n   * @param {ScrollToOptions} options - Scroll options.\n   * @group Method\n   */\n  scrollTo(options) {\n    if (this.virtualScroll) {\n      this.scroller?.scrollTo(options);\n    } else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\n      if (this.wrapperViewChild.nativeElement.scrollTo) {\n        this.wrapperViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.wrapperViewChild.nativeElement.scrollLeft = options.left;\n        this.wrapperViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n        for (let childNode of childNodes) {\n          let copyChildNode = {\n            ...childNode\n          };\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n      if (matched) {\n        node.expanded = true;\n        return true;\n      }\n    }\n  }\n  isFilterMatched(node, params) {\n    let {\n      searchFields,\n      filterText,\n      isStrictMode\n    } = params;\n    let matched = false;\n    for (let field of searchFields) {\n      let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n      if (fieldValue.indexOf(filterText) > -1) {\n        matched = true;\n      }\n    }\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        searchFields,\n        filterText,\n        isStrictMode\n      }) || matched;\n    }\n    return matched;\n  }\n  getIndex(options, index) {\n    const getItemOptions = options['getItemOptions'];\n    return getItemOptions ? getItemOptions(index).index : index;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  ngOnDestroy() {\n    if (this.dragStartSubscription) {\n      this.dragStartSubscription.unsubscribe();\n    }\n    if (this.dragStopSubscription) {\n      this.dragStopSubscription.unsubscribe();\n    }\n  }\n  static ɵfac = function Tree_Factory(t) {\n    return new (t || Tree)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.TreeDragDropService, 8), i0.ɵɵdirectiveInject(i3.PrimeNGConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Tree,\n    selectors: [[\"p-tree\"]],\n    contentQueries: function Tree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Tree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c11, 5);\n        i0.ɵɵviewQuery(_c12, 5);\n        i0.ɵɵviewQuery(_c13, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapperViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      value: \"value\",\n      selectionMode: \"selectionMode\",\n      selection: \"selection\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      contextMenu: \"contextMenu\",\n      layout: \"layout\",\n      draggableScope: \"draggableScope\",\n      droppableScope: \"droppableScope\",\n      draggableNodes: \"draggableNodes\",\n      droppableNodes: \"droppableNodes\",\n      metaKeySelection: \"metaKeySelection\",\n      propagateSelectionUp: \"propagateSelectionUp\",\n      propagateSelectionDown: \"propagateSelectionDown\",\n      loading: \"loading\",\n      loadingIcon: \"loadingIcon\",\n      emptyMessage: \"emptyMessage\",\n      ariaLabel: \"ariaLabel\",\n      togglerAriaLabel: \"togglerAriaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      validateDrop: \"validateDrop\",\n      filter: \"filter\",\n      filterBy: \"filterBy\",\n      filterMode: \"filterMode\",\n      filterPlaceholder: \"filterPlaceholder\",\n      filteredNodes: \"filteredNodes\",\n      filterLocale: \"filterLocale\",\n      scrollHeight: \"scrollHeight\",\n      lazy: \"lazy\",\n      virtualScroll: \"virtualScroll\",\n      virtualScrollItemSize: \"virtualScrollItemSize\",\n      virtualScrollOptions: \"virtualScrollOptions\",\n      indentation: \"indentation\",\n      _templateMap: \"_templateMap\",\n      trackBy: \"trackBy\",\n      virtualNodeHeight: \"virtualNodeHeight\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      onNodeSelect: \"onNodeSelect\",\n      onNodeUnselect: \"onNodeUnselect\",\n      onNodeExpand: \"onNodeExpand\",\n      onNodeCollapse: \"onNodeCollapse\",\n      onNodeContextMenuSelect: \"onNodeContextMenuSelect\",\n      onNodeDrop: \"onNodeDrop\",\n      onLazyLoad: \"onLazyLoad\",\n      onScroll: \"onScroll\",\n      onScrollIndexChange: \"onScrollIndexChange\",\n      onFilter: \"onFilter\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"filter\", \"\"], [\"scroller\", \"\"], [\"treeNode\", \"\"], [\"wrapper\", \"\"], [\"emptyFilter\", \"\"], [3, \"ngClass\", \"ngStyle\", \"class\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\", \"class\", 4, \"ngIf\"], [3, \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"ngClass\", \"ngStyle\"], [\"class\", \"p-tree-loading-overlay p-component-overlay\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\"], [\"class\", \"p-tree-filter-container\", 4, \"ngIf\"], [\"styleClass\", \"p-tree-wrapper\", 3, \"items\", \"tabindex\", \"style\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onScroll\", \"onScrollIndexChange\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"p-tree-empty-message\", 4, \"ngIf\"], [1, \"p-tree-loading-overlay\", \"p-component-overlay\"], [3, \"class\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [\"class\", \"p-tree-loading-icon\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\"], [1, \"p-tree-loading-icon\"], [1, \"p-tree-filter-container\"], [\"type\", \"text\", \"autocomplete\", \"off\", 1, \"p-tree-filter\", \"p-inputtext\", \"p-component\", 3, \"keydown.enter\", \"input\"], [3, \"styleClass\", 4, \"ngIf\"], [\"class\", \"p-tree-filter-icon\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-tree-filter-icon\"], [\"styleClass\", \"p-tree-wrapper\", 3, \"onScroll\", \"onScrollIndexChange\", \"onLazyLoad\", \"items\", \"tabindex\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\"], [\"pTemplate\", \"content\"], [\"class\", \"p-tree-container\", \"role\", \"tree\", 3, \"ngClass\", \"style\", 4, \"ngIf\"], [\"role\", \"tree\", 1, \"p-tree-container\", 3, \"ngClass\"], [3, \"level\", \"rowNode\", \"node\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"indentation\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"level\", \"rowNode\", \"node\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"indentation\"], [\"pTemplate\", \"loader\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-tree-wrapper\"], [\"class\", \"p-tree-container\", \"role\", \"tree\", 4, \"ngIf\"], [\"role\", \"tree\", 1, \"p-tree-container\"], [3, \"node\", \"firstChild\", \"lastChild\", \"index\", \"level\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"firstChild\", \"lastChild\", \"index\", \"level\"], [1, \"p-tree-empty-message\"], [4, \"ngIf\", \"ngIfElse\"], [3, \"ngClass\", \"ngStyle\"], [\"class\", \"p-tree-loading-mask p-component-overlay\", 4, \"ngIf\"], [1, \"p-tree-loading-mask\", \"p-component-overlay\"], [3, \"node\", \"root\"]],\n    template: function Tree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, Tree_div_0_Template, 8, 16, \"div\", 5)(1, Tree_div_1_Template, 6, 11, \"div\", 6);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.horizontal);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.horizontal);\n      }\n    },\n    dependencies: () => [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i3.PrimeTemplate, i4.Scroller, SearchIcon, SpinnerIcon, UITreeNode],\n    styles: [\"@layer primeng{.p-tree-container{margin:0;padding:0;list-style-type:none;overflow:auto}.p-treenode-children{margin:0;padding:0;list-style-type:none}.p-tree-wrapper{overflow:auto}.p-treenode-selectable{cursor:pointer;-webkit-user-select:none;user-select:none}.p-tree-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative;flex-shrink:0}.p-treenode-leaf>.p-treenode-content .p-tree-toggler{visibility:hidden}.p-treenode-content{display:flex;align-items:center}.p-tree-filter{width:100%}.p-tree-filter-container{position:relative;display:block;width:100%}.p-tree-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-tree-loading{position:relative;min-height:4rem}.p-tree .p-tree-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-tree-flex-scrollable{display:flex;flex:1;height:100%;flex-direction:column}.p-tree-flex-scrollable .p-tree-wrapper{flex:1}.p-tree .p-treenode-droppoint{height:4px;list-style-type:none}.p-tree .p-treenode-droppoint-active{border:0 none}.p-scroller .p-tree-container{overflow:visible}}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Tree, [{\n    type: Component,\n    args: [{\n      selector: 'p-tree',\n      template: `\n        <div\n            [ngClass]=\"{ 'p-tree p-component': true, 'p-tree-selectable': selectionMode, 'p-treenode-dragover': dragHover, 'p-tree-loading': loading, 'p-tree-flex-scrollable': scrollHeight === 'flex' }\"\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\"\n            (dragover)=\"onDragOver($event)\"\n            (dragenter)=\"onDragEnter()\"\n            (dragleave)=\"onDragLeave($event)\"\n        >\n            <div class=\"p-tree-loading-overlay p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div *ngIf=\"filter\" class=\"p-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"p-tree-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceholder\" (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event.target.value)\" />\n                <SearchIcon *ngIf=\"!filterIconTemplate\" [styleClass]=\"'p-tree-filter-icon'\" />\n                <span *ngIf=\"filterIconTemplate\" class=\"p-tree-filter-icon\">\n                    <ng-template *ngTemplateOutlet=\"filterIconTemplate\"></ng-template>\n                </span>\n            </div>\n\n            <p-scroller\n                #scroller\n                *ngIf=\"virtualScroll\"\n                [items]=\"serializedValue\"\n                [tabindex]=\"-1\"\n                styleClass=\"p-tree-wrapper\"\n                [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                [lazy]=\"lazy\"\n                (onScroll)=\"onScroll.emit($event)\"\n                (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                [options]=\"virtualScrollOptions\"\n            >\n                <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                    <ul *ngIf=\"items\" class=\"p-tree-container\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            #treeNode\n                            *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [level]=\"rowNode.level\"\n                            [rowNode]=\"rowNode\"\n                            [node]=\"rowNode.node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"getIndex(scrollerOptions, index)\"\n                            [itemSize]=\"scrollerOptions.itemSize\"\n                            [indentation]=\"indentation\"\n                        ></p-treeNode>\n                    </ul>\n                </ng-template>\n                <ng-container *ngIf=\"loaderTemplate\">\n                    <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                        <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                    </ng-template>\n                </ng-container>\n            </p-scroller>\n            <ng-container *ngIf=\"!virtualScroll\">\n                <div #wrapper class=\"p-tree-wrapper\" [style.max-height]=\"scrollHeight\">\n                    <ul class=\"p-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [node]=\"node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"index\"\n                            [level]=\"0\"\n                        ></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n        <div [ngClass]=\"{ 'p-tree p-tree-horizontal p-component': true, 'p-tree-selectable': selectionMode }\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div class=\"p-tree-loading-mask p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <table *ngIf=\"value && value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n    `,\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      },\n      styles: [\"@layer primeng{.p-tree-container{margin:0;padding:0;list-style-type:none;overflow:auto}.p-treenode-children{margin:0;padding:0;list-style-type:none}.p-tree-wrapper{overflow:auto}.p-treenode-selectable{cursor:pointer;-webkit-user-select:none;user-select:none}.p-tree-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative;flex-shrink:0}.p-treenode-leaf>.p-treenode-content .p-tree-toggler{visibility:hidden}.p-treenode-content{display:flex;align-items:center}.p-tree-filter{width:100%}.p-tree-filter-container{position:relative;display:block;width:100%}.p-tree-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-tree-loading{position:relative;min-height:4rem}.p-tree .p-tree-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-tree-flex-scrollable{display:flex;flex:1;height:100%;flex-direction:column}.p-tree-flex-scrollable .p-tree-wrapper{flex:1}.p-tree .p-treenode-droppoint{height:4px;list-style-type:none}.p-tree .p-treenode-droppoint-active{border:0 none}.p-scroller .p-tree-container{overflow:visible}}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i3.TreeDragDropService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i3.PrimeNGConfig\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    value: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    draggableScope: [{\n      type: Input\n    }],\n    droppableScope: [{\n      type: Input\n    }],\n    draggableNodes: [{\n      type: Input\n    }],\n    droppableNodes: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    propagateSelectionUp: [{\n      type: Input\n    }],\n    propagateSelectionDown: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    emptyMessage: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    togglerAriaLabel: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    validateDrop: [{\n      type: Input\n    }],\n    filter: [{\n      type: Input\n    }],\n    filterBy: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterPlaceholder: [{\n      type: Input\n    }],\n    filteredNodes: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollItemSize: [{\n      type: Input\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    indentation: [{\n      type: Input\n    }],\n    _templateMap: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    virtualNodeHeight: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onNodeContextMenuSelect: [{\n      type: Output\n    }],\n    onNodeDrop: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    onScroll: [{\n      type: Output\n    }],\n    onScrollIndexChange: [{\n      type: Output\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    filterViewChild: [{\n      type: ViewChild,\n      args: ['filter']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    wrapperViewChild: [{\n      type: ViewChild,\n      args: ['wrapper']\n    }]\n  });\n})();\nclass TreeModule {\n  static ɵfac = function TreeModule_Factory(t) {\n    return new (t || TreeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TreeModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon, PlusIcon, SharedModule, ScrollerModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon, PlusIcon],\n      exports: [Tree, SharedModule, ScrollerModule],\n      declarations: [Tree, UITreeNode]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tree, TreeModule, UITreeNode };","map":{"version":3,"names":["i1","CommonModule","i0","forwardRef","Component","ViewEncapsulation","Inject","Input","EventEmitter","ChangeDetectionStrategy","Optional","Output","ContentChildren","ViewChild","NgModule","i3","TranslationKeys","PrimeTemplate","SharedModule","DomHandler","i2","RippleModule","i4","ScrollerModule","ObjectUtils","CheckIcon","ChevronDownIcon","ChevronRightIcon","MinusIcon","PlusIcon","SearchIcon","SpinnerIcon","_c0","a0","_c1","a1","_c2","height","_c3","a2","_c4","$implicit","_c5","_c6","_c7","partialSelected","_c8","_c9","_c10","UITreeNode_ng_template_0_li_0_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","UITreeNode_ng_template_0_li_0_Template_li_drop_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","onDropPoint","UITreeNode_ng_template_0_li_0_Template_li_dragover_0_listener","onDropPointDragOver","UITreeNode_ng_template_0_li_0_Template_li_dragenter_0_listener","onDropPointDragEnter","UITreeNode_ng_template_0_li_0_Template_li_dragleave_0_listener","onDropPointDragLeave","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction1","draghoverPrev","UITreeNode_ng_template_0_li_1_ng_container_3_ChevronRightIcon_1_Template","ɵɵelement","UITreeNode_ng_template_0_li_1_ng_container_3_ChevronDownIcon_2_Template","UITreeNode_ng_template_0_li_1_ng_container_3_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","ɵɵadvance","node","expanded","UITreeNode_ng_template_0_li_1_span_4_1_ng_template_0_Template","UITreeNode_ng_template_0_li_1_span_4_1_Template","UITreeNode_ng_template_0_li_1_span_4_Template","tree","togglerIconTemplate","UITreeNode_ng_template_0_li_1_div_5_ng_container_2_CheckIcon_1_Template","UITreeNode_ng_template_0_li_1_div_5_ng_container_2_MinusIcon_2_Template","UITreeNode_ng_template_0_li_1_div_5_ng_container_2_Template","isSelected","UITreeNode_ng_template_0_li_1_div_5_3_ng_template_0_Template","UITreeNode_ng_template_0_li_1_div_5_3_Template","UITreeNode_ng_template_0_li_1_div_5_Template","selectable","ɵɵpureFunction2","checkboxIconTemplate","UITreeNode_ng_template_0_li_1_span_6_Template","ɵɵclassMap","getIcon","UITreeNode_ng_template_0_li_1_span_8_Template","ɵɵtext","ɵɵtextInterpolate","label","UITreeNode_ng_template_0_li_1_span_9_ng_container_1_Template","ɵɵelementContainer","UITreeNode_ng_template_0_li_1_span_9_Template","getTemplateForNode","UITreeNode_ng_template_0_li_1_ul_10_p_treeNode_1_Template","childNode_r4","firstChild_r5","first","lastChild_r6","last","index_r7","index","itemSize","level","UITreeNode_ng_template_0_li_1_ul_10_Template","ɵɵstyleProp","children","trackBy","UITreeNode_ng_template_0_li_1_Template","_r3","UITreeNode_ng_template_0_li_1_Template_li_keydown_0_listener","onKeyDown","UITreeNode_ng_template_0_li_1_Template_div_click_1_listener","onNodeClick","UITreeNode_ng_template_0_li_1_Template_div_contextmenu_1_listener","onNodeRightClick","UITreeNode_ng_template_0_li_1_Template_div_touchend_1_listener","onNodeTouchEnd","UITreeNode_ng_template_0_li_1_Template_div_drop_1_listener","onDropNode","UITreeNode_ng_template_0_li_1_Template_div_dragover_1_listener","onDropNodeDragOver","UITreeNode_ng_template_0_li_1_Template_div_dragenter_1_listener","onDropNodeDragEnter","UITreeNode_ng_template_0_li_1_Template_div_dragleave_1_listener","onDropNodeDragLeave","UITreeNode_ng_template_0_li_1_Template_div_dragstart_1_listener","onDragStart","UITreeNode_ng_template_0_li_1_Template_div_dragend_1_listener","onDragStop","UITreeNode_ng_template_0_li_1_Template_button_click_2_listener","toggle","ɵɵstyleMap","style","styleClass","isLeaf","ɵɵattribute","ariaChecked","length","ariaSelected","indentation","draggableNodes","ɵɵpureFunction3","selectionMode","draghoverNode","icon","expandedIcon","collapsedIcon","virtualScroll","UITreeNode_ng_template_0_li_2_Template","_r8","UITreeNode_ng_template_0_li_2_Template_li_drop_0_listener","UITreeNode_ng_template_0_li_2_Template_li_dragover_0_listener","UITreeNode_ng_template_0_li_2_Template_li_dragenter_0_listener","UITreeNode_ng_template_0_li_2_Template_li_dragleave_0_listener","draghoverNext","UITreeNode_ng_template_0_table_3_td_3_Template","firstChild","lastChild","UITreeNode_ng_template_0_table_3_span_6_ng_container_1_PlusIcon_1_Template","togglerAriaLabel","UITreeNode_ng_template_0_table_3_span_6_ng_container_1_MinusIcon_2_Template","UITreeNode_ng_template_0_table_3_span_6_ng_container_1_Template","UITreeNode_ng_template_0_table_3_span_6_span_2_1_ng_template_0_Template","UITreeNode_ng_template_0_table_3_span_6_span_2_1_Template","UITreeNode_ng_template_0_table_3_span_6_span_2_Template","UITreeNode_ng_template_0_table_3_span_6_Template","_r10","UITreeNode_ng_template_0_table_3_span_6_Template_span_click_0_listener","UITreeNode_ng_template_0_table_3_span_7_Template","UITreeNode_ng_template_0_table_3_span_9_Template","UITreeNode_ng_template_0_table_3_span_10_ng_container_1_Template","UITreeNode_ng_template_0_table_3_span_10_Template","UITreeNode_ng_template_0_table_3_td_11_p_treeNode_2_Template","childNode_r11","firstChild_r12","lastChild_r13","UITreeNode_ng_template_0_table_3_td_11_Template","UITreeNode_ng_template_0_table_3_Template","_r9","UITreeNode_ng_template_0_table_3_Template_div_click_5_listener","UITreeNode_ng_template_0_table_3_Template_div_contextmenu_5_listener","UITreeNode_ng_template_0_table_3_Template_div_touchend_5_listener","UITreeNode_ng_template_0_table_3_Template_div_keydown_5_listener","onNodeKeydown","root","UITreeNode_ng_template_0_Template","droppableNodes","horizontal","_c11","_c12","_c13","_c14","a3","_c15","options","_c16","Tree_div_0_div_1_i_1_Template","loadingIcon","Tree_div_0_div_1_ng_container_2_SpinnerIcon_1_Template","Tree_div_0_div_1_ng_container_2_span_2_1_ng_template_0_Template","Tree_div_0_div_1_ng_container_2_span_2_1_Template","Tree_div_0_div_1_ng_container_2_span_2_Template","loadingIconTemplate","Tree_div_0_div_1_ng_container_2_Template","Tree_div_0_div_1_Template","Tree_div_0_ng_container_2_Template","Tree_div_0_div_3_SearchIcon_3_Template","Tree_div_0_div_3_span_4_1_ng_template_0_Template","Tree_div_0_div_3_span_4_1_Template","Tree_div_0_div_3_span_4_Template","filterIconTemplate","Tree_div_0_div_3_Template","Tree_div_0_div_3_Template_input_keydown_enter_1_listener","preventDefault","Tree_div_0_div_3_Template_input_input_1_listener","_filter","target","value","filterPlaceholder","Tree_div_0_p_scroller_4_ng_template_2_ul_0_p_treeNode_1_Template","rowNode_r5","firstChild_r6","lastChild_r7","index_r8","scrollerOptions_r9","getIndex","Tree_div_0_p_scroller_4_ng_template_2_ul_0_Template","ctx_r9","items_r11","contentStyle","contentStyleClass","ariaLabel","ariaLabelledBy","Tree_div_0_p_scroller_4_ng_template_2_Template","Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_ng_container_0_Template","Tree_div_0_p_scroller_4_ng_container_3_ng_template_1_Template","scrollerOptions_r12","loaderTemplate","Tree_div_0_p_scroller_4_ng_container_3_Template","Tree_div_0_p_scroller_4_Template","_r4","Tree_div_0_p_scroller_4_Template_p_scroller_onScroll_0_listener","onScroll","emit","Tree_div_0_p_scroller_4_Template_p_scroller_onScrollIndexChange_0_listener","onScrollIndexChange","Tree_div_0_p_scroller_4_Template_p_scroller_onLazyLoad_0_listener","onLazyLoad","scrollHeight","undefined","serializedValue","virtualScrollItemSize","_virtualNodeHeight","lazy","virtualScrollOptions","Tree_div_0_ng_container_5_ul_3_p_treeNode_1_Template","node_r13","firstChild_r14","lastChild_r15","index_r16","Tree_div_0_ng_container_5_ul_3_Template","getRootNode","Tree_div_0_ng_container_5_Template","Tree_div_0_div_6_ng_container_1_Template","ɵɵtextInterpolate1","emptyMessageLabel","Tree_div_0_div_6_ng_container_2_Template","Tree_div_0_div_6_Template","emptyMessageTemplate","emptyFilter","Tree_div_0_ng_container_7_Template","Tree_div_0_Template","Tree_div_0_Template_div_drop_0_listener","onDrop","Tree_div_0_Template_div_dragover_0_listener","onDragOver","Tree_div_0_Template_div_dragenter_0_listener","onDragEnter","Tree_div_0_Template_div_dragleave_0_listener","onDragLeave","ɵɵpureFunction4","dragHover","loading","headerTemplate","filter","footerTemplate","Tree_div_1_ng_container_1_Template","Tree_div_1_div_2_i_1_Template","Tree_div_1_div_2_ng_container_2_SpinnerIcon_1_Template","Tree_div_1_div_2_ng_container_2_span_2_1_ng_template_0_Template","Tree_div_1_div_2_ng_container_2_span_2_1_Template","Tree_div_1_div_2_ng_container_2_span_2_Template","Tree_div_1_div_2_ng_container_2_Template","Tree_div_1_div_2_Template","Tree_div_1_table_3_Template","Tree_div_1_div_4_ng_container_1_Template","Tree_div_1_div_4_ng_container_2_Template","Tree_div_1_div_4_Template","Tree_div_1_ng_container_5_Template","Tree_div_1_Template","UITreeNode","ICON_CLASS","rowNode","parentNode","timeout","constructor","ngOnInit","parent","setAllNodesTabIndexes","syncNodeOption","getNodeWithKey","key","isNodeLeaf","event","collapse","expand","stopPropagation","updateSerializedValue","focusVirtualNode","onNodeExpand","originalEvent","onNodeCollapse","isSameNode","currentTarget","closest","position","dragNode","dragNodeIndex","dragNodeScope","isValidDropPointIndex","dragNodeTree","allowDrop","dropParams","createDropPointEventMetadata","validateDrop","onNodeDrop","dropNode","accept","processPointDrop","newNodeList","dragNodeSubNodes","splice","dropIndex","push","dragDropService","stopDrag","subNodes","dataTransfer","dropEffect","draggable","setData","startDrag","scope","draggableScope","droppable","createDropNodeEventMetadata","processNodeDrop","rect","getBoundingClientRect","x","left","width","y","Math","floor","top","contextMenu","containerViewChild","nativeElement","display","code","onArrowDown","onArrowUp","onArrowRight","onArrowLeft","onEnter","nodeElement","getAttribute","parentElement","previousElementSibling","focusRowChange","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","listElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","tabIndex","setTimeout","setTabIndexForSelectionMode","nodeTouched","nodes","find","el","hasSelectedNode","some","forEach","selectedNodes","elements","every","element","Array","from","hasClass","childrenListElement","lastChildElement","tagName","focusNode","focus","firstFocusableRow","currentFocusedRow","lastVisibleDescendant","findSingle","document","body","data","ɵfac","UITreeNode_Factory","t","ɵɵdirectiveInject","Tree","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","UITreeNode_HostBindings","inputs","decls","vars","consts","template","UITreeNode_Template","dependencies","NgClass","NgForOf","NgIf","NgTemplateOutlet","NgStyle","Ripple","encapsulation","ngDevMode","ɵsetClassMetadata","args","selector","None","host","class","decorators","config","cd","selection","layout","droppableScope","metaKeySelection","propagateSelectionUp","propagateSelectionDown","emptyMessage","filterBy","filterMode","filteredNodes","filterLocale","_templateMap","item","virtualNodeHeight","val","console","warn","selectionChange","onNodeSelect","onNodeUnselect","onNodeContextMenuSelect","onFilter","templates","filterViewChild","scroller","wrapperViewChild","dragStartSubscription","dragStopSubscription","dragStart$","subscribe","dragStop$","ngOnChanges","simpleChange","getTranslation","EMPTY_MESSAGE","ngAfterContentInit","getType","name","serializeNodes","visible","eventTarget","hasFilteredNodes","findIndexInSelection","selected","isCheckboxSelectionMode","propagateDown","i","propagateUp","metaSelection","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","className","indexOf","show","areNodesEqual","selectedNode","parentNodes","option","_node","matchedNode","select","selectedCount","childPartialSelected","child","leaf","processTreeDrop","isValidDragScope","allow","dragScope","dropScope","isArray","s","ds","filterValue","searchFields","split","filterText","removeAccents","toLocaleLowerCase","isStrictMode","copyNode","paramsWithoutNode","findFilteredNodes","isFilterMatched","filteredValue","resetFilter","scrollToVirtualIndex","scrollToIndex","scrollTo","scrollLeft","scrollTop","matched","childNodes","childNode","copyChildNode","params","field","fieldValue","String","resolveFieldData","getItemOptions","getBlockableElement","ngOnDestroy","unsubscribe","Tree_Factory","ElementRef","TreeDragDropService","PrimeNGConfig","ChangeDetectorRef","contentQueries","Tree_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","Tree_Query","ɵɵviewQuery","outputs","features","ɵɵNgOnChangesFeature","Tree_Template","Scroller","styles","changeDetection","Default","TreeModule","TreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["/workspace/angular-sakai/node_modules/primeng/fesm2022/primeng-tree.mjs"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, Component, ViewEncapsulation, Inject, Input, EventEmitter, ChangeDetectionStrategy, Optional, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport * as i3 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { PlusIcon } from 'primeng/icons/plus';\nimport { SearchIcon } from 'primeng/icons/search';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\n\nclass UITreeNode {\n    static ICON_CLASS = 'p-treenode-icon ';\n    rowNode;\n    node;\n    parentNode;\n    root;\n    index;\n    firstChild;\n    lastChild;\n    level;\n    indentation;\n    itemSize;\n    tree;\n    timeout;\n    draghoverPrev;\n    draghoverNext;\n    draghoverNode;\n    get ariaSelected() {\n        return this.tree.selectionMode === 'single' || this.tree.selectionMode === 'multiple' ? this.isSelected() : undefined;\n    }\n    get ariaChecked() {\n        return this.tree.selectionMode === 'checkbox' ? this.isSelected() : undefined;\n    }\n    constructor(tree) {\n        this.tree = tree;\n    }\n    ngOnInit() {\n        this.node.parent = this.parentNode;\n        if (this.parentNode) {\n            this.setAllNodesTabIndexes();\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    }\n    getIcon() {\n        let icon;\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children?.length ? this.node.expandedIcon : this.node.collapsedIcon;\n        return UITreeNode.ICON_CLASS + ' ' + icon;\n    }\n    isLeaf() {\n        return this.tree.isNodeLeaf(this.node);\n    }\n    toggle(event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n        event.stopPropagation();\n    }\n    expand(event) {\n        this.node.expanded = true;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n            this.focusVirtualNode();\n        }\n        this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });\n    }\n    collapse(event) {\n        this.node.expanded = false;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n            this.focusVirtualNode();\n        }\n        this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });\n    }\n    onNodeClick(event) {\n        this.tree.onNodeClick(event, this.node);\n    }\n    onNodeKeydown(event) {\n        if (event.key === 'Enter') {\n            this.tree.onNodeClick(event, this.node);\n        }\n    }\n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n    onNodeRightClick(event) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n    isSameNode(event) {\n        return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n    }\n    onDropPoint(event, position) {\n        event.preventDefault();\n        let dragNode = this.tree.dragNode;\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        let dragNodeScope = this.tree.dragNodeScope;\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            let dropParams = { ...this.createDropPointEventMetadata(position) };\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    index: this.index,\n                    accept: () => {\n                        this.processPointDrop(dropParams);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dropParams);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    index: this.index\n                });\n            }\n        }\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n    processPointDrop(event) {\n        let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n        event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n        let dropIndex = this.index;\n        if (event.position < 0) {\n            dropIndex = event.dragNodeSubNodes === newNodeList ? (event.dragNodeIndex > event.index ? event.index : event.index - 1) : event.index;\n            newNodeList.splice(dropIndex, 0, event.dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(event.dragNode);\n        }\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: event.dragNodeIndex\n        });\n    }\n    createDropPointEventMetadata(position) {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex: this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node,\n            index: this.index,\n            position: position\n        };\n    }\n    onDropPointDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    }\n    onDropPointDragEnter(event, position) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    }\n    onDropPointDragLeave(event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n    onDragStart(event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData('text', 'data');\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n    onDragStop(event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    }\n    onDropNodeDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    onDropNode(event) {\n        if (this.tree.droppableNodes && this.node?.droppable !== false) {\n            let dragNode = this.tree.dragNode;\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n                let dropParams = { ...this.createDropNodeEventMetadata() };\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: () => {\n                            this.processNodeDrop(dropParams);\n                        }\n                    });\n                }\n                else {\n                    this.processNodeDrop(dropParams);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                }\n            }\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.draghoverNode = false;\n    }\n    createDropNodeEventMetadata() {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex: this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node\n        };\n    }\n    processNodeDrop(event) {\n        let dragNodeIndex = event.dragNodeIndex;\n        event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        if (event.dropNode.children)\n            event.dropNode.children.push(event.dragNode);\n        else\n            event.dropNode.children = [event.dragNode];\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n    }\n    onDropNodeDragEnter(event) {\n        if (this.tree.droppableNodes && this.node?.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    }\n    onDropNodeDragLeave(event) {\n        if (this.tree.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n                this.draghoverNode = false;\n            }\n        }\n    }\n    onKeyDown(event) {\n        if (!this.isSameNode(event) || (this.tree.contextMenu && this.tree.contextMenu.containerViewChild?.nativeElement.style.display === 'block')) {\n            return;\n        }\n        switch (event.code) {\n            //down arrow\n            case 'ArrowDown':\n                this.onArrowDown(event);\n                break;\n            //up arrow\n            case 'ArrowUp':\n                this.onArrowUp(event);\n                break;\n            //right arrow\n            case 'ArrowRight':\n                this.onArrowRight(event);\n                break;\n            //left arrow\n            case 'ArrowLeft':\n                this.onArrowLeft(event);\n                break;\n            //enter\n            case 'Enter':\n            case 'Space':\n                this.onEnter(event);\n                break;\n            //tab\n            case 'Tab':\n                this.setAllNodesTabIndexes();\n                break;\n            default:\n                //no op\n                break;\n        }\n    }\n    onArrowUp(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target.parentElement;\n        if (nodeElement.previousElementSibling) {\n            this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n        }\n        else {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n            if (parentNodeElement) {\n                this.focusRowChange(nodeElement, parentNodeElement);\n            }\n        }\n        event.preventDefault();\n    }\n    onArrowDown(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n        const listElement = nodeElement.children[1];\n        if (listElement && listElement.children.length > 0) {\n            this.focusRowChange(nodeElement, listElement.children[0]);\n        }\n        else {\n            if (nodeElement.parentElement.nextElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.parentElement.nextElementSibling);\n            }\n            else {\n                let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement.parentElement);\n                if (nextSiblingAncestor) {\n                    this.focusRowChange(nodeElement, nextSiblingAncestor);\n                }\n            }\n        }\n        event.preventDefault();\n    }\n    onArrowRight(event) {\n        if (!this.node?.expanded && !this.tree.isNodeLeaf(this.node)) {\n            this.expand(event);\n            event.currentTarget.tabIndex = -1;\n            setTimeout(() => {\n                this.onArrowDown(event);\n            }, 1);\n        }\n        event.preventDefault();\n    }\n    onArrowLeft(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n        if (this.level === 0 && !this.node?.expanded) {\n            return false;\n        }\n        if (this.node?.expanded) {\n            this.collapse(event);\n            return;\n        }\n        let parentNodeElement = this.getParentNodeElement(nodeElement.parentElement);\n        if (parentNodeElement) {\n            this.focusRowChange(event.currentTarget, parentNodeElement);\n        }\n        event.preventDefault();\n    }\n    onEnter(event) {\n        this.tree.onNodeClick(event, this.node);\n        this.setTabIndexForSelectionMode(event, this.tree.nodeTouched);\n        event.preventDefault();\n    }\n    setAllNodesTabIndexes() {\n        const nodes = DomHandler.find(this.tree.el.nativeElement, '.p-treenode');\n        const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n        [...nodes].forEach((node) => {\n            node.tabIndex = -1;\n        });\n        if (hasSelectedNode) {\n            const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n            selectedNodes[0].tabIndex = 0;\n            return;\n        }\n        [...nodes][0].tabIndex = 0;\n    }\n    setTabIndexForSelectionMode(event, nodeTouched) {\n        if (this.tree.selectionMode !== null) {\n            const elements = [...DomHandler.find(this.tree.el.nativeElement, '.p-treenode')];\n            event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n            if (elements.every((element) => element.tabIndex === -1)) {\n                elements[0].tabIndex = 0;\n            }\n        }\n    }\n    findNextSiblingOfAncestor(nodeElement) {\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    }\n    findLastVisibleDescendant(nodeElement) {\n        const listElement = Array.from(nodeElement.children).find((el) => DomHandler.hasClass(el, 'p-treenode'));\n        const childrenListElement = listElement.children[1];\n        if (childrenListElement && childrenListElement.children.length > 0) {\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    }\n    getParentNodeElement(nodeElement) {\n        const parentNodeElement = nodeElement.parentElement?.parentElement?.parentElement;\n        return parentNodeElement?.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    }\n    focusNode(element) {\n        if (this.tree.droppableNodes)\n            element.children[1].focus();\n        else\n            element.children[0].focus();\n    }\n    focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n        firstFocusableRow.tabIndex = '-1';\n        currentFocusedRow.children[0].tabIndex = '0';\n        this.focusNode(lastVisibleDescendant || currentFocusedRow);\n    }\n    focusVirtualNode() {\n        this.timeout = setTimeout(() => {\n            let node = DomHandler.findSingle(document.body, `[data-id=\"${this.node?.key ?? this.node?.data}\"]`);\n            DomHandler.focus(node);\n        }, 1);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: UITreeNode, deps: [{ token: forwardRef(() => Tree) }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.5\", type: UITreeNode, selector: \"p-treeNode\", inputs: { rowNode: \"rowNode\", node: \"node\", parentNode: \"parentNode\", root: \"root\", index: \"index\", firstChild: \"firstChild\", lastChild: \"lastChild\", level: \"level\", indentation: \"indentation\", itemSize: \"itemSize\" }, host: { properties: { \"attr.role\": \"\\\"treeitem\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <ng-template [ngIf]=\"node\">\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                *ngIf=\"!tree.horizontal\"\n                [ngClass]=\"['p-treenode', node.styleClass || '', isLeaf() ? 'p-treenode-leaf' : '']\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"ariaChecked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"ariaSelected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    class=\"p-treenode-content\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                    [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode && node.selectable !== false, 'p-treenode-dragover': draghoverNode, 'p-highlight': isSelected() }\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-toggler p-link\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\" aria-hidden=\"true\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                            <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                            <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                        </span>\n                    </button>\n                    <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-disabled': node.selectable === false }\" *ngIf=\"tree.selectionMode == 'checkbox'\" aria-hidden=\"true\">\n                        <div class=\"p-checkbox-box\" [ngClass]=\"{ 'p-highlight': isSelected(), 'p-indeterminate': node.partialSelected }\" role=\"checkbox\">\n                            <ng-container *ngIf=\"!tree.checkboxIconTemplate\">\n                                <CheckIcon *ngIf=\"!node.partialSelected && isSelected()\" [styleClass]=\"'p-checkbox-icon'\" />\n                                <MinusIcon *ngIf=\"node.partialSelected\" [styleClass]=\"'p-checkbox-icon'\" />\n                            </ng-container>\n                            <ng-template *ngTemplateOutlet=\"tree.checkboxIconTemplate; context: { $implicit: isSelected(), partialSelected: node.partialSelected }\"></ng-template>\n                        </div>\n                    </div>\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-treenode-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"p-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"p-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !firstChild }\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !lastChild }\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"p-treenode\" [ngClass]=\"{ 'p-treenode-collapsed': !node.expanded }\">\n                            <div\n                                class=\"p-treenode-content\"\n                                tabindex=\"0\"\n                                [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode, 'p-highlight': isSelected() }\"\n                                (click)=\"onNodeClick($event)\"\n                                (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\"\n                                (keydown)=\"onNodeKeydown($event)\"\n                            >\n                                <span *ngIf=\"!isLeaf()\" [ngClass]=\"'p-tree-toggler'\" (click)=\"toggle($event)\">\n                                    <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                                        <PlusIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                        <MinusIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                    </ng-container>\n                                    <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                                        <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                                    </span>\n                                </span>\n                                <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                                <span class=\"p-treenode-label\">\n                                    <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                                    <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                                    </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"p-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"p-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; trackBy: tree.trackBy\" [node]=\"childNode\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i1.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgForOf), selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgStyle), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.Ripple), selector: \"[pRipple]\" }, { kind: \"component\", type: i0.forwardRef(() => CheckIcon), selector: \"CheckIcon\" }, { kind: \"component\", type: i0.forwardRef(() => ChevronDownIcon), selector: \"ChevronDownIcon\" }, { kind: \"component\", type: i0.forwardRef(() => ChevronRightIcon), selector: \"ChevronRightIcon\" }, { kind: \"component\", type: i0.forwardRef(() => MinusIcon), selector: \"MinusIcon\" }, { kind: \"component\", type: i0.forwardRef(() => PlusIcon), selector: \"PlusIcon\" }, { kind: \"component\", type: i0.forwardRef(() => UITreeNode), selector: \"p-treeNode\", inputs: [\"rowNode\", \"node\", \"parentNode\", \"root\", \"index\", \"firstChild\", \"lastChild\", \"level\", \"indentation\", \"itemSize\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: UITreeNode, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeNode',\n                    template: `\n        <ng-template [ngIf]=\"node\">\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                *ngIf=\"!tree.horizontal\"\n                [ngClass]=\"['p-treenode', node.styleClass || '', isLeaf() ? 'p-treenode-leaf' : '']\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"ariaChecked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"ariaSelected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    class=\"p-treenode-content\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                    [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode && node.selectable !== false, 'p-treenode-dragover': draghoverNode, 'p-highlight': isSelected() }\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-toggler p-link\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\" aria-hidden=\"true\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                            <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                            <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" />\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                        </span>\n                    </button>\n                    <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-disabled': node.selectable === false }\" *ngIf=\"tree.selectionMode == 'checkbox'\" aria-hidden=\"true\">\n                        <div class=\"p-checkbox-box\" [ngClass]=\"{ 'p-highlight': isSelected(), 'p-indeterminate': node.partialSelected }\" role=\"checkbox\">\n                            <ng-container *ngIf=\"!tree.checkboxIconTemplate\">\n                                <CheckIcon *ngIf=\"!node.partialSelected && isSelected()\" [styleClass]=\"'p-checkbox-icon'\" />\n                                <MinusIcon *ngIf=\"node.partialSelected\" [styleClass]=\"'p-checkbox-icon'\" />\n                            </ng-container>\n                            <ng-template *ngTemplateOutlet=\"tree.checkboxIconTemplate; context: { $implicit: isSelected(), partialSelected: node.partialSelected }\"></ng-template>\n                        </div>\n                    </div>\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-treenode-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-treenode-droppoint\"\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"p-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"p-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !firstChild }\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !lastChild }\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"p-treenode\" [ngClass]=\"{ 'p-treenode-collapsed': !node.expanded }\">\n                            <div\n                                class=\"p-treenode-content\"\n                                tabindex=\"0\"\n                                [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode, 'p-highlight': isSelected() }\"\n                                (click)=\"onNodeClick($event)\"\n                                (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\"\n                                (keydown)=\"onNodeKeydown($event)\"\n                            >\n                                <span *ngIf=\"!isLeaf()\" [ngClass]=\"'p-tree-toggler'\" (click)=\"toggle($event)\">\n                                    <ng-container *ngIf=\"!tree.togglerIconTemplate\">\n                                        <PlusIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                        <MinusIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\" />\n                                    </ng-container>\n                                    <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\n                                        <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\n                                    </span>\n                                </span>\n                                <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                                <span class=\"p-treenode-label\">\n                                    <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                                    <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                                    </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"p-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"p-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; trackBy: tree.trackBy\" [node]=\"childNode\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element',\n                        '[attr.role]': '\"treeitem\"'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: Tree, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => Tree)]\n                }] }], propDecorators: { rowNode: [{\n                type: Input\n            }], node: [{\n                type: Input\n            }], parentNode: [{\n                type: Input\n            }], root: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], firstChild: [{\n                type: Input\n            }], lastChild: [{\n                type: Input\n            }], level: [{\n                type: Input\n            }], indentation: [{\n                type: Input\n            }], itemSize: [{\n                type: Input\n            }] } });\n/**\n * Tree is used to display hierarchical data.\n * @group Components\n */\nclass Tree {\n    el;\n    dragDropService;\n    config;\n    cd;\n    /**\n     * An array of treenodes.\n     * @group Props\n     */\n    value;\n    /**\n     * Defines the selection mode.\n     * @group Props\n     */\n    selectionMode;\n    /**\n     * A single treenode instance or an array to refer to the selections.\n     * @group Props\n     */\n    selection;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Context menu instance.\n     * @group Props\n     */\n    contextMenu;\n    /**\n     * Defines the orientation of the tree, valid values are 'vertical' and 'horizontal'.\n     * @group Props\n     */\n    layout = 'vertical';\n    /**\n     * Scope of the draggable nodes to match a droppableScope.\n     * @group Props\n     */\n    draggableScope;\n    /**\n     * Scope of the droppable nodes to match a draggableScope.\n     * @group Props\n     */\n    droppableScope;\n    /**\n     * Whether the nodes are draggable.\n     * @group Props\n     */\n    draggableNodes;\n    /**\n     * Whether the nodes are droppable.\n     * @group Props\n     */\n    droppableNodes;\n    /**\n     * Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.\n     * @group Props\n     */\n    metaKeySelection = true;\n    /**\n     * Whether checkbox selections propagate to ancestor nodes.\n     * @group Props\n     */\n    propagateSelectionUp = true;\n    /**\n     * Whether checkbox selections propagate to descendant nodes.\n     * @group Props\n     */\n    propagateSelectionDown = true;\n    /**\n     * Displays a loader to indicate data load is in progress.\n     * @group Props\n     */\n    loading;\n    /**\n     * The icon to show while indicating data load is in progress.\n     * @group Props\n     */\n    loadingIcon;\n    /**\n     * Text to display when there is no data.\n     * @group Props\n     */\n    emptyMessage = '';\n    /**\n     * Used to define a string that labels the tree.\n     * @group Props\n     */\n    ariaLabel;\n    /**\n     * Defines a string that labels the toggler icon for accessibility.\n     * @group Props\n     */\n    togglerAriaLabel;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    ariaLabelledBy;\n    /**\n     * When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop.\n     * @group Props\n     */\n    validateDrop;\n    /**\n     * When specified, displays an input field to filter the items.\n     * @group Props\n     */\n    filter;\n    /**\n     * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.\n     * @group Props\n     */\n    filterBy = 'label';\n    /**\n     * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n     * @group Props\n     */\n    filterMode = 'lenient';\n    /**\n     * Placeholder text to show when filter input is empty.\n     * @group Props\n     */\n    filterPlaceholder;\n    /**\n     * Values after the tree nodes are filtered.\n     * @group Props\n     */\n    filteredNodes;\n    /**\n     * Locale to use in filtering. The default locale is the host environment's current locale.\n     * @group Props\n     */\n    filterLocale;\n    /**\n     * Height of the scrollable viewport.\n     * @group Props\n     */\n    scrollHeight;\n    /**\n     * Defines if data is loaded and interacted with in lazy manner.\n     * @group Props\n     */\n    lazy = false;\n    /**\n     * Whether the data should be loaded on demand during scroll.\n     * @group Props\n     */\n    virtualScroll;\n    /**\n     * Height of an item in the list for VirtualScrolling.\n     * @group Props\n     */\n    virtualScrollItemSize;\n    /**\n     * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n     * @group Props\n     */\n    virtualScrollOptions;\n    /**\n     * Indentation factor for spacing of the nested node when virtual scrolling is enabled.\n     * @group Props\n     */\n    indentation = 1.5;\n    /**\n     * Custom templates of the component.\n     * @group Props\n     */\n    _templateMap;\n    /**\n     * Function to optimize the node list rendering, default algorithm checks for object identity.\n     * @group Props\n     */\n    trackBy = (index, item) => item;\n    /**\n     * Height of the node.\n     * @group Props\n     * @deprecated use virtualScrollItemSize property instead.\n     */\n    _virtualNodeHeight;\n    get virtualNodeHeight() {\n        return this._virtualNodeHeight;\n    }\n    set virtualNodeHeight(val) {\n        this._virtualNodeHeight = val;\n        console.warn('The virtualNodeHeight property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    /**\n     * Callback to invoke on selection change.\n     * @param {(TreeNode<any> | TreeNode<any>[] | null)} event - Custom selection change event.\n     * @group Emits\n     */\n    selectionChange = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected.\n     * @param {TreeNodeSelectEvent} event - Node select event.\n     * @group Emits\n     */\n    onNodeSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is unselected.\n     * @param {TreeNodeUnSelectEvent} event - Node unselect event.\n     * @group Emits\n     */\n    onNodeUnselect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is expanded.\n     * @param {TreeNodeExpandEvent} event - Node expand event.\n     * @group Emits\n     */\n    onNodeExpand = new EventEmitter();\n    /**\n     * Callback to invoke when a node is collapsed.\n     * @param {TreeNodeCollapseEvent} event - Node collapse event.\n     * @group Emits\n     */\n    onNodeCollapse = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected with right click.\n     * @param {onNodeContextMenuSelect} event - Node context menu select event.\n     * @group Emits\n     */\n    onNodeContextMenuSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is dropped.\n     * @param {TreeNodeDropEvent} event - Node drop event.\n     * @group Emits\n     */\n    onNodeDrop = new EventEmitter();\n    /**\n     * Callback to invoke in lazy mode to load new data.\n     * @param {TreeLazyLoadEvent} event - Custom lazy load event.\n     * @group Emits\n     */\n    onLazyLoad = new EventEmitter();\n    /**\n     * Callback to invoke in virtual scroll mode when scroll position changes.\n     * @param {TreeScrollEvent} event - Custom scroll event.\n     * @group Emits\n     */\n    onScroll = new EventEmitter();\n    /**\n     * Callback to invoke in virtual scroll mode when scroll position and item's range in view changes.\n     * @param {TreeScrollIndexChangeEvent} event - Scroll index change event.\n     * @group Emits\n     */\n    onScrollIndexChange = new EventEmitter();\n    /**\n     * Callback to invoke when data is filtered.\n     * @param {TreeFilterEvent} event - Custom filter event.\n     * @group Emits\n     */\n    onFilter = new EventEmitter();\n    templates;\n    filterViewChild;\n    scroller;\n    wrapperViewChild;\n    serializedValue;\n    headerTemplate;\n    footerTemplate;\n    loaderTemplate;\n    emptyMessageTemplate;\n    togglerIconTemplate;\n    checkboxIconTemplate;\n    loadingIconTemplate;\n    filterIconTemplate;\n    nodeTouched;\n    dragNodeTree;\n    dragNode;\n    dragNodeSubNodes;\n    dragNodeIndex;\n    dragNodeScope;\n    dragHover;\n    dragStartSubscription;\n    dragStopSubscription;\n    constructor(el, dragDropService, config, cd) {\n        this.el = el;\n        this.dragDropService = dragDropService;\n        this.config = config;\n        this.cd = cd;\n    }\n    ngOnInit() {\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe((event) => {\n                this.dragNodeTree = event.tree;\n                this.dragNode = event.node;\n                this.dragNodeSubNodes = event.subNodes;\n                this.dragNodeIndex = event.index;\n                this.dragNodeScope = event.scope;\n            });\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe((event) => {\n                this.dragNodeTree = null;\n                this.dragNode = null;\n                this.dragNodeSubNodes = null;\n                this.dragNodeIndex = null;\n                this.dragNodeScope = null;\n                this.dragHover = false;\n            });\n        }\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this.updateSerializedValue();\n        }\n    }\n    get horizontal() {\n        return this.layout == 'horizontal';\n    }\n    get emptyMessageLabel() {\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this._templateMap = {};\n        }\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'empty':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'loader':\n                    this.loaderTemplate = item.template;\n                    break;\n                case 'togglericon':\n                    this.togglerIconTemplate = item.template;\n                    break;\n                case 'checkboxicon':\n                    this.checkboxIconTemplate = item.template;\n                    break;\n                case 'loadingicon':\n                    this.loadingIconTemplate = item.template;\n                    break;\n                case 'filtericon':\n                    this.filterIconTemplate = item.template;\n                    break;\n                default:\n                    this._templateMap[item.name] = item.template;\n                    break;\n            }\n        });\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        this.serializeNodes(null, this.getRootNode(), 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    onNodeClick(event, node) {\n        let eventTarget = event.target;\n        if (DomHandler.hasClass(eventTarget, 'p-tree-toggler') || DomHandler.hasClass(eventTarget, 'p-tree-toggler-icon')) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.value);\n                if (!node) {\n                    return;\n                }\n            }\n            let index = this.findIndexInSelection(node);\n            let selected = index >= 0;\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter((val, i) => i != index);\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = [...(this.selection || []), node];\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({ originalEvent: event, node: node });\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n                if (metaSelection) {\n                    let metaKey = event.metaKey || event.ctrlKey;\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter((val, i) => i != index);\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = !metaKey ? [] : this.selection || [];\n                            this.selection = [...this.selection, node];\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeSelect.emit({ originalEvent: event, node: node });\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter((val, i) => i != index);\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = [...(this.selection || []), node];\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\n                        }\n                    }\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n        this.nodeTouched = false;\n    }\n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n    onNodeRightClick(event, node) {\n        if (this.contextMenu) {\n            let eventTarget = event.target;\n            if (eventTarget.className && eventTarget.className.indexOf('p-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = index >= 0;\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });\n            }\n        }\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : -1;\n            }\n            else {\n                for (let i = 0; i < this.selection.length; i++) {\n                    let selectedNode = this.selection[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return index;\n    }\n    syncNodeOption(node, parentNodes, option, value) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value || node[option];\n        }\n    }\n    hasFilteredNodes() {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    }\n    getNodeWithKey(key, nodes) {\n        for (let node of nodes) {\n            if (node.key === key) {\n                return node;\n            }\n            if (node.children) {\n                let matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    }\n    propagateUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedCount = 0;\n            let childPartialSelected = false;\n            for (let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n            if (select && selectedCount == node.children.length) {\n                this.selection = [...(this.selection || []), node];\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection = this.selection.filter((val, i) => i != index);\n                    }\n                }\n                if (childPartialSelected || (selectedCount > 0 && selectedCount != node.children.length))\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    }\n    propagateDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        if (select && index == -1) {\n            this.selection = [...(this.selection || []), node];\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter((val, i) => i != index);\n        }\n        node.partialSelected = false;\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        return this.findIndexInSelection(node) != -1;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n    isNodeLeaf(node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    }\n    getRootNode() {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    }\n    getTemplateForNode(node) {\n        if (this._templateMap)\n            return node.type ? this._templateMap[node.type] : this._templateMap['default'];\n        else\n            return null;\n    }\n    onDragOver(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    }\n    onDrop(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            let dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                let dragNodeIndex = this.dragNodeIndex;\n                this.value = this.value || [];\n                if (this.validateDrop) {\n                    this.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: null,\n                        index: dragNodeIndex,\n                        accept: () => {\n                            this.processTreeDrop(dragNode, dragNodeIndex);\n                        }\n                    });\n                }\n                else {\n                    this.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: null,\n                        index: dragNodeIndex\n                    });\n                    this.processTreeDrop(dragNode, dragNodeIndex);\n                }\n            }\n        }\n    }\n    processTreeDrop(dragNode, dragNodeIndex) {\n        this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        this.value.push(dragNode);\n        this.dragDropService.stopDrag({\n            node: dragNode\n        });\n    }\n    onDragEnter() {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    }\n    onDragLeave(event) {\n        if (this.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n                this.dragHover = false;\n            }\n        }\n    }\n    allowDrop(dragNode, dropNode, dragNodeScope) {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            let allow = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    let parent = dropNode.parent;\n                    while (parent != null) {\n                        if (parent === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent = parent.parent;\n                    }\n                }\n            }\n            return allow;\n        }\n        else {\n            return false;\n        }\n    }\n    isValidDragScope(dragScope) {\n        let dropScope = this.droppableScope;\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (Array.isArray(dragScope))\n                    return dragScope.indexOf(dropScope) != -1;\n            }\n            else if (Array.isArray(dropScope)) {\n                if (typeof dragScope === 'string') {\n                    return dropScope.indexOf(dragScope) != -1;\n                }\n                else if (Array.isArray(dragScope)) {\n                    for (let s of dropScope) {\n                        for (let ds of dragScope) {\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    _filter(value) {\n        let filterValue = value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            const searchFields = this.filterBy.split(',');\n            const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n            const isStrictMode = this.filterMode === 'strict';\n            for (let node of this.value) {\n                let copyNode = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, isStrictMode };\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }\n        this.updateSerializedValue();\n        this.onFilter.emit({\n            filter: filterValue,\n            filteredValue: this.filteredNodes\n        });\n    }\n    /**\n     * Resets filter.\n     * @group Method\n     */\n    resetFilter() {\n        this.filteredNodes = null;\n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.filterViewChild.nativeElement.value = '';\n        }\n    }\n    /**\n     * Scrolls to virtual index.\n     * @param {number} number - Index to be scrolled.\n     * @group Method\n     */\n    scrollToVirtualIndex(index) {\n        this.virtualScroll && this.scroller?.scrollToIndex(index);\n    }\n    /**\n     * Scrolls to virtual index.\n     * @param {ScrollToOptions} options - Scroll options.\n     * @group Method\n     */\n    scrollTo(options) {\n        if (this.virtualScroll) {\n            this.scroller?.scrollTo(options);\n        }\n        else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\n            if (this.wrapperViewChild.nativeElement.scrollTo) {\n                this.wrapperViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.wrapperViewChild.nativeElement.scrollLeft = options.left;\n                this.wrapperViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = { ...childNode };\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                node.expanded = true;\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, params) {\n        let { searchFields, filterText, isStrictMode } = params;\n        let matched = false;\n        for (let field of searchFields) {\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { searchFields, filterText, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    getIndex(options, index) {\n        const getItemOptions = options['getItemOptions'];\n        return getItemOptions ? getItemOptions(index).index : index;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    ngOnDestroy() {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: Tree, deps: [{ token: i0.ElementRef }, { token: i3.TreeDragDropService, optional: true }, { token: i3.PrimeNGConfig }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.5\", type: Tree, selector: \"p-tree\", inputs: { value: \"value\", selectionMode: \"selectionMode\", selection: \"selection\", style: \"style\", styleClass: \"styleClass\", contextMenu: \"contextMenu\", layout: \"layout\", draggableScope: \"draggableScope\", droppableScope: \"droppableScope\", draggableNodes: \"draggableNodes\", droppableNodes: \"droppableNodes\", metaKeySelection: \"metaKeySelection\", propagateSelectionUp: \"propagateSelectionUp\", propagateSelectionDown: \"propagateSelectionDown\", loading: \"loading\", loadingIcon: \"loadingIcon\", emptyMessage: \"emptyMessage\", ariaLabel: \"ariaLabel\", togglerAriaLabel: \"togglerAriaLabel\", ariaLabelledBy: \"ariaLabelledBy\", validateDrop: \"validateDrop\", filter: \"filter\", filterBy: \"filterBy\", filterMode: \"filterMode\", filterPlaceholder: \"filterPlaceholder\", filteredNodes: \"filteredNodes\", filterLocale: \"filterLocale\", scrollHeight: \"scrollHeight\", lazy: \"lazy\", virtualScroll: \"virtualScroll\", virtualScrollItemSize: \"virtualScrollItemSize\", virtualScrollOptions: \"virtualScrollOptions\", indentation: \"indentation\", _templateMap: \"_templateMap\", trackBy: \"trackBy\", virtualNodeHeight: \"virtualNodeHeight\" }, outputs: { selectionChange: \"selectionChange\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onNodeContextMenuSelect: \"onNodeContextMenuSelect\", onNodeDrop: \"onNodeDrop\", onLazyLoad: \"onLazyLoad\", onScroll: \"onScroll\", onScrollIndexChange: \"onScrollIndexChange\", onFilter: \"onFilter\" }, host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"filterViewChild\", first: true, predicate: [\"filter\"], descendants: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true }, { propertyName: \"wrapperViewChild\", first: true, predicate: [\"wrapper\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div\n            [ngClass]=\"{ 'p-tree p-component': true, 'p-tree-selectable': selectionMode, 'p-treenode-dragover': dragHover, 'p-tree-loading': loading, 'p-tree-flex-scrollable': scrollHeight === 'flex' }\"\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\"\n            (dragover)=\"onDragOver($event)\"\n            (dragenter)=\"onDragEnter()\"\n            (dragleave)=\"onDragLeave($event)\"\n        >\n            <div class=\"p-tree-loading-overlay p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div *ngIf=\"filter\" class=\"p-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"p-tree-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceholder\" (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event.target.value)\" />\n                <SearchIcon *ngIf=\"!filterIconTemplate\" [styleClass]=\"'p-tree-filter-icon'\" />\n                <span *ngIf=\"filterIconTemplate\" class=\"p-tree-filter-icon\">\n                    <ng-template *ngTemplateOutlet=\"filterIconTemplate\"></ng-template>\n                </span>\n            </div>\n\n            <p-scroller\n                #scroller\n                *ngIf=\"virtualScroll\"\n                [items]=\"serializedValue\"\n                [tabindex]=\"-1\"\n                styleClass=\"p-tree-wrapper\"\n                [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                [lazy]=\"lazy\"\n                (onScroll)=\"onScroll.emit($event)\"\n                (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                [options]=\"virtualScrollOptions\"\n            >\n                <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                    <ul *ngIf=\"items\" class=\"p-tree-container\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            #treeNode\n                            *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [level]=\"rowNode.level\"\n                            [rowNode]=\"rowNode\"\n                            [node]=\"rowNode.node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"getIndex(scrollerOptions, index)\"\n                            [itemSize]=\"scrollerOptions.itemSize\"\n                            [indentation]=\"indentation\"\n                        ></p-treeNode>\n                    </ul>\n                </ng-template>\n                <ng-container *ngIf=\"loaderTemplate\">\n                    <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                        <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                    </ng-template>\n                </ng-container>\n            </p-scroller>\n            <ng-container *ngIf=\"!virtualScroll\">\n                <div #wrapper class=\"p-tree-wrapper\" [style.max-height]=\"scrollHeight\">\n                    <ul class=\"p-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [node]=\"node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"index\"\n                            [level]=\"0\"\n                        ></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n        <div [ngClass]=\"{ 'p-tree p-tree-horizontal p-component': true, 'p-tree-selectable': selectionMode }\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div class=\"p-tree-loading-mask p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <table *ngIf=\"value && value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n    `, isInline: true, styles: [\"@layer primeng{.p-tree-container{margin:0;padding:0;list-style-type:none;overflow:auto}.p-treenode-children{margin:0;padding:0;list-style-type:none}.p-tree-wrapper{overflow:auto}.p-treenode-selectable{cursor:pointer;-webkit-user-select:none;user-select:none}.p-tree-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative;flex-shrink:0}.p-treenode-leaf>.p-treenode-content .p-tree-toggler{visibility:hidden}.p-treenode-content{display:flex;align-items:center}.p-tree-filter{width:100%}.p-tree-filter-container{position:relative;display:block;width:100%}.p-tree-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-tree-loading{position:relative;min-height:4rem}.p-tree .p-tree-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-tree-flex-scrollable{display:flex;flex:1;height:100%;flex-direction:column}.p-tree-flex-scrollable .p-tree-wrapper{flex:1}.p-tree .p-treenode-droppoint{height:4px;list-style-type:none}.p-tree .p-treenode-droppoint-active{border:0 none}.p-scroller .p-tree-container{overflow:visible}}\\n\"], dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i1.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgForOf), selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.NgStyle), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i0.forwardRef(() => i3.PrimeTemplate), selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i0.forwardRef(() => i4.Scroller), selector: \"p-scroller\", inputs: [\"id\", \"style\", \"styleClass\", \"tabindex\", \"items\", \"itemSize\", \"scrollHeight\", \"scrollWidth\", \"orientation\", \"step\", \"delay\", \"resizeDelay\", \"appendOnly\", \"inline\", \"lazy\", \"disabled\", \"loaderDisabled\", \"columns\", \"showSpacer\", \"showLoader\", \"numToleratedItems\", \"loading\", \"autoSize\", \"trackBy\", \"options\"], outputs: [\"onLazyLoad\", \"onScroll\", \"onScrollIndexChange\"] }, { kind: \"component\", type: i0.forwardRef(() => SearchIcon), selector: \"SearchIcon\" }, { kind: \"component\", type: i0.forwardRef(() => SpinnerIcon), selector: \"SpinnerIcon\" }, { kind: \"component\", type: i0.forwardRef(() => UITreeNode), selector: \"p-treeNode\", inputs: [\"rowNode\", \"node\", \"parentNode\", \"root\", \"index\", \"firstChild\", \"lastChild\", \"level\", \"indentation\", \"itemSize\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: Tree, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-tree', template: `\n        <div\n            [ngClass]=\"{ 'p-tree p-component': true, 'p-tree-selectable': selectionMode, 'p-treenode-dragover': dragHover, 'p-tree-loading': loading, 'p-tree-flex-scrollable': scrollHeight === 'flex' }\"\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\"\n            (dragover)=\"onDragOver($event)\"\n            (dragenter)=\"onDragEnter()\"\n            (dragleave)=\"onDragLeave($event)\"\n        >\n            <div class=\"p-tree-loading-overlay p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div *ngIf=\"filter\" class=\"p-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"p-tree-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceholder\" (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event.target.value)\" />\n                <SearchIcon *ngIf=\"!filterIconTemplate\" [styleClass]=\"'p-tree-filter-icon'\" />\n                <span *ngIf=\"filterIconTemplate\" class=\"p-tree-filter-icon\">\n                    <ng-template *ngTemplateOutlet=\"filterIconTemplate\"></ng-template>\n                </span>\n            </div>\n\n            <p-scroller\n                #scroller\n                *ngIf=\"virtualScroll\"\n                [items]=\"serializedValue\"\n                [tabindex]=\"-1\"\n                styleClass=\"p-tree-wrapper\"\n                [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                [lazy]=\"lazy\"\n                (onScroll)=\"onScroll.emit($event)\"\n                (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                [options]=\"virtualScrollOptions\"\n            >\n                <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                    <ul *ngIf=\"items\" class=\"p-tree-container\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            #treeNode\n                            *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [level]=\"rowNode.level\"\n                            [rowNode]=\"rowNode\"\n                            [node]=\"rowNode.node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"getIndex(scrollerOptions, index)\"\n                            [itemSize]=\"scrollerOptions.itemSize\"\n                            [indentation]=\"indentation\"\n                        ></p-treeNode>\n                    </ul>\n                </ng-template>\n                <ng-container *ngIf=\"loaderTemplate\">\n                    <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                        <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                    </ng-template>\n                </ng-container>\n            </p-scroller>\n            <ng-container *ngIf=\"!virtualScroll\">\n                <div #wrapper class=\"p-tree-wrapper\" [style.max-height]=\"scrollHeight\">\n                    <ul class=\"p-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode\n                            *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                            [node]=\"node\"\n                            [firstChild]=\"firstChild\"\n                            [lastChild]=\"lastChild\"\n                            [index]=\"index\"\n                            [level]=\"0\"\n                        ></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n        <div [ngClass]=\"{ 'p-tree p-tree-horizontal p-component': true, 'p-tree-selectable': selectionMode }\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <div class=\"p-tree-loading-mask p-component-overlay\" *ngIf=\"loading\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <table *ngIf=\"value && value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n    `, changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\"@layer primeng{.p-tree-container{margin:0;padding:0;list-style-type:none;overflow:auto}.p-treenode-children{margin:0;padding:0;list-style-type:none}.p-tree-wrapper{overflow:auto}.p-treenode-selectable{cursor:pointer;-webkit-user-select:none;user-select:none}.p-tree-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative;flex-shrink:0}.p-treenode-leaf>.p-treenode-content .p-tree-toggler{visibility:hidden}.p-treenode-content{display:flex;align-items:center}.p-tree-filter{width:100%}.p-tree-filter-container{position:relative;display:block;width:100%}.p-tree-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-tree-loading{position:relative;min-height:4rem}.p-tree .p-tree-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-tree-flex-scrollable{display:flex;flex:1;height:100%;flex-direction:column}.p-tree-flex-scrollable .p-tree-wrapper{flex:1}.p-tree .p-treenode-droppoint{height:4px;list-style-type:none}.p-tree .p-treenode-droppoint-active{border:0 none}.p-scroller .p-tree-container{overflow:visible}}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i3.TreeDragDropService, decorators: [{\n                    type: Optional\n                }] }, { type: i3.PrimeNGConfig }, { type: i0.ChangeDetectorRef }], propDecorators: { value: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], draggableScope: [{\n                type: Input\n            }], droppableScope: [{\n                type: Input\n            }], draggableNodes: [{\n                type: Input\n            }], droppableNodes: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], propagateSelectionUp: [{\n                type: Input\n            }], propagateSelectionDown: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingIcon: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], togglerAriaLabel: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], validateDrop: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], filterBy: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterPlaceholder: [{\n                type: Input\n            }], filteredNodes: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], virtualScrollItemSize: [{\n                type: Input\n            }], virtualScrollOptions: [{\n                type: Input\n            }], indentation: [{\n                type: Input\n            }], _templateMap: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }], virtualNodeHeight: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onNodeContextMenuSelect: [{\n                type: Output\n            }], onNodeDrop: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], onScroll: [{\n                type: Output\n            }], onScrollIndexChange: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], filterViewChild: [{\n                type: ViewChild,\n                args: ['filter']\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller']\n            }], wrapperViewChild: [{\n                type: ViewChild,\n                args: ['wrapper']\n            }] } });\nclass TreeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: TreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.5\", ngImport: i0, type: TreeModule, declarations: [Tree, UITreeNode], imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon, PlusIcon], exports: [Tree, SharedModule, ScrollerModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: TreeModule, imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon, PlusIcon, SharedModule, ScrollerModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: TreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon, PlusIcon],\n                    exports: [Tree, SharedModule, ScrollerModule],\n                    declarations: [Tree, UITreeNode]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tree, TreeModule, UITreeNode };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,iBAAiB;AACrC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,KAAK,EAAEC,YAAY,EAAEC,uBAAuB,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,eAAe,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AACtL,OAAO,KAAKC,EAAE,MAAM,aAAa;AACjC,SAASC,eAAe,EAAEC,aAAa,EAAEC,YAAY,QAAQ,aAAa;AAC1E,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,KAAKC,EAAE,MAAM,gBAAgB;AACpC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,KAAKC,EAAE,MAAM,kBAAkB;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,WAAW,QAAQ,uBAAuB;AAAC,MAAAC,GAAA,GAAAC,EAAA;EAAA,+BAAAA;AAAA;AAAA,MAAAC,GAAA,GAAAA,CAAAD,EAAA,EAAAE,EAAA,oBAAAF,EAAA,EAAAE,EAAA;AAAA,MAAAC,GAAA,GAAAH,EAAA;EAAAI,MAAA,EAAAJ;AAAA;AAAA,MAAAK,GAAA,GAAAA,CAAAL,EAAA,EAAAE,EAAA,EAAAI,EAAA;EAAA,yBAAAN,EAAA;EAAA,uBAAAE,EAAA;EAAA,eAAAI;AAAA;AAAA,MAAAC,GAAA,GAAAP,EAAA;EAAAQ,SAAA,EAAAR;AAAA;AAAA,MAAAS,GAAA,GAAAT,EAAA;EAAA,uBAAAA;AAAA;AAAA,MAAAU,GAAA,GAAAA,CAAAV,EAAA,EAAAE,EAAA;EAAA,eAAAF,EAAA;EAAA,mBAAAE;AAAA;AAAA,MAAAS,GAAA,GAAAA,CAAAX,EAAA,EAAAE,EAAA;EAAAM,SAAA,EAAAR,EAAA;EAAAY,eAAA,EAAAV;AAAA;AAAA,MAAAW,GAAA,GAAAb,EAAA;EAAA,wBAAAA;AAAA;AAAA,MAAAc,GAAA,GAAAA,CAAAd,EAAA,EAAAE,EAAA;EAAA,yBAAAF,EAAA;EAAA,eAAAE;AAAA;AAAA,MAAAa,IAAA,GAAAf,EAAA;EAAA,6BAAAA;AAAA;AAAA,SAAAgB,uCAAAC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAAE,GAAA,GAsayClD,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,WAWnF,CAAC;IAXgFpD,EAAE,CAAAqD,UAAA,kBAAAC,0DAAAC,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAOvEF,MAAA,CAAAG,WAAA,CAAAL,MAAA,GAAqB,CAAC,CAAC;IAAA,EAAC,sBAAAM,8DAAAN,MAAA;MAP6CvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAQnEF,MAAA,CAAAK,mBAAA,CAAAP,MAA0B,CAAC;IAAA,EAAC,uBAAAQ,+DAAAR,MAAA;MARqCvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CASlEF,MAAA,CAAAO,oBAAA,CAAAT,MAAA,GAA8B,CAAC,CAAC;IAAA,EAAC,uBAAAU,+DAAAV,MAAA;MAT+BvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAUlEF,MAAA,CAAAS,oBAAA,CAAAX,MAA2B,CAAC;IAAA,EAAC;IAVmCvD,EAAE,CAAAmE,YAAA,CAW9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAX2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAAvC,GAAA,EAAA2B,MAAA,CAAAa,aAAA,CAMpB,CAAC;EAAA;AAAA;AAAA,SAAAC,yEAAAvB,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IANiBhD,EAAE,CAAAwE,SAAA,0BA6CY,CAAC;EAAA;EAAA,IAAAxB,EAAA;IA7CfhD,EAAE,CAAAoE,UAAA,oCA6CS,CAAC;EAAA;AAAA;AAAA,SAAAK,wEAAAzB,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7CZhD,EAAE,CAAAwE,SAAA,yBA8CU,CAAC;EAAA;EAAA,IAAAxB,EAAA;IA9CbhD,EAAE,CAAAoE,UAAA,oCA8CO,CAAC;EAAA;AAAA;AAAA,SAAAM,sDAAA1B,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA9CVhD,EAAE,CAAA2E,uBAAA,EA4CxB,CAAC;IA5CqB3E,EAAE,CAAA4E,UAAA,IAAAL,wEAAA,8BA6CY,CAAC,IAAAE,uEAAA,6BACH,CAAC;IA9CbzE,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA6C7B,CAAC;IA7C0B9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAsB,IAAA,CAAAC,QA6C7B,CAAC;IA7C0BhF,EAAE,CAAA8E,SAAA,CA8C/B,CAAC;IA9C4B9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAAC,QA8C/B,CAAC;EAAA;AAAA;AAAA,SAAAC,8DAAAjC,EAAA,EAAAC,GAAA;AAAA,SAAAiC,gDAAAlC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA9C4BhD,EAAE,CAAA4E,UAAA,IAAAK,6DAAA,qBAiD6B,CAAC;EAAA;AAAA;AAAA,SAAAE,8CAAAnC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjDhChD,EAAE,CAAAoD,cAAA,cAgDL,CAAC;IAhDEpD,EAAE,CAAA4E,UAAA,IAAAM,+CAAA,gBAiD6B,CAAC;IAjDhClF,EAAE,CAAAmE,YAAA,CAkDjE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAlD8DzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAiDV,CAAC;IAjDO9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBAiDV,CAAC,4BAjDOrF,EAAE,CAAAqE,eAAA,IAAA/B,GAAA,EAAAmB,MAAA,CAAAsB,IAAA,CAAAC,QAAA,CAiD2B,CAAC;EAAA;AAAA;AAAA,SAAAM,wEAAAtC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjD9BhD,EAAE,CAAAwE,SAAA,mBAuD4B,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAvD/BhD,EAAE,CAAAoE,UAAA,gCAuDyB,CAAC;EAAA;AAAA;AAAA,SAAAmB,wEAAAvC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAvD5BhD,EAAE,CAAAwE,SAAA,mBAwDW,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAxDdhD,EAAE,CAAAoE,UAAA,gCAwDQ,CAAC;EAAA;AAAA;AAAA,SAAAoB,4DAAAxC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxDXhD,EAAE,CAAA2E,uBAAA,EAsDnB,CAAC;IAtDgB3E,EAAE,CAAA4E,UAAA,IAAAU,uEAAA,uBAuD4B,CAAC,IAAAC,uEAAA,uBAClB,CAAC;IAxDdvF,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAuDT,CAAC;IAvDM9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAsB,IAAA,CAAApC,eAAA,IAAAc,MAAA,CAAAgC,UAAA,EAuDT,CAAC;IAvDMzF,EAAE,CAAA8E,SAAA,CAwD1B,CAAC;IAxDuB9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAApC,eAwD1B,CAAC;EAAA;AAAA;AAAA,SAAA+C,6DAAA1C,EAAA,EAAAC,GAAA;AAAA,SAAA0C,+CAAA3C,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxDuBhD,EAAE,CAAA4E,UAAA,IAAAc,4DAAA,qBA0DoE,CAAC;EAAA;AAAA;AAAA,SAAAE,6CAAA5C,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA1DvEhD,EAAE,CAAAoD,cAAA,aAoDqF,CAAC,aAC7B,CAAC;IArD5DpD,EAAE,CAAA4E,UAAA,IAAAY,2DAAA,yBAsDnB,CAAC,IAAAG,8CAAA,gBAIsF,CAAC;IA1DvE3F,EAAE,CAAAmE,YAAA,CA2DlE,CAAC,CACL,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA5DmEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAA7B,GAAA,EAAAiB,MAAA,CAAAsB,IAAA,CAAAc,UAAA,WAoDwB,CAAC;IApD3B7F,EAAE,CAAA8E,SAAA,CAqDwC,CAAC;IArD3C9E,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAA8F,eAAA,IAAArD,GAAA,EAAAgB,MAAA,CAAAgC,UAAA,IAAAhC,MAAA,CAAAsB,IAAA,CAAApC,eAAA,CAqDwC,CAAC;IArD3C3C,EAAE,CAAA8E,SAAA,CAsDrB,CAAC;IAtDkB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAW,oBAsDrB,CAAC;IAtDkB/F,EAAE,CAAA8E,SAAA,CA0DT,CAAC;IA1DM9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA2B,IAAA,CAAAW,oBA0DT,CAAC,4BA1DM/F,EAAE,CAAA8F,eAAA,KAAApD,GAAA,EAAAe,MAAA,CAAAgC,UAAA,IAAAhC,MAAA,CAAAsB,IAAA,CAAApC,eAAA,CA0DkE,CAAC;EAAA;AAAA;AAAA,SAAAqD,8CAAAhD,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA1DrEhD,EAAE,CAAAwE,SAAA,UA6DkB,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GA7DrBzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,CAAAxC,MAAA,CAAAyC,OAAA,EA6DnD,CAAC;EAAA;AAAA;AAAA,SAAAC,8CAAAnD,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7DgDhD,EAAE,CAAAoD,cAAA,UA+D3B,CAAC;IA/DwBpD,EAAE,CAAAoG,MAAA,EA+DX,CAAC;IA/DQpG,EAAE,CAAAmE,YAAA,CA+DJ,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA/DCzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA+DX,CAAC;IA/DQ9E,EAAE,CAAAqG,iBAAA,CAAA5C,MAAA,CAAAsB,IAAA,CAAAuB,KA+DX,CAAC;EAAA;AAAA;AAAA,SAAAC,6DAAAvD,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA/DQhD,EAAE,CAAAwG,kBAAA,EAiEyC,CAAC;EAAA;AAAA;AAAA,SAAAC,8CAAAzD,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjE5ChD,EAAE,CAAAoD,cAAA,UAgE5B,CAAC;IAhEyBpD,EAAE,CAAA4E,UAAA,IAAA2B,4DAAA,0BAiE0B,CAAC;IAjE7BvG,EAAE,CAAAmE,YAAA,CAkEjE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAlE8DzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAiEJ,CAAC;IAjEC9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CAiEJ,CAAC,4BAjEC/E,EAAE,CAAAqE,eAAA,IAAA/B,GAAA,EAAAmB,MAAA,CAAAsB,IAAA,CAiEwB,CAAC;EAAA;AAAA;AAAA,SAAA4B,0DAAA3D,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjE3BhD,EAAE,CAAAwE,SAAA,oBA+E9D,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAA4D,YAAA,GAAA3D,GAAA,CAAAV,SAAA;IAAA,MAAAsE,aAAA,GAAA5D,GAAA,CAAA6D,KAAA;IAAA,MAAAC,YAAA,GAAA9D,GAAA,CAAA+D,IAAA;IAAA,MAAAC,QAAA,GAAAhE,GAAA,CAAAiE,KAAA;IAAA,MAAAzD,MAAA,GA/E2DzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,SAAAwC,YAwEtD,CAAC,eAAAnD,MAAA,CAAAsB,IACA,CAAC,eAAA8B,aACK,CAAC,cAAAE,YACH,CAAC,UAAAE,QACT,CAAC,aAAAxD,MAAA,CAAA0D,QACK,CAAC,UAAA1D,MAAA,CAAA2D,KAAA,IACH,CAAC;EAAA;AAAA;AAAA,SAAAC,6CAAArE,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA9EkDhD,EAAE,CAAAoD,cAAA,YAqEqG,CAAC;IArExGpD,EAAE,CAAA4E,UAAA,IAAA+B,yDAAA,wBA+E3E,CAAC;IA/EwE3G,EAAE,CAAAmE,YAAA,CAgF3E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAhFwEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAsH,WAAA,YAAA7D,MAAA,CAAAsB,IAAA,CAAAC,QAAA,mBAqEuF,CAAC;IArE1FhF,EAAE,CAAA8E,SAAA,CAuEhC,CAAC;IAvE6B9E,EAAE,CAAAoE,UAAA,YAAAX,MAAA,CAAAsB,IAAA,CAAAwC,QAuEhC,CAAC,iBAAA9D,MAAA,CAAA2B,IAAA,CAAAoC,OAAqF,CAAC;EAAA;AAAA;AAAA,SAAAC,uCAAAzE,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAA0E,GAAA,GAvEzD1H,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,WA2BnF,CAAC;IA3BgFpD,EAAE,CAAAqD,UAAA,qBAAAsE,6DAAApE,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA0BpEF,MAAA,CAAAmE,SAAA,CAAArE,MAAgB,CAAC;IAAA,EAAC;IA1BgDvD,EAAE,CAAAoD,cAAA,YA0C/E,CAAC;IA1C4EpD,EAAE,CAAAqD,UAAA,mBAAAwE,4DAAAtE,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA+BlEF,MAAA,CAAAqE,WAAA,CAAAvE,MAAkB,CAAC;IAAA,EAAC,yBAAAwE,kEAAAxE,MAAA;MA/B4CvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAgC5DF,MAAA,CAAAuE,gBAAA,CAAAzE,MAAuB,CAAC;IAAA,EAAC,sBAAA0E,+DAAA;MAhCiCjI,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAiC/DF,MAAA,CAAAyE,cAAA,CAAe,CAAC;IAAA,EAAC,kBAAAC,2DAAA5E,MAAA;MAjC4CvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAkCnEF,MAAA,CAAA2E,UAAA,CAAA7E,MAAiB,CAAC;IAAA,EAAC,sBAAA8E,+DAAA9E,MAAA;MAlC8CvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAmC/DF,MAAA,CAAA6E,kBAAA,CAAA/E,MAAyB,CAAC;IAAA,EAAC,uBAAAgF,gEAAAhF,MAAA;MAnCkCvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAoC9DF,MAAA,CAAA+E,mBAAA,CAAAjF,MAA0B,CAAC;IAAA,EAAC,uBAAAkF,gEAAAlF,MAAA;MApCgCvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAqC9DF,MAAA,CAAAiF,mBAAA,CAAAnF,MAA0B,CAAC;IAAA,EAAC,uBAAAoF,gEAAApF,MAAA;MArCgCvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAuC9DF,MAAA,CAAAmF,WAAA,CAAArF,MAAkB,CAAC;IAAA,EAAC,qBAAAsF,8DAAAtF,MAAA;MAvCwCvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAwChEF,MAAA,CAAAqF,UAAA,CAAAvF,MAAiB,CAAC;IAAA,EAAC;IAxC2CvD,EAAE,CAAAoD,cAAA,eA2C6E,CAAC;IA3ChFpD,EAAE,CAAAqD,UAAA,mBAAA0F,+DAAAxF,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA2CqBF,MAAA,CAAAuF,MAAA,CAAAzF,MAAa,CAAC;IAAA,EAAC;IA3CtCvD,EAAE,CAAA4E,UAAA,IAAAF,qDAAA,yBA4CxB,CAAC,IAAAS,6CAAA,iBAIkB,CAAC;IAhDEnF,EAAE,CAAAmE,YAAA,CAmDnE,CAAC;IAnDgEnE,EAAE,CAAA4E,UAAA,IAAAgB,4CAAA,kBAoDqF,CAAC,IAAAI,6CAAA,iBAS3E,CAAC;IA7DdhG,EAAE,CAAAoD,cAAA,cA8D7C,CAAC;IA9D0CpD,EAAE,CAAA4E,UAAA,IAAAuB,6CAAA,iBA+D3B,CAAC,IAAAM,6CAAA,iBACF,CAAC;IAhEyBzG,EAAE,CAAAmE,YAAA,CAmErE,CAAC,CACN,CAAC;IApEuEnE,EAAE,CAAA4E,UAAA,KAAAyC,4CAAA,gBAqEqG,CAAC;IArExGrH,EAAE,CAAAmE,YAAA,CAiF/E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAjF4EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiJ,UAAA,CAAAxF,MAAA,CAAAsB,IAAA,CAAAmE,KAgB5D,CAAC;IAhByDlJ,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAA8F,eAAA,KAAA9D,GAAA,EAAAyB,MAAA,CAAAsB,IAAA,CAAAoE,UAAA,QAAA1F,MAAA,CAAA2F,MAAA,4BAcI,CAAC,YAdPpJ,EAAE,CAAAqE,eAAA,KAAAnC,GAAA,EAAAuB,MAAA,CAAA0D,QAAA,QAezC,CAAC;IAfsCnH,EAAE,CAAAqJ,WAAA,eAAA5F,MAAA,CAAAsB,IAAA,CAAAuB,KAAA,kBAAA7C,MAAA,CAAA6F,WAAA,kBAAA7F,MAAA,CAAAsB,IAAA,CAAAwC,QAAA,GAAA9D,MAAA,CAAAsB,IAAA,CAAAwC,QAAA,CAAAgC,MAAA,uBAAA9F,MAAA,CAAA+F,YAAA,mBAAA/F,MAAA,CAAAsB,IAAA,CAAAC,QAAA,mBAAAvB,MAAA,CAAAyD,KAAA,oBAAAzD,MAAA,CAAA2D,KAAA,cAAA3D,MAAA,CAAAyD,KAAA;IAAFlH,EAAE,CAAA8E,SAAA,CA8B3B,CAAC;IA9BwB9E,EAAE,CAAAsH,WAAA,iBAAA7D,MAAA,CAAA2D,KAAA,GAAA3D,MAAA,CAAAgG,WAAA,QA8B3B,CAAC;IA9BwBzJ,EAAE,CAAAoE,UAAA,cAAAX,MAAA,CAAA2B,IAAA,CAAAsE,cAsC3C,CAAC,YAtCwC1J,EAAE,CAAA2J,eAAA,KAAAvH,GAAA,EAAAqB,MAAA,CAAA2B,IAAA,CAAAwE,aAAA,IAAAnG,MAAA,CAAAsB,IAAA,CAAAc,UAAA,YAAApC,MAAA,CAAAoG,aAAA,EAAApG,MAAA,CAAAgC,UAAA,GAyC+E,CAAC;IAzClFzF,EAAE,CAAA8E,SAAA,CA2CpB,CAAC;IA3CiB9E,EAAE,CAAAqJ,WAAA;IAAFrJ,EAAE,CAAA8E,SAAA,CA4C1B,CAAC;IA5CuB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBA4C1B,CAAC;IA5CuBrF,EAAE,CAAA8E,SAAA,CAgDnC,CAAC;IAhDgC9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBAgDnC,CAAC;IAhDgCrF,EAAE,CAAA8E,SAAA,CAoDgE,CAAC;IApDnE9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAwE,aAAA,cAoDgE,CAAC;IApDnE5J,EAAE,CAAA8E,SAAA,CA6DS,CAAC;IA7DZ9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAA+E,IAAA,IAAArG,MAAA,CAAAsB,IAAA,CAAAgF,YAAA,IAAAtG,MAAA,CAAAsB,IAAA,CAAAiF,aA6DS,CAAC;IA7DZhK,EAAE,CAAA8E,SAAA,EA+D7B,CAAC;IA/D0B9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CA+D7B,CAAC;IA/D0B/E,EAAE,CAAA8E,SAAA,CAgE9B,CAAC;IAhE2B9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CAgE9B,CAAC;IAhE2B/E,EAAE,CAAA8E,SAAA,CAqEmC,CAAC;IArEtC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAA6E,aAAA,IAAAxG,MAAA,CAAAsB,IAAA,CAAAwC,QAAA,IAAA9D,MAAA,CAAAsB,IAAA,CAAAC,QAqEmC,CAAC;EAAA;AAAA;AAAA,SAAAkF,uCAAAlH,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAAmH,GAAA,GArEtCnK,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,WA0FnF,CAAC;IA1FgFpD,EAAE,CAAAqD,UAAA,kBAAA+G,0DAAA7G,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAA2G,GAAA;MAAA,MAAA1G,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAsFvEF,MAAA,CAAAG,WAAA,CAAAL,MAAA,EAAoB,CAAC,CAAC;IAAA,EAAC,sBAAA8G,8DAAA9G,MAAA;MAtF8CvD,EAAE,CAAAwD,aAAA,CAAA2G,GAAA;MAAA,MAAA1G,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAuFnEF,MAAA,CAAAK,mBAAA,CAAAP,MAA0B,CAAC;IAAA,EAAC,uBAAA+G,+DAAA/G,MAAA;MAvFqCvD,EAAE,CAAAwD,aAAA,CAAA2G,GAAA;MAAA,MAAA1G,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAwFlEF,MAAA,CAAAO,oBAAA,CAAAT,MAAA,EAA6B,CAAC,CAAC;IAAA,EAAC,uBAAAgH,+DAAAhH,MAAA;MAxFgCvD,EAAE,CAAAwD,aAAA,CAAA2G,GAAA;MAAA,MAAA1G,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAyFlEF,MAAA,CAAAS,oBAAA,CAAAX,MAA2B,CAAC;IAAA,EAAC;IAzFmCvD,EAAE,CAAAmE,YAAA,CA0F9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA1F2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAAvC,GAAA,EAAA2B,MAAA,CAAA+G,aAAA,CAqFpB,CAAC;EAAA;AAAA;AAAA,SAAAC,+CAAAzH,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IArFiBhD,EAAE,CAAAoD,cAAA,YA8FzB,CAAC,eACF,CAAC,WAChC,CAAC,QACA,CAAC;IAjGqDpD,EAAE,CAAAwE,SAAA,YAkGU,CAAC;IAlGbxE,EAAE,CAAAmE,YAAA,CAmGvD,CAAC;IAnGoDnE,EAAE,CAAAoD,cAAA,QAoGxD,CAAC;IApGqDpD,EAAE,CAAAwE,SAAA,YAqGS,CAAC;IArGZxE,EAAE,CAAAmE,YAAA,CAsGvD,CAAC,CACF,CAAC,CACL,CAAC,CACR,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAzGgEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,EAkGI,CAAC;IAlGP9E,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAAvB,IAAA,GAAAW,MAAA,CAAAiH,UAAA,CAkGI,CAAC;IAlGP1K,EAAE,CAAA8E,SAAA,EAqGG,CAAC;IArGN9E,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAAvB,IAAA,GAAAW,MAAA,CAAAkH,SAAA,CAqGG,CAAC;EAAA;AAAA;AAAA,SAAAC,2EAAA5H,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IArGNhD,EAAE,CAAAwE,SAAA,kBAsHoD,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GAtHvDzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,oCAsHa,CAAC,cAAAX,MAAA,CAAA2B,IAAA,CAAAyF,gBAAmC,CAAC;EAAA;AAAA;AAAA,SAAAC,4EAAA9H,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtHpDhD,EAAE,CAAAwE,SAAA,mBAuHoD,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GAvHvDzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,oCAuHa,CAAC,cAAAX,MAAA,CAAA2B,IAAA,CAAAyF,gBAAmC,CAAC;EAAA;AAAA;AAAA,SAAAE,gEAAA/H,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAvHpDhD,EAAE,CAAA2E,uBAAA,EAqHZ,CAAC;IArHS3E,EAAE,CAAA4E,UAAA,IAAAgG,0EAAA,sBAsHoD,CAAC,IAAAE,2EAAA,uBACD,CAAC;IAvHvD9K,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAsHzB,CAAC;IAtHsB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAsB,IAAA,CAAAC,QAsHzB,CAAC;IAtHsBhF,EAAE,CAAA8E,SAAA,CAuHzB,CAAC;IAvHsB9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAAC,QAuHzB,CAAC;EAAA;AAAA;AAAA,SAAAgG,wEAAAhI,EAAA,EAAAC,GAAA;AAAA,SAAAgI,0DAAAjI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAvHsBhD,EAAE,CAAA4E,UAAA,IAAAoG,uEAAA,qBA0HyC,CAAC;EAAA;AAAA;AAAA,SAAAE,wDAAAlI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA1H5ChD,EAAE,CAAAoD,cAAA,cAyHO,CAAC;IAzHVpD,EAAE,CAAA4E,UAAA,IAAAqG,yDAAA,gBA0HyC,CAAC;IA1H5CjL,EAAE,CAAAmE,YAAA,CA2HrD,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA3HkDzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA0HE,CAAC;IA1HL9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBA0HE,CAAC,4BA1HLrF,EAAE,CAAAqE,eAAA,IAAA/B,GAAA,EAAAmB,MAAA,CAAAsB,IAAA,CAAAC,QAAA,CA0HuC,CAAC;EAAA;AAAA;AAAA,SAAAmG,iDAAAnI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAAoI,IAAA,GA1H1CpL,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,cAoHc,CAAC;IApHjBpD,EAAE,CAAAqD,UAAA,mBAAAgI,uEAAA9H,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAA4H,IAAA;MAAA,MAAA3H,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAoHDF,MAAA,CAAAuF,MAAA,CAAAzF,MAAa,CAAC;IAAA,EAAC;IApHhBvD,EAAE,CAAA4E,UAAA,IAAAmG,+DAAA,yBAqHZ,CAAC,IAAAG,uDAAA,iBAIkB,CAAC;IAzHVlL,EAAE,CAAAmE,YAAA,CA4HzD,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA5HsDzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,4BAoHZ,CAAC;IApHSpE,EAAE,CAAA8E,SAAA,CAqHd,CAAC;IArHW9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBAqHd,CAAC;IArHWrF,EAAE,CAAA8E,SAAA,CAyHvB,CAAC;IAzHoB9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAC,mBAyHvB,CAAC;EAAA;AAAA;AAAA,SAAAiG,iDAAAtI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAzHoBhD,EAAE,CAAAwE,SAAA,UA6H8B,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GA7HjCzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,CAAAxC,MAAA,CAAAyC,OAAA,EA6HvC,CAAC;EAAA;AAAA;AAAA,SAAAqF,iDAAAvI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7HoChD,EAAE,CAAAoD,cAAA,UA+Hf,CAAC;IA/HYpD,EAAE,CAAAoG,MAAA,EA+HC,CAAC;IA/HJpG,EAAE,CAAAmE,YAAA,CA+HQ,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA/HXzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA+HC,CAAC;IA/HJ9E,EAAE,CAAAqG,iBAAA,CAAA5C,MAAA,CAAAsB,IAAA,CAAAuB,KA+HC,CAAC;EAAA;AAAA;AAAA,SAAAkF,iEAAAxI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA/HJhD,EAAE,CAAAwG,kBAAA,EAiIqD,CAAC;EAAA;AAAA;AAAA,SAAAiF,kDAAAzI,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjIxDhD,EAAE,CAAAoD,cAAA,UAgIhB,CAAC;IAhIapD,EAAE,CAAA4E,UAAA,IAAA4G,gEAAA,0BAiIsC,CAAC;IAjIzCxL,EAAE,CAAAmE,YAAA,CAkIrD,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAlIkDzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAiIQ,CAAC;IAjIX9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CAiIQ,CAAC,4BAjIX/E,EAAE,CAAAqE,eAAA,IAAA/B,GAAA,EAAAmB,MAAA,CAAAsB,IAAA,CAiIoC,CAAC;EAAA;AAAA;AAAA,SAAA2G,6DAAA1I,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjIvChD,EAAE,CAAAwE,SAAA,oBAwI2I,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAA2I,aAAA,GAAA1I,GAAA,CAAAV,SAAA;IAAA,MAAAqJ,cAAA,GAAA3I,GAAA,CAAA6D,KAAA;IAAA,MAAA+E,aAAA,GAAA5I,GAAA,CAAA+D,IAAA;IAxI9IhH,EAAE,CAAAoE,UAAA,SAAAuH,aAwI2E,CAAC,eAAAC,cAAyB,CAAC,cAAAC,aAAuB,CAAC;EAAA;AAAA;AAAA,SAAAC,gDAAA9I,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxIhIhD,EAAE,CAAAoD,cAAA,YAsIiE,CAAC,aACrG,CAAC;IAvIgCpD,EAAE,CAAA4E,UAAA,IAAA8G,4DAAA,wBAwI8H,CAAC;IAxIjI1L,EAAE,CAAAmE,YAAA,CAyI9D,CAAC,CACN,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA1IgEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAsH,WAAA,YAAA7D,MAAA,CAAAsB,IAAA,CAAAC,QAAA,wBAsIgE,CAAC;IAtInEhF,EAAE,CAAA8E,SAAA,EAwIZ,CAAC;IAxIS9E,EAAE,CAAAoE,UAAA,YAAAX,MAAA,CAAAsB,IAAA,CAAAwC,QAwIZ,CAAC,iBAAA9D,MAAA,CAAA2B,IAAA,CAAAoC,OAAkE,CAAC;EAAA;AAAA;AAAA,SAAAuE,0CAAA/I,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAAgJ,GAAA,GAxI1DhM,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,WA2F3B,CAAC,WAC/C,CAAC,QACA,CAAC;IA7FqEpD,EAAE,CAAA4E,UAAA,IAAA6F,8CAAA,gBA8FzB,CAAC;IA9FsBzK,EAAE,CAAAoD,cAAA,YA0GM,CAAC,aAS1E,CAAC;IAnHgEpD,EAAE,CAAAqD,UAAA,mBAAA4I,+DAAA1I,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAwI,GAAA;MAAA,MAAAvI,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA+GtDF,MAAA,CAAAqE,WAAA,CAAAvE,MAAkB,CAAC;IAAA,EAAC,yBAAA2I,qEAAA3I,MAAA;MA/GgCvD,EAAE,CAAAwD,aAAA,CAAAwI,GAAA;MAAA,MAAAvI,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAgHhDF,MAAA,CAAAuE,gBAAA,CAAAzE,MAAuB,CAAC;IAAA,EAAC,sBAAA4I,kEAAA;MAhHqBnM,EAAE,CAAAwD,aAAA,CAAAwI,GAAA;MAAA,MAAAvI,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAiHnDF,MAAA,CAAAyE,cAAA,CAAe,CAAC;IAAA,EAAC,qBAAAkE,iEAAA7I,MAAA;MAjHgCvD,EAAE,CAAAwD,aAAA,CAAAwI,GAAA;MAAA,MAAAvI,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAkHpDF,MAAA,CAAA4I,aAAA,CAAA9I,MAAoB,CAAC;IAAA,EAAC;IAlH4BvD,EAAE,CAAA4E,UAAA,IAAAuG,gDAAA,kBAoHc,CAAC,IAAAG,gDAAA,iBASQ,CAAC;IA7H1BtL,EAAE,CAAAoD,cAAA,cA8HjC,CAAC;IA9H8BpD,EAAE,CAAA4E,UAAA,IAAA2G,gDAAA,iBA+Hf,CAAC,KAAAE,iDAAA,iBACF,CAAC;IAhIazL,EAAE,CAAAmE,YAAA,CAmIzD,CAAC,CACN,CAAC,CACN,CAAC;IArIgEnE,EAAE,CAAA4E,UAAA,KAAAkH,+CAAA,gBAsIiE,CAAC;IAtIpE9L,EAAE,CAAAmE,YAAA,CA2IvE,CAAC,CACF,CAAC,CACL,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA7IyEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,CAAAxC,MAAA,CAAAsB,IAAA,CAAAoE,UA2F5B,CAAC;IA3FyBnJ,EAAE,CAAA8E,SAAA,EA8F3B,CAAC;IA9FwB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA6I,IA8F3B,CAAC;IA9FwBtM,EAAE,CAAA8E,SAAA,CA0GK,CAAC;IA1GR9E,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,KAAAzB,GAAA,GAAAa,MAAA,CAAAsB,IAAA,CAAAC,QAAA,CA0GK,CAAC;IA1GRhF,EAAE,CAAA8E,SAAA,CA8GwB,CAAC;IA9G3B9E,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAA8F,eAAA,KAAAjD,GAAA,EAAAY,MAAA,CAAA2B,IAAA,CAAAwE,aAAA,EAAAnG,MAAA,CAAAgC,UAAA,GA8GwB,CAAC;IA9G3BzF,EAAE,CAAA8E,SAAA,CAoH1C,CAAC;IApHuC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2F,MAAA,EAoH1C,CAAC;IApHuCpJ,EAAE,CAAA8E,SAAA,CA6HqB,CAAC;IA7HxB9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAA+E,IAAA,IAAArG,MAAA,CAAAsB,IAAA,CAAAgF,YAAA,IAAAtG,MAAA,CAAAsB,IAAA,CAAAiF,aA6HqB,CAAC;IA7HxBhK,EAAE,CAAA8E,SAAA,EA+HjB,CAAC;IA/Hc9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CA+HjB,CAAC;IA/Hc/E,EAAE,CAAA8E,SAAA,CAgIlB,CAAC;IAhIe9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAsB,kBAAA,CAAAjD,MAAA,CAAAsB,IAAA,CAgIlB,CAAC;IAhIe/E,EAAE,CAAA8E,SAAA,CAsIO,CAAC;IAtIV9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAsB,IAAA,CAAAwC,QAAA,IAAA9D,MAAA,CAAAsB,IAAA,CAAAC,QAsIO,CAAC;EAAA;AAAA;AAAA,SAAAuH,kCAAAvJ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtIVhD,EAAE,CAAA4E,UAAA,IAAA7B,sCAAA,eAWnF,CAAC,IAAA0E,sCAAA,iBAgBD,CAAC,IAAAyC,sCAAA,eA+DD,CAAC,IAAA6B,yCAAA,oBACuD,CAAC;EAAA;EAAA,IAAA/I,EAAA;IAAA,MAAAS,MAAA,GA3FwBzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAoH,cAItD,CAAC;IAJmDxM,EAAE,CAAA8E,SAAA,CAazD,CAAC;IAbsD9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA2B,IAAA,CAAAqH,UAazD,CAAC;IAbsDzM,EAAE,CAAA8E,SAAA,CAmFzC,CAAC;IAnFsC9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAoH,cAAA,IAAA/I,MAAA,CAAAkH,SAmFzC,CAAC;IAnFsC3K,EAAE,CAAA8E,SAAA,CA2FvD,CAAC;IA3FoD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA2B,IAAA,CAAAqH,UA2FvD,CAAC;EAAA;AAAA;AAAA,MAAAC,IAAA;AAAA,MAAAC,IAAA;AAAA,MAAAC,IAAA;AAAA,MAAAC,IAAA,GAAAA,CAAA9K,EAAA,EAAAE,EAAA,EAAAI,EAAA,EAAAyK,EAAA;EAAA;EAAA,qBAAA/K,EAAA;EAAA,uBAAAE,EAAA;EAAA,kBAAAI,EAAA;EAAA,0BAAAyK;AAAA;AAAA,MAAAC,IAAA,GAAAhL,EAAA;EAAAiL,OAAA,EAAAjL;AAAA;AAAA,MAAAkL,IAAA,GAAAlL,EAAA;EAAA;EAAA,qBAAAA;AAAA;AAAA,SAAAmL,8BAAAlK,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA3FoDhD,EAAE,CAAAwE,SAAA,OAopCE,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GAppCLzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,kCAAAxC,MAAA,CAAA0J,WAopCH,CAAC;EAAA;AAAA;AAAA,SAAAC,uDAAApK,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAppCAhD,EAAE,CAAAwE,SAAA,qBAspCmB,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAtpCtBhD,EAAE,CAAAoE,UAAA,aAspCrB,CAAC,oCAAoC,CAAC;EAAA;AAAA;AAAA,SAAAiJ,gEAAArK,EAAA,EAAAC,GAAA;AAAA,SAAAqK,kDAAAtK,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtpCnBhD,EAAE,CAAA4E,UAAA,IAAAyI,+DAAA,qBAwpCnB,CAAC;EAAA;AAAA;AAAA,SAAAE,gDAAAvK,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxpCgBhD,EAAE,CAAAoD,cAAA,cAupCd,CAAC;IAvpCWpD,EAAE,CAAA4E,UAAA,IAAA0I,iDAAA,eAwpCnB,CAAC;IAxpCgBtN,EAAE,CAAAmE,YAAA,CAypCrE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAzpCkEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAwpCrB,CAAC;IAxpCkB9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA+J,mBAwpCrB,CAAC;EAAA;AAAA;AAAA,SAAAC,yCAAAzK,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxpCkBhD,EAAE,CAAA2E,uBAAA,EAqpC7C,CAAC;IArpC0C3E,EAAE,CAAA4E,UAAA,IAAAwI,sDAAA,yBAspCmB,CAAC,IAAAG,+CAAA,kBAClC,CAAC;IAvpCWvN,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAspCpC,CAAC;IAtpCiC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA+J,mBAspCpC,CAAC;IAtpCiCxN,EAAE,CAAA8E,SAAA,CAupC5C,CAAC;IAvpCyC9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA+J,mBAupC5C,CAAC;EAAA;AAAA;AAAA,SAAAE,0BAAA1K,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAvpCyChD,EAAE,CAAAoD,cAAA,aAmpCZ,CAAC;IAnpCSpD,EAAE,CAAA4E,UAAA,IAAAsI,6BAAA,eAopCF,CAAC,IAAAO,wCAAA,0BAC5C,CAAC;IArpC0CzN,EAAE,CAAAmE,YAAA,CA2pC9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA3pC2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAopC3D,CAAC;IAppCwD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA0J,WAopC3D,CAAC;IAppCwDnN,EAAE,CAAA8E,SAAA,CAqpC/C,CAAC;IArpC4C9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA0J,WAqpC/C,CAAC;EAAA;AAAA;AAAA,SAAAQ,mCAAA3K,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IArpC4ChD,EAAE,CAAAwG,kBAAA,EA4pCpB,CAAC;EAAA;AAAA;AAAA,SAAAoH,uCAAA5K,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA5pCiBhD,EAAE,CAAAwE,SAAA,oBA+pCF,CAAC;EAAA;EAAA,IAAAxB,EAAA;IA/pCDhD,EAAE,CAAAoE,UAAA,mCA+pCL,CAAC;EAAA;AAAA;AAAA,SAAAyJ,iDAAA7K,EAAA,EAAAC,GAAA;AAAA,SAAA6K,mCAAA9K,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA/pCEhD,EAAE,CAAA4E,UAAA,IAAAiJ,gDAAA,qBAiqCxB,CAAC;EAAA;AAAA;AAAA,SAAAE,iCAAA/K,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAjqCqBhD,EAAE,CAAAoD,cAAA,cAgqCpB,CAAC;IAhqCiBpD,EAAE,CAAA4E,UAAA,IAAAkJ,kCAAA,eAiqCxB,CAAC;IAjqCqB9N,EAAE,CAAAmE,YAAA,CAkqCzE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAlqCsEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAiqC1B,CAAC;IAjqCuB9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAuK,kBAiqC1B,CAAC;EAAA;AAAA;AAAA,SAAAC,0BAAAjL,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAA0E,GAAA,GAjqCuB1H,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,aA6pChC,CAAC,kBACqK,CAAC;IA9pCzIpD,EAAE,CAAAqD,UAAA,2BAAA6K,yDAAA3K,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,OAAF1H,EAAE,CAAA2D,WAAA,CA8pCqEJ,MAAA,CAAA4K,cAAA,CAAsB,CAAC;IAAA,EAAC,mBAAAC,iDAAA7K,MAAA;MA9pC/FvD,EAAE,CAAAwD,aAAA,CAAAkE,GAAA;MAAA,MAAAjE,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA8pCuGF,MAAA,CAAA4K,OAAA,CAAA9K,MAAA,CAAA+K,MAAA,CAAAC,KAA2B,CAAC;IAAA,EAAC;IA9pCtIvO,EAAE,CAAAmE,YAAA,CA8pCsI,CAAC;IA9pCzInE,EAAE,CAAA4E,UAAA,IAAAgJ,sCAAA,wBA+pCF,CAAC,IAAAG,gCAAA,kBACnB,CAAC;IAhqCiB/N,EAAE,CAAAmE,YAAA,CAmqC9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAnqC2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA8pCkD,CAAC;IA9pCrD9E,EAAE,CAAAqJ,WAAA,gBAAA5F,MAAA,CAAA+K,iBAAA;IAAFxO,EAAE,CAAA8E,SAAA,EA+pC1C,CAAC;IA/pCuC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAuK,kBA+pC1C,CAAC;IA/pCuChO,EAAE,CAAA8E,SAAA,CAgqCjD,CAAC;IAhqC8C9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAuK,kBAgqCjD,CAAC;EAAA;AAAA;AAAA,SAAAS,iEAAAzL,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAhqC8ChD,EAAE,CAAAwE,SAAA,uBAisC1D,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAA0L,UAAA,GAAAzL,GAAA,CAAAV,SAAA;IAAA,MAAAoM,aAAA,GAAA1L,GAAA,CAAA6D,KAAA;IAAA,MAAA8H,YAAA,GAAA3L,GAAA,CAAA+D,IAAA;IAAA,MAAA6H,QAAA,GAAA5L,GAAA,CAAAiE,KAAA;IAAA,MAAA4H,kBAAA,GAjsCuD9O,EAAE,CAAA0D,aAAA,IAAAsJ,OAAA;IAAA,MAAAvJ,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,UAAAsK,UAAA,CAAAtH,KAyrC7C,CAAC,YAAAsH,UACL,CAAC,SAAAA,UAAA,CAAA3J,IACC,CAAC,eAAA4J,aACG,CAAC,cAAAC,YACH,CAAC,UAAAnL,MAAA,CAAAsL,QAAA,CAAAD,kBAAA,EAAAD,QAAA,CACkB,CAAC,aAAAC,kBAAA,CAAA3H,QACN,CAAC,gBAAA1D,MAAA,CAAAgG,WACX,CAAC;EAAA;AAAA;AAAA,SAAAuF,oDAAAhM,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAhsCsChD,EAAE,CAAAoD,cAAA,YAqrCsI,CAAC;IArrCzIpD,EAAE,CAAA4E,UAAA,IAAA6J,gEAAA,wBAisCvE,CAAC;IAjsCoEzO,EAAE,CAAAmE,YAAA,CAksCvE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAiM,MAAA,GAlsCoEjP,EAAE,CAAA0D,aAAA;IAAA,MAAAwL,SAAA,GAAAD,MAAA,CAAA1M,SAAA;IAAA,MAAAuM,kBAAA,GAAAG,MAAA,CAAAjC,OAAA;IAAA,MAAAvJ,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiJ,UAAA,CAAA6F,kBAAA,CAAAK,YAqrCmD,CAAC;IArrCtDnP,EAAE,CAAAoE,UAAA,YAAA0K,kBAAA,CAAAM,iBAqrCY,CAAC;IArrCfpP,EAAE,CAAAqJ,WAAA,eAAA5F,MAAA,CAAA4L,SAAA,qBAAA5L,MAAA,CAAA6L,cAAA;IAAFtP,EAAE,CAAA8E,SAAA,CAwrCtC,CAAC;IAxrCmC9E,EAAE,CAAAoE,UAAA,YAAA8K,SAwrCtC,CAAC,iBAAAzL,MAAA,CAAA+D,OAAgF,CAAC;EAAA;AAAA;AAAA,SAAA+H,+CAAAvM,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxrC9ChD,EAAE,CAAA4E,UAAA,IAAAoK,mDAAA,gBAqrCsI,CAAC;EAAA;EAAA,IAAAhM,EAAA;IAAA,MAAAkM,SAAA,GAAAjM,GAAA,CAAAV,SAAA;IArrCzIvC,EAAE,CAAAoE,UAAA,SAAA8K,SAqrC5D,CAAC;EAAA;AAAA;AAAA,SAAAM,6EAAAxM,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IArrCyDhD,EAAE,CAAAwG,kBAAA,EAssC+B,CAAC;EAAA;AAAA;AAAA,SAAAiJ,8DAAAzM,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtsClChD,EAAE,CAAA4E,UAAA,IAAA4K,4EAAA,0BAssCgB,CAAC;EAAA;EAAA,IAAAxM,EAAA;IAAA,MAAA0M,mBAAA,GAAAzM,GAAA,CAAA+J,OAAA;IAAA,MAAAvJ,MAAA,GAtsCnBzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAkM,cAssCvB,CAAC,4BAtsCoB3P,EAAE,CAAAqE,eAAA,IAAA0I,IAAA,EAAA2C,mBAAA,CAssCc,CAAC;EAAA;AAAA;AAAA,SAAAE,gDAAA5M,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtsCjBhD,EAAE,CAAA2E,uBAAA,EAosC3C,CAAC;IApsCwC3E,EAAE,CAAA4E,UAAA,IAAA6K,6DAAA,yBAqsCd,CAAC;IArsCWzP,EAAE,CAAA6E,qBAAA;EAAA;AAAA;AAAA,SAAAgL,iCAAA7M,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAA8M,GAAA,GAAF9P,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,uBAmrCnF,CAAC;IAnrCgFpD,EAAE,CAAAqD,UAAA,sBAAA0M,gEAAAxM,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAsM,GAAA;MAAA,MAAArM,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA+qCnEF,MAAA,CAAAuM,QAAA,CAAAC,IAAA,CAAA1M,MAAoB,CAAC;IAAA,EAAC,iCAAA2M,2EAAA3M,MAAA;MA/qC2CvD,EAAE,CAAAwD,aAAA,CAAAsM,GAAA;MAAA,MAAArM,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAgrCxDF,MAAA,CAAA0M,mBAAA,CAAAF,IAAA,CAAA1M,MAA+B,CAAC;IAAA,EAAC,wBAAA6M,kEAAA7M,MAAA;MAhrCqBvD,EAAE,CAAAwD,aAAA,CAAAsM,GAAA;MAAA,MAAArM,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAirCjEF,MAAA,CAAA4M,UAAA,CAAAJ,IAAA,CAAA1M,MAAsB,CAAC;IAAA,EAAC;IAjrCuCvD,EAAE,CAAA4E,UAAA,IAAA2K,8CAAA,yBAorCP,CAAC,IAAAK,+CAAA,0BAgBrC,CAAC;IApsCwC5P,EAAE,CAAAmE,YAAA,CAysCvE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAzsCoEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiJ,UAAA,CAAFjJ,EAAE,CAAAqE,eAAA,IAAAnC,GAAA,EAAAuB,MAAA,CAAA6M,YAAA,cAAA7M,MAAA,CAAA6M,YAAA,GAAAC,SAAA,CA2qCR,CAAC;IA3qCKvQ,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA+M,eAwqCvD,CAAC,eACX,CAAC,iBAAA/M,MAAA,CAAA6M,YAAA,cAAAC,SAAA,SAG6C,CAAC,aAAA9M,MAAA,CAAAgN,qBAAA,IAAAhN,MAAA,CAAAiN,kBACN,CAAC,SAAAjN,MAAA,CAAAkN,IAC5C,CAAC,YAAAlN,MAAA,CAAAmN,oBAIkB,CAAC;IAlrC6C5Q,EAAE,CAAA8E,SAAA,EAosC7C,CAAC;IApsC0C9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAkM,cAosC7C,CAAC;EAAA;AAAA;AAAA,SAAAkB,qDAAA7N,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IApsC0ChD,EAAE,CAAAwE,SAAA,oBAotC1D,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAA8N,QAAA,GAAA7N,GAAA,CAAAV,SAAA;IAAA,MAAAwO,cAAA,GAAA9N,GAAA,CAAA6D,KAAA;IAAA,MAAAkK,aAAA,GAAA/N,GAAA,CAAA+D,IAAA;IAAA,MAAAiK,SAAA,GAAAhO,GAAA,CAAAiE,KAAA;IAptCuDlH,EAAE,CAAAoE,UAAA,SAAA0M,QA+sCvD,CAAC,eAAAC,cACW,CAAC,cAAAC,aACH,CAAC,UAAAC,SACT,CAAC,WACL,CAAC;EAAA;AAAA;AAAA,SAAAC,wCAAAlO,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAntCsDhD,EAAE,CAAAoD,cAAA,YA4sCyD,CAAC;IA5sC5DpD,EAAE,CAAA4E,UAAA,IAAAiM,oDAAA,wBAotCvE,CAAC;IAptCoE7Q,EAAE,CAAAmE,YAAA,CAqtCvE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GArtCoEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAqJ,WAAA,eAAA5F,MAAA,CAAA4L,SAAA,qBAAA5L,MAAA,CAAA6L,cAAA;IAAFtP,EAAE,CAAA8E,SAAA,CA8sCjC,CAAC;IA9sC8B9E,EAAE,CAAAoE,UAAA,YAAAX,MAAA,CAAA0N,WAAA,EA8sCjC,CAAC,iBAAA1N,MAAA,CAAA+D,OAAgF,CAAC;EAAA;AAAA;AAAA,SAAA4J,mCAAApO,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA9sCnDhD,EAAE,CAAA2E,uBAAA,EA0sC/C,CAAC;IA1sC4C3E,EAAE,CAAAoD,cAAA,gBA2sCT,CAAC;IA3sCMpD,EAAE,CAAA4E,UAAA,IAAAsM,uCAAA,gBA4sCyD,CAAC;IA5sC5DlR,EAAE,CAAAmE,YAAA,CAstC1E,CAAC;IAttCuEnE,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA2sCV,CAAC;IA3sCO9E,EAAE,CAAAsH,WAAA,eAAA7D,MAAA,CAAA6M,YA2sCV,CAAC;IA3sCOtQ,EAAE,CAAA8E,SAAA,EA4sC3B,CAAC;IA5sCwB9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA0N,WAAA,EA4sC3B,CAAC;EAAA;AAAA;AAAA,SAAAE,yCAAArO,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA5sCwBhD,EAAE,CAAA2E,uBAAA,EA0tClB,CAAC;IA1tCe3E,EAAE,CAAAoG,MAAA,EA4tChF,CAAC;IA5tC6EpG,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA4tChF,CAAC;IA5tC6E9E,EAAE,CAAAsR,kBAAA,MAAA7N,MAAA,CAAA8N,iBAAA,KA4tChF,CAAC;EAAA;AAAA;AAAA,SAAAC,yCAAAxO,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA5tC6EhD,EAAE,CAAAwG,kBAAA,WA6tCG,CAAC;EAAA;AAAA;AAAA,SAAAiL,0BAAAzO,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7tCNhD,EAAE,CAAAoD,cAAA,aAytCwB,CAAC;IAztC3BpD,EAAE,CAAA4E,UAAA,IAAAyM,wCAAA,0BA0tClB,CAAC,IAAAG,wCAAA,yBAGK,CAAC;IA7tCSxR,EAAE,CAAAmE,YAAA,CA8tC9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA9tC2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA0tCpC,CAAC;IA1tCiC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAiO,oBA0tCpC,CAAC,aAAAjO,MAAA,CAAAkO,WAAe,CAAC;IA1tCiB3R,EAAE,CAAA8E,SAAA,CA6tCd,CAAC;IA7tCW9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAiO,oBA6tCd,CAAC;EAAA;AAAA;AAAA,SAAAE,mCAAA5O,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7tCWhD,EAAE,CAAAwG,kBAAA,EA+tCpB,CAAC;EAAA;AAAA;AAAA,SAAAqL,oBAAA7O,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAAA,MAAAE,GAAA,GA/tCiBlD,EAAE,CAAAmD,gBAAA;IAAFnD,EAAE,CAAAoD,cAAA,YAkpCvF,CAAC;IAlpCoFpD,EAAE,CAAAqD,UAAA,kBAAAyO,wCAAAvO,MAAA;MAAFvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA8oC3EF,MAAA,CAAAsO,MAAA,CAAAxO,MAAa,CAAC;IAAA,EAAC,sBAAAyO,4CAAAzO,MAAA;MA9oC0DvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CA+oCvEF,MAAA,CAAAwO,UAAA,CAAA1O,MAAiB,CAAC;IAAA,EAAC,uBAAA2O,6CAAA;MA/oCkDlS,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAgpCtEF,MAAA,CAAA0O,WAAA,CAAY,CAAC;IAAA,EAAC,uBAAAC,6CAAA7O,MAAA;MAhpCsDvD,EAAE,CAAAwD,aAAA,CAAAN,GAAA;MAAA,MAAAO,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;MAAA,OAAF1D,EAAE,CAAA2D,WAAA,CAipCtEF,MAAA,CAAA4O,WAAA,CAAA9O,MAAkB,CAAC;IAAA,EAAC;IAjpCgDvD,EAAE,CAAA4E,UAAA,IAAA8I,yBAAA,gBAmpCZ,CAAC,IAAAC,kCAAA,yBASxB,CAAC,IAAAM,yBAAA,iBACE,CAAC,IAAA4B,gCAAA,yBAsBpD,CAAC,IAAAuB,kCAAA,0BAuBmC,CAAC,IAAAK,yBAAA,iBAesE,CAAC,IAAAG,kCAAA,yBAM5D,CAAC;IA/tCgC5R,EAAE,CAAAmE,YAAA,CAguClF,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAhuC+EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,CAAAxC,MAAA,CAAA0F,UA4oChE,CAAC;IA5oC6DnJ,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAsS,eAAA,KAAAzF,IAAA,EAAApJ,MAAA,CAAAmG,aAAA,EAAAnG,MAAA,CAAA8O,SAAA,EAAA9O,MAAA,CAAA+O,OAAA,EAAA/O,MAAA,CAAA6M,YAAA,YA0oC0G,CAAC,YAAA7M,MAAA,CAAAyF,KAC9K,CAAC;IA3oCgElJ,EAAE,CAAA8E,SAAA,CAmpCd,CAAC;IAnpCW9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA+O,OAmpCd,CAAC;IAnpCWxS,EAAE,CAAA8E,SAAA,CA4pCrC,CAAC;IA5pCkC9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAgP,cA4pCrC,CAAC;IA5pCkCzS,EAAE,CAAA8E,SAAA,CA6pClE,CAAC;IA7pC+D9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAiP,MA6pClE,CAAC;IA7pC+D1S,EAAE,CAAA8E,SAAA,CAuqC5D,CAAC;IAvqCyD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAAwG,aAuqC5D,CAAC;IAvqCyDjK,EAAE,CAAA8E,SAAA,CA0sCjD,CAAC;IA1sC8C9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAwG,aA0sCjD,CAAC;IA1sC8CjK,EAAE,CAAA8E,SAAA,CAytCsB,CAAC;IAztCzB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA+O,OAAA,KAAA/O,MAAA,CAAA0N,WAAA,cAAA1N,MAAA,CAAA0N,WAAA,GAAA5H,MAAA,OAytCsB,CAAC;IAztCzBvJ,EAAE,CAAA8E,SAAA,CA+tCrC,CAAC;IA/tCkC9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAkP,cA+tCrC,CAAC;EAAA;AAAA;AAAA,SAAAC,mCAAA5P,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA/tCkChD,EAAE,CAAAwG,kBAAA,EAkuCpB,CAAC;EAAA;AAAA;AAAA,SAAAqM,8BAAA7P,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAluCiBhD,EAAE,CAAAwE,SAAA,OAouCE,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAAA,MAAAS,MAAA,GApuCLzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,kCAAAxC,MAAA,CAAA0J,WAouCH,CAAC;EAAA;AAAA;AAAA,SAAA2F,uDAAA9P,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IApuCAhD,EAAE,CAAAwE,SAAA,qBAsuCmB,CAAC;EAAA;EAAA,IAAAxB,EAAA;IAtuCtBhD,EAAE,CAAAoE,UAAA,aAsuCrB,CAAC,oCAAoC,CAAC;EAAA;AAAA;AAAA,SAAA2O,gEAAA/P,EAAA,EAAAC,GAAA;AAAA,SAAA+P,kDAAAhQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAtuCnBhD,EAAE,CAAA4E,UAAA,IAAAmO,+DAAA,qBAwuCnB,CAAC;EAAA;AAAA;AAAA,SAAAE,gDAAAjQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxuCgBhD,EAAE,CAAAoD,cAAA,cAuuCd,CAAC;IAvuCWpD,EAAE,CAAA4E,UAAA,IAAAoO,iDAAA,eAwuCnB,CAAC;IAxuCgBhT,EAAE,CAAAmE,YAAA,CAyuCrE,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAzuCkEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAwuCrB,CAAC;IAxuCkB9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAA+J,mBAwuCrB,CAAC;EAAA;AAAA;AAAA,SAAA0F,yCAAAlQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAxuCkBhD,EAAE,CAAA2E,uBAAA,EAquC7C,CAAC;IAruC0C3E,EAAE,CAAA4E,UAAA,IAAAkO,sDAAA,yBAsuCmB,CAAC,IAAAG,+CAAA,kBAClC,CAAC;IAvuCWjT,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAsuCpC,CAAC;IAtuCiC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA+J,mBAsuCpC,CAAC;IAtuCiCxN,EAAE,CAAA8E,SAAA,CAuuC5C,CAAC;IAvuCyC9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA+J,mBAuuC5C,CAAC;EAAA;AAAA;AAAA,SAAA2F,0BAAAnQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAvuCyChD,EAAE,CAAAoD,cAAA,aAmuCf,CAAC;IAnuCYpD,EAAE,CAAA4E,UAAA,IAAAiO,6BAAA,eAouCF,CAAC,IAAAK,wCAAA,0BAC5C,CAAC;IAruC0ClT,EAAE,CAAAmE,YAAA,CA2uC9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA3uC2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAouC3D,CAAC;IApuCwD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA0J,WAouC3D,CAAC;IApuCwDnN,EAAE,CAAA8E,SAAA,CAquC/C,CAAC;IAruC4C9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA0J,WAquC/C,CAAC;EAAA;AAAA;AAAA,SAAAiG,4BAAApQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAruC4ChD,EAAE,CAAAoD,cAAA,WA4uCnD,CAAC;IA5uCgDpD,EAAE,CAAAwE,SAAA,oBA6uCvB,CAAC;IA7uCoBxE,EAAE,CAAAmE,YAAA,CA8uC5E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GA9uCyEzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CA6uCnD,CAAC;IA7uCgD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA8K,KAAA,GA6uCnD,CAAC,aAAa,CAAC;EAAA;AAAA;AAAA,SAAA8E,yCAAArQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA7uCkChD,EAAE,CAAA2E,uBAAA,EAgvClB,CAAC;IAhvCe3E,EAAE,CAAAoG,MAAA,EAkvChF,CAAC;IAlvC6EpG,EAAE,CAAA6E,qBAAA;EAAA;EAAA,IAAA7B,EAAA;IAAA,MAAAS,MAAA,GAAFzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAkvChF,CAAC;IAlvC6E9E,EAAE,CAAAsR,kBAAA,MAAA7N,MAAA,CAAA8N,iBAAA,KAkvChF,CAAC;EAAA;AAAA;AAAA,SAAA+B,yCAAAtQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAlvC6EhD,EAAE,CAAAwG,kBAAA,WAmvCG,CAAC;EAAA;AAAA;AAAA,SAAA+M,0BAAAvQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAnvCNhD,EAAE,CAAAoD,cAAA,aA+uCwB,CAAC;IA/uC3BpD,EAAE,CAAA4E,UAAA,IAAAyO,wCAAA,0BAgvClB,CAAC,IAAAC,wCAAA,yBAGK,CAAC;IAnvCStT,EAAE,CAAAmE,YAAA,CAovC9E,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GApvC2EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAA8E,SAAA,CAgvCpC,CAAC;IAhvCiC9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAAiO,oBAgvCpC,CAAC,aAAAjO,MAAA,CAAAkO,WAAe,CAAC;IAhvCiB3R,EAAE,CAAA8E,SAAA,CAmvCd,CAAC;IAnvCW9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAiO,oBAmvCd,CAAC;EAAA;AAAA;AAAA,SAAA8B,mCAAAxQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAnvCWhD,EAAE,CAAAwG,kBAAA,EAqvCpB,CAAC;EAAA;AAAA;AAAA,SAAAiN,oBAAAzQ,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IArvCiBhD,EAAE,CAAAoD,cAAA,aAiuCwE,CAAC;IAjuC3EpD,EAAE,CAAA4E,UAAA,IAAAgO,kCAAA,yBAkuCnC,CAAC,IAAAO,yBAAA,iBACmB,CAAC,IAAAC,2BAAA,mBASrC,CAAC,IAAAG,yBAAA,iBAG0E,CAAC,IAAAC,kCAAA,yBAM5D,CAAC;IArvCgCxT,EAAE,CAAAmE,YAAA,CAsvClF,CAAC;EAAA;EAAA,IAAAnB,EAAA;IAAA,MAAAS,MAAA,GAtvC+EzD,EAAE,CAAA0D,aAAA;IAAF1D,EAAE,CAAAiG,UAAA,CAAAxC,MAAA,CAAA0F,UAiuCoD,CAAC;IAjuCvDnJ,EAAE,CAAAoE,UAAA,YAAFpE,EAAE,CAAAqE,eAAA,IAAA4I,IAAA,EAAAxJ,MAAA,CAAAmG,aAAA,CAiuCa,CAAC,YAAAnG,MAAA,CAAAyF,KAAiB,CAAC;IAjuClClJ,EAAE,CAAA8E,SAAA,CAkuCrC,CAAC;IAluCkC9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAgP,cAkuCrC,CAAC;IAluCkCzS,EAAE,CAAA8E,SAAA,CAmuCjB,CAAC;IAnuCc9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA+O,OAmuCjB,CAAC;IAnuCcxS,EAAE,CAAA8E,SAAA,CA4uCrD,CAAC;IA5uCkD9E,EAAE,CAAAoE,UAAA,SAAAX,MAAA,CAAA8K,KAAA,IAAA9K,MAAA,CAAA8K,KAAA,GA4uCrD,CAAC;IA5uCkDvO,EAAE,CAAA8E,SAAA,CA+uCsB,CAAC;IA/uCzB9E,EAAE,CAAAoE,UAAA,UAAAX,MAAA,CAAA+O,OAAA,KAAA/O,MAAA,CAAA0N,WAAA,cAAA1N,MAAA,CAAA0N,WAAA,GAAA5H,MAAA,OA+uCsB,CAAC;IA/uCzBvJ,EAAE,CAAA8E,SAAA,CAqvCrC,CAAC;IArvCkC9E,EAAE,CAAAoE,UAAA,qBAAAX,MAAA,CAAAkP,cAqvCrC,CAAC;EAAA;AAAA;AAzpD3D,MAAMe,UAAU,CAAC;EACb,OAAOC,UAAU,GAAG,kBAAkB;EACtCC,OAAO;EACP7O,IAAI;EACJ8O,UAAU;EACVvH,IAAI;EACJpF,KAAK;EACLwD,UAAU;EACVC,SAAS;EACTvD,KAAK;EACLqC,WAAW;EACXtC,QAAQ;EACR/B,IAAI;EACJ0O,OAAO;EACPxP,aAAa;EACbkG,aAAa;EACbX,aAAa;EACb,IAAIL,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACpE,IAAI,CAACwE,aAAa,KAAK,QAAQ,IAAI,IAAI,CAACxE,IAAI,CAACwE,aAAa,KAAK,UAAU,GAAG,IAAI,CAACnE,UAAU,CAAC,CAAC,GAAG8K,SAAS;EACzH;EACA,IAAIjH,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAAClE,IAAI,CAACwE,aAAa,KAAK,UAAU,GAAG,IAAI,CAACnE,UAAU,CAAC,CAAC,GAAG8K,SAAS;EACjF;EACAwD,WAAWA,CAAC3O,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACA4O,QAAQA,CAAA,EAAG;IACP,IAAI,CAACjP,IAAI,CAACkP,MAAM,GAAG,IAAI,CAACJ,UAAU;IAClC,IAAI,IAAI,CAACA,UAAU,EAAE;MACjB,IAAI,CAACK,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAAC9O,IAAI,CAAC+O,cAAc,CAAC,IAAI,CAACpP,IAAI,EAAE,IAAI,CAACK,IAAI,CAACmJ,KAAK,EAAE,QAAQ,EAAE,IAAI,CAACnJ,IAAI,CAACgP,cAAc,CAAC,IAAI,CAACP,UAAU,CAACQ,GAAG,EAAE,IAAI,CAACjP,IAAI,CAACmJ,KAAK,CAAC,CAAC;IAClI;EACJ;EACArI,OAAOA,CAAA,EAAG;IACN,IAAI4D,IAAI;IACR,IAAI,IAAI,CAAC/E,IAAI,CAAC+E,IAAI,EACdA,IAAI,GAAG,IAAI,CAAC/E,IAAI,CAAC+E,IAAI,CAAC,KAEtBA,IAAI,GAAG,IAAI,CAAC/E,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACD,IAAI,CAACwC,QAAQ,IAAI,IAAI,CAACxC,IAAI,CAACwC,QAAQ,EAAEgC,MAAM,GAAG,IAAI,CAACxE,IAAI,CAACgF,YAAY,GAAG,IAAI,CAAChF,IAAI,CAACiF,aAAa;IACpI,OAAO0J,UAAU,CAACC,UAAU,GAAG,GAAG,GAAG7J,IAAI;EAC7C;EACAV,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAAChE,IAAI,CAACkP,UAAU,CAAC,IAAI,CAACvP,IAAI,CAAC;EAC1C;EACAiE,MAAMA,CAACuL,KAAK,EAAE;IACV,IAAI,IAAI,CAACxP,IAAI,CAACC,QAAQ,EAClB,IAAI,CAACwP,QAAQ,CAACD,KAAK,CAAC,CAAC,KAErB,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC;IACtBA,KAAK,CAACG,eAAe,CAAC,CAAC;EAC3B;EACAD,MAAMA,CAACF,KAAK,EAAE;IACV,IAAI,CAACxP,IAAI,CAACC,QAAQ,GAAG,IAAI;IACzB,IAAI,IAAI,CAACI,IAAI,CAAC6E,aAAa,EAAE;MACzB,IAAI,CAAC7E,IAAI,CAACuP,qBAAqB,CAAC,CAAC;MACjC,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC3B;IACA,IAAI,CAACxP,IAAI,CAACyP,YAAY,CAAC5E,IAAI,CAAC;MAAE6E,aAAa,EAAEP,KAAK;MAAExP,IAAI,EAAE,IAAI,CAACA;IAAK,CAAC,CAAC;EAC1E;EACAyP,QAAQA,CAACD,KAAK,EAAE;IACZ,IAAI,CAACxP,IAAI,CAACC,QAAQ,GAAG,KAAK;IAC1B,IAAI,IAAI,CAACI,IAAI,CAAC6E,aAAa,EAAE;MACzB,IAAI,CAAC7E,IAAI,CAACuP,qBAAqB,CAAC,CAAC;MACjC,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC3B;IACA,IAAI,CAACxP,IAAI,CAAC2P,cAAc,CAAC9E,IAAI,CAAC;MAAE6E,aAAa,EAAEP,KAAK;MAAExP,IAAI,EAAE,IAAI,CAACA;IAAK,CAAC,CAAC;EAC5E;EACA+C,WAAWA,CAACyM,KAAK,EAAE;IACf,IAAI,CAACnP,IAAI,CAAC0C,WAAW,CAACyM,KAAK,EAAE,IAAI,CAACxP,IAAI,CAAC;EAC3C;EACAsH,aAAaA,CAACkI,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACF,GAAG,KAAK,OAAO,EAAE;MACvB,IAAI,CAACjP,IAAI,CAAC0C,WAAW,CAACyM,KAAK,EAAE,IAAI,CAACxP,IAAI,CAAC;IAC3C;EACJ;EACAmD,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC9C,IAAI,CAAC8C,cAAc,CAAC,CAAC;EAC9B;EACAF,gBAAgBA,CAACuM,KAAK,EAAE;IACpB,IAAI,CAACnP,IAAI,CAAC4C,gBAAgB,CAACuM,KAAK,EAAE,IAAI,CAACxP,IAAI,CAAC;EAChD;EACAU,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACL,IAAI,CAACK,UAAU,CAAC,IAAI,CAACV,IAAI,CAAC;EAC1C;EACAiQ,UAAUA,CAACT,KAAK,EAAE;IACd,OAAOA,KAAK,CAACU,aAAa,KAAKV,KAAK,CAACU,aAAa,CAACD,UAAU,CAACT,KAAK,CAACjG,MAAM,CAAC,IAAIiG,KAAK,CAACU,aAAa,CAACD,UAAU,CAACT,KAAK,CAACjG,MAAM,CAAC4G,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAC7J;EACAtR,WAAWA,CAAC2Q,KAAK,EAAEY,QAAQ,EAAE;IACzBZ,KAAK,CAACpG,cAAc,CAAC,CAAC;IACtB,IAAIiH,QAAQ,GAAG,IAAI,CAAChQ,IAAI,CAACgQ,QAAQ;IACjC,IAAIC,aAAa,GAAG,IAAI,CAACjQ,IAAI,CAACiQ,aAAa;IAC3C,IAAIC,aAAa,GAAG,IAAI,CAAClQ,IAAI,CAACkQ,aAAa;IAC3C,IAAIC,qBAAqB,GAAG,IAAI,CAACnQ,IAAI,CAACoQ,YAAY,KAAK,IAAI,CAACpQ,IAAI,GAAG+P,QAAQ,KAAK,CAAC,IAAIE,aAAa,KAAK,IAAI,CAACnO,KAAK,GAAG,CAAC,GAAG,IAAI;IAC5H,IAAI,IAAI,CAAC9B,IAAI,CAACqQ,SAAS,CAACL,QAAQ,EAAE,IAAI,CAACrQ,IAAI,EAAEuQ,aAAa,CAAC,IAAIC,qBAAqB,EAAE;MAClF,IAAIG,UAAU,GAAG;QAAE,GAAG,IAAI,CAACC,4BAA4B,CAACR,QAAQ;MAAE,CAAC;MACnE,IAAI,IAAI,CAAC/P,IAAI,CAACwQ,YAAY,EAAE;QACxB,IAAI,CAACxQ,IAAI,CAACyQ,UAAU,CAAC5F,IAAI,CAAC;UACtB6E,aAAa,EAAEP,KAAK;UACpBa,QAAQ,EAAEA,QAAQ;UAClBU,QAAQ,EAAE,IAAI,CAAC/Q,IAAI;UACnBmC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjB6O,MAAM,EAAEA,CAAA,KAAM;YACV,IAAI,CAACC,gBAAgB,CAACN,UAAU,CAAC;UACrC;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAACM,gBAAgB,CAACN,UAAU,CAAC;QACjC,IAAI,CAACtQ,IAAI,CAACyQ,UAAU,CAAC5F,IAAI,CAAC;UACtB6E,aAAa,EAAEP,KAAK;UACpBa,QAAQ,EAAEA,QAAQ;UAClBU,QAAQ,EAAE,IAAI,CAAC/Q,IAAI;UACnBmC,KAAK,EAAE,IAAI,CAACA;QAChB,CAAC,CAAC;MACN;IACJ;IACA,IAAI,CAAC5C,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACkG,aAAa,GAAG,KAAK;EAC9B;EACAwL,gBAAgBA,CAACzB,KAAK,EAAE;IACpB,IAAI0B,WAAW,GAAG1B,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,GAAGM,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,CAAC1M,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACmJ,KAAK;IAC1FgG,KAAK,CAAC2B,gBAAgB,CAACC,MAAM,CAAC5B,KAAK,CAACc,aAAa,EAAE,CAAC,CAAC;IACrD,IAAIe,SAAS,GAAG,IAAI,CAAClP,KAAK;IAC1B,IAAIqN,KAAK,CAACY,QAAQ,GAAG,CAAC,EAAE;MACpBiB,SAAS,GAAG7B,KAAK,CAAC2B,gBAAgB,KAAKD,WAAW,GAAI1B,KAAK,CAACc,aAAa,GAAGd,KAAK,CAACrN,KAAK,GAAGqN,KAAK,CAACrN,KAAK,GAAGqN,KAAK,CAACrN,KAAK,GAAG,CAAC,GAAIqN,KAAK,CAACrN,KAAK;MACtI+O,WAAW,CAACE,MAAM,CAACC,SAAS,EAAE,CAAC,EAAE7B,KAAK,CAACa,QAAQ,CAAC;IACpD,CAAC,MACI;MACDgB,SAAS,GAAGH,WAAW,CAAC1M,MAAM;MAC9B0M,WAAW,CAACI,IAAI,CAAC9B,KAAK,CAACa,QAAQ,CAAC;IACpC;IACA,IAAI,CAAChQ,IAAI,CAACkR,eAAe,CAACC,QAAQ,CAAC;MAC/BxR,IAAI,EAAEwP,KAAK,CAACa,QAAQ;MACpBoB,QAAQ,EAAEjC,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,GAAGM,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,CAAC1M,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACmJ,KAAK;MAClFrH,KAAK,EAAEqN,KAAK,CAACc;IACjB,CAAC,CAAC;EACN;EACAM,4BAA4BA,CAACR,QAAQ,EAAE;IACnC,OAAO;MACHC,QAAQ,EAAE,IAAI,CAAChQ,IAAI,CAACgQ,QAAQ;MAC5BC,aAAa,EAAE,IAAI,CAACjQ,IAAI,CAACiQ,aAAa;MACtCa,gBAAgB,EAAE,IAAI,CAAC9Q,IAAI,CAAC8Q,gBAAgB;MAC5CJ,QAAQ,EAAE,IAAI,CAAC/Q,IAAI;MACnBmC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBiO,QAAQ,EAAEA;IACd,CAAC;EACL;EACArR,mBAAmBA,CAACyQ,KAAK,EAAE;IACvBA,KAAK,CAACkC,YAAY,CAACC,UAAU,GAAG,MAAM;IACtCnC,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACAnK,oBAAoBA,CAACuQ,KAAK,EAAEY,QAAQ,EAAE;IAClC,IAAI,IAAI,CAAC/P,IAAI,CAACqQ,SAAS,CAAC,IAAI,CAACrQ,IAAI,CAACgQ,QAAQ,EAAE,IAAI,CAACrQ,IAAI,EAAE,IAAI,CAACK,IAAI,CAACkQ,aAAa,CAAC,EAAE;MAC7E,IAAIH,QAAQ,GAAG,CAAC,EACZ,IAAI,CAAC7Q,aAAa,GAAG,IAAI,CAAC,KAE1B,IAAI,CAACkG,aAAa,GAAG,IAAI;IACjC;EACJ;EACAtG,oBAAoBA,CAACqQ,KAAK,EAAE;IACxB,IAAI,CAACjQ,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACkG,aAAa,GAAG,KAAK;EAC9B;EACA5B,WAAWA,CAAC2L,KAAK,EAAE;IACf,IAAI,IAAI,CAACnP,IAAI,CAACsE,cAAc,IAAI,IAAI,CAAC3E,IAAI,CAAC4R,SAAS,KAAK,KAAK,EAAE;MAC3DpC,KAAK,CAACkC,YAAY,CAACG,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;MAC1C,IAAI,CAACxR,IAAI,CAACkR,eAAe,CAACO,SAAS,CAAC;QAChCzR,IAAI,EAAE,IAAI;QACVL,IAAI,EAAE,IAAI,CAACA,IAAI;QACfyR,QAAQ,EAAE,IAAI,CAACzR,IAAI,EAAEkP,MAAM,GAAG,IAAI,CAAClP,IAAI,CAACkP,MAAM,CAAC1M,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACmJ,KAAK;QACzErH,KAAK,EAAE,IAAI,CAACA,KAAK;QACjB4P,KAAK,EAAE,IAAI,CAAC1R,IAAI,CAAC2R;MACrB,CAAC,CAAC;IACN,CAAC,MACI;MACDxC,KAAK,CAACpG,cAAc,CAAC,CAAC;IAC1B;EACJ;EACArF,UAAUA,CAACyL,KAAK,EAAE;IACd,IAAI,CAACnP,IAAI,CAACkR,eAAe,CAACC,QAAQ,CAAC;MAC/BxR,IAAI,EAAE,IAAI,CAACA,IAAI;MACfyR,QAAQ,EAAE,IAAI,CAACzR,IAAI,EAAEkP,MAAM,GAAG,IAAI,CAAClP,IAAI,CAACkP,MAAM,CAAC1M,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACmJ,KAAK;MACzErH,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACAoB,kBAAkBA,CAACiM,KAAK,EAAE;IACtBA,KAAK,CAACkC,YAAY,CAACC,UAAU,GAAG,MAAM;IACtC,IAAI,IAAI,CAACtR,IAAI,CAACoH,cAAc,EAAE;MAC1B+H,KAAK,CAACpG,cAAc,CAAC,CAAC;MACtBoG,KAAK,CAACG,eAAe,CAAC,CAAC;IAC3B;EACJ;EACAtM,UAAUA,CAACmM,KAAK,EAAE;IACd,IAAI,IAAI,CAACnP,IAAI,CAACoH,cAAc,IAAI,IAAI,CAACzH,IAAI,EAAEiS,SAAS,KAAK,KAAK,EAAE;MAC5D,IAAI5B,QAAQ,GAAG,IAAI,CAAChQ,IAAI,CAACgQ,QAAQ;MACjC,IAAI,IAAI,CAAChQ,IAAI,CAACqQ,SAAS,CAACL,QAAQ,EAAE,IAAI,CAACrQ,IAAI,EAAE,IAAI,CAACK,IAAI,CAACkQ,aAAa,CAAC,EAAE;QACnE,IAAII,UAAU,GAAG;UAAE,GAAG,IAAI,CAACuB,2BAA2B,CAAC;QAAE,CAAC;QAC1D,IAAI,IAAI,CAAC7R,IAAI,CAACwQ,YAAY,EAAE;UACxB,IAAI,CAACxQ,IAAI,CAACyQ,UAAU,CAAC5F,IAAI,CAAC;YACtB6E,aAAa,EAAEP,KAAK;YACpBa,QAAQ,EAAEA,QAAQ;YAClBU,QAAQ,EAAE,IAAI,CAAC/Q,IAAI;YACnBmC,KAAK,EAAE,IAAI,CAACA,KAAK;YACjB6O,MAAM,EAAEA,CAAA,KAAM;cACV,IAAI,CAACmB,eAAe,CAACxB,UAAU,CAAC;YACpC;UACJ,CAAC,CAAC;QACN,CAAC,MACI;UACD,IAAI,CAACwB,eAAe,CAACxB,UAAU,CAAC;UAChC,IAAI,CAACtQ,IAAI,CAACyQ,UAAU,CAAC5F,IAAI,CAAC;YACtB6E,aAAa,EAAEP,KAAK;YACpBa,QAAQ,EAAEA,QAAQ;YAClBU,QAAQ,EAAE,IAAI,CAAC/Q,IAAI;YACnBmC,KAAK,EAAE,IAAI,CAACA;UAChB,CAAC,CAAC;QACN;MACJ;IACJ;IACAqN,KAAK,CAACpG,cAAc,CAAC,CAAC;IACtBoG,KAAK,CAACG,eAAe,CAAC,CAAC;IACvB,IAAI,CAAC7K,aAAa,GAAG,KAAK;EAC9B;EACAoN,2BAA2BA,CAAA,EAAG;IAC1B,OAAO;MACH7B,QAAQ,EAAE,IAAI,CAAChQ,IAAI,CAACgQ,QAAQ;MAC5BC,aAAa,EAAE,IAAI,CAACjQ,IAAI,CAACiQ,aAAa;MACtCa,gBAAgB,EAAE,IAAI,CAAC9Q,IAAI,CAAC8Q,gBAAgB;MAC5CJ,QAAQ,EAAE,IAAI,CAAC/Q;IACnB,CAAC;EACL;EACAmS,eAAeA,CAAC3C,KAAK,EAAE;IACnB,IAAIc,aAAa,GAAGd,KAAK,CAACc,aAAa;IACvCd,KAAK,CAAC2B,gBAAgB,CAACC,MAAM,CAACd,aAAa,EAAE,CAAC,CAAC;IAC/C,IAAId,KAAK,CAACuB,QAAQ,CAACvO,QAAQ,EACvBgN,KAAK,CAACuB,QAAQ,CAACvO,QAAQ,CAAC8O,IAAI,CAAC9B,KAAK,CAACa,QAAQ,CAAC,CAAC,KAE7Cb,KAAK,CAACuB,QAAQ,CAACvO,QAAQ,GAAG,CAACgN,KAAK,CAACa,QAAQ,CAAC;IAC9C,IAAI,CAAChQ,IAAI,CAACkR,eAAe,CAACC,QAAQ,CAAC;MAC/BxR,IAAI,EAAEwP,KAAK,CAACa,QAAQ;MACpBoB,QAAQ,EAAEjC,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,GAAGM,KAAK,CAACuB,QAAQ,CAAC7B,MAAM,CAAC1M,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACmJ,KAAK;MAClFrH,KAAK,EAAEmO;IACX,CAAC,CAAC;EACN;EACA7M,mBAAmBA,CAAC+L,KAAK,EAAE;IACvB,IAAI,IAAI,CAACnP,IAAI,CAACoH,cAAc,IAAI,IAAI,CAACzH,IAAI,EAAEiS,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC5R,IAAI,CAACqQ,SAAS,CAAC,IAAI,CAACrQ,IAAI,CAACgQ,QAAQ,EAAE,IAAI,CAACrQ,IAAI,EAAE,IAAI,CAACK,IAAI,CAACkQ,aAAa,CAAC,EAAE;MAC3I,IAAI,CAACzL,aAAa,GAAG,IAAI;IAC7B;EACJ;EACAnB,mBAAmBA,CAAC6L,KAAK,EAAE;IACvB,IAAI,IAAI,CAACnP,IAAI,CAACoH,cAAc,EAAE;MAC1B,IAAI2K,IAAI,GAAG5C,KAAK,CAACU,aAAa,CAACmC,qBAAqB,CAAC,CAAC;MACtD,IAAI7C,KAAK,CAAC8C,CAAC,GAAGF,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACI,KAAK,IAAIhD,KAAK,CAAC8C,CAAC,GAAGF,IAAI,CAACG,IAAI,IAAI/C,KAAK,CAACiD,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACQ,GAAG,GAAGR,IAAI,CAAChV,MAAM,CAAC,IAAIoS,KAAK,CAACiD,CAAC,GAAGL,IAAI,CAACQ,GAAG,EAAE;QAChI,IAAI,CAAC9N,aAAa,GAAG,KAAK;MAC9B;IACJ;EACJ;EACAjC,SAASA,CAAC2M,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,CAACS,UAAU,CAACT,KAAK,CAAC,IAAK,IAAI,CAACnP,IAAI,CAACwS,WAAW,IAAI,IAAI,CAACxS,IAAI,CAACwS,WAAW,CAACC,kBAAkB,EAAEC,aAAa,CAAC5O,KAAK,CAAC6O,OAAO,KAAK,OAAQ,EAAE;MACzI;IACJ;IACA,QAAQxD,KAAK,CAACyD,IAAI;MACd;MACA,KAAK,WAAW;QACZ,IAAI,CAACC,WAAW,CAAC1D,KAAK,CAAC;QACvB;MACJ;MACA,KAAK,SAAS;QACV,IAAI,CAAC2D,SAAS,CAAC3D,KAAK,CAAC;QACrB;MACJ;MACA,KAAK,YAAY;QACb,IAAI,CAAC4D,YAAY,CAAC5D,KAAK,CAAC;QACxB;MACJ;MACA,KAAK,WAAW;QACZ,IAAI,CAAC6D,WAAW,CAAC7D,KAAK,CAAC;QACvB;MACJ;MACA,KAAK,OAAO;MACZ,KAAK,OAAO;QACR,IAAI,CAAC8D,OAAO,CAAC9D,KAAK,CAAC;QACnB;MACJ;MACA,KAAK,KAAK;QACN,IAAI,CAACL,qBAAqB,CAAC,CAAC;QAC5B;MACJ;QACI;QACA;IACR;EACJ;EACAgE,SAASA,CAAC3D,KAAK,EAAE;IACb,MAAM+D,WAAW,GAAG/D,KAAK,CAACjG,MAAM,CAACiK,YAAY,CAAC,iBAAiB,CAAC,KAAK,SAAS,GAAGhE,KAAK,CAACjG,MAAM,CAAC4G,OAAO,CAAC,mBAAmB,CAAC,GAAGX,KAAK,CAACjG,MAAM,CAACkK,aAAa;IACvJ,IAAIF,WAAW,CAACG,sBAAsB,EAAE;MACpC,IAAI,CAACC,cAAc,CAACJ,WAAW,EAAEA,WAAW,CAACG,sBAAsB,EAAE,IAAI,CAACE,yBAAyB,CAACL,WAAW,CAACG,sBAAsB,CAAC,CAAC;IAC5I,CAAC,MACI;MACD,IAAIG,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAACP,WAAW,CAAC;MAC9D,IAAIM,iBAAiB,EAAE;QACnB,IAAI,CAACF,cAAc,CAACJ,WAAW,EAAEM,iBAAiB,CAAC;MACvD;IACJ;IACArE,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACA8J,WAAWA,CAAC1D,KAAK,EAAE;IACf,MAAM+D,WAAW,GAAG/D,KAAK,CAACjG,MAAM,CAACiK,YAAY,CAAC,iBAAiB,CAAC,KAAK,SAAS,GAAGhE,KAAK,CAACjG,MAAM,CAAC4G,OAAO,CAAC,mBAAmB,CAAC,GAAGX,KAAK,CAACjG,MAAM;IACzI,MAAMwK,WAAW,GAAGR,WAAW,CAAC/Q,QAAQ,CAAC,CAAC,CAAC;IAC3C,IAAIuR,WAAW,IAAIA,WAAW,CAACvR,QAAQ,CAACgC,MAAM,GAAG,CAAC,EAAE;MAChD,IAAI,CAACmP,cAAc,CAACJ,WAAW,EAAEQ,WAAW,CAACvR,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,MACI;MACD,IAAI+Q,WAAW,CAACE,aAAa,CAACO,kBAAkB,EAAE;QAC9C,IAAI,CAACL,cAAc,CAACJ,WAAW,EAAEA,WAAW,CAACE,aAAa,CAACO,kBAAkB,CAAC;MAClF,CAAC,MACI;QACD,IAAIC,mBAAmB,GAAG,IAAI,CAACC,yBAAyB,CAACX,WAAW,CAACE,aAAa,CAAC;QACnF,IAAIQ,mBAAmB,EAAE;UACrB,IAAI,CAACN,cAAc,CAACJ,WAAW,EAAEU,mBAAmB,CAAC;QACzD;MACJ;IACJ;IACAzE,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACAgK,YAAYA,CAAC5D,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAACxP,IAAI,EAAEC,QAAQ,IAAI,CAAC,IAAI,CAACI,IAAI,CAACkP,UAAU,CAAC,IAAI,CAACvP,IAAI,CAAC,EAAE;MAC1D,IAAI,CAAC0P,MAAM,CAACF,KAAK,CAAC;MAClBA,KAAK,CAACU,aAAa,CAACiE,QAAQ,GAAG,CAAC,CAAC;MACjCC,UAAU,CAAC,MAAM;QACb,IAAI,CAAClB,WAAW,CAAC1D,KAAK,CAAC;MAC3B,CAAC,EAAE,CAAC,CAAC;IACT;IACAA,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACAiK,WAAWA,CAAC7D,KAAK,EAAE;IACf,MAAM+D,WAAW,GAAG/D,KAAK,CAACjG,MAAM,CAACiK,YAAY,CAAC,iBAAiB,CAAC,KAAK,SAAS,GAAGhE,KAAK,CAACjG,MAAM,CAAC4G,OAAO,CAAC,mBAAmB,CAAC,GAAGX,KAAK,CAACjG,MAAM;IACzI,IAAI,IAAI,CAAClH,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAACrC,IAAI,EAAEC,QAAQ,EAAE;MAC1C,OAAO,KAAK;IAChB;IACA,IAAI,IAAI,CAACD,IAAI,EAAEC,QAAQ,EAAE;MACrB,IAAI,CAACwP,QAAQ,CAACD,KAAK,CAAC;MACpB;IACJ;IACA,IAAIqE,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAACP,WAAW,CAACE,aAAa,CAAC;IAC5E,IAAII,iBAAiB,EAAE;MACnB,IAAI,CAACF,cAAc,CAACnE,KAAK,CAACU,aAAa,EAAE2D,iBAAiB,CAAC;IAC/D;IACArE,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACAkK,OAAOA,CAAC9D,KAAK,EAAE;IACX,IAAI,CAACnP,IAAI,CAAC0C,WAAW,CAACyM,KAAK,EAAE,IAAI,CAACxP,IAAI,CAAC;IACvC,IAAI,CAACqU,2BAA2B,CAAC7E,KAAK,EAAE,IAAI,CAACnP,IAAI,CAACiU,WAAW,CAAC;IAC9D9E,KAAK,CAACpG,cAAc,CAAC,CAAC;EAC1B;EACA+F,qBAAqBA,CAAA,EAAG;IACpB,MAAMoF,KAAK,GAAGrY,UAAU,CAACsY,IAAI,CAAC,IAAI,CAACnU,IAAI,CAACoU,EAAE,CAAC1B,aAAa,EAAE,aAAa,CAAC;IACxE,MAAM2B,eAAe,GAAG,CAAC,GAAGH,KAAK,CAAC,CAACI,IAAI,CAAE3U,IAAI,IAAKA,IAAI,CAACwT,YAAY,CAAC,eAAe,CAAC,KAAK,MAAM,IAAIxT,IAAI,CAACwT,YAAY,CAAC,cAAc,CAAC,KAAK,MAAM,CAAC;IAChJ,CAAC,GAAGe,KAAK,CAAC,CAACK,OAAO,CAAE5U,IAAI,IAAK;MACzBA,IAAI,CAACmU,QAAQ,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC;IACF,IAAIO,eAAe,EAAE;MACjB,MAAMG,aAAa,GAAG,CAAC,GAAGN,KAAK,CAAC,CAAC5G,MAAM,CAAE3N,IAAI,IAAKA,IAAI,CAACwT,YAAY,CAAC,eAAe,CAAC,KAAK,MAAM,IAAIxT,IAAI,CAACwT,YAAY,CAAC,cAAc,CAAC,KAAK,MAAM,CAAC;MAChJqB,aAAa,CAAC,CAAC,CAAC,CAACV,QAAQ,GAAG,CAAC;MAC7B;IACJ;IACA,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC,CAAC,CAACJ,QAAQ,GAAG,CAAC;EAC9B;EACAE,2BAA2BA,CAAC7E,KAAK,EAAE8E,WAAW,EAAE;IAC5C,IAAI,IAAI,CAACjU,IAAI,CAACwE,aAAa,KAAK,IAAI,EAAE;MAClC,MAAMiQ,QAAQ,GAAG,CAAC,GAAG5Y,UAAU,CAACsY,IAAI,CAAC,IAAI,CAACnU,IAAI,CAACoU,EAAE,CAAC1B,aAAa,EAAE,aAAa,CAAC,CAAC;MAChFvD,KAAK,CAACU,aAAa,CAACiE,QAAQ,GAAGG,WAAW,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;MAC7D,IAAIQ,QAAQ,CAACC,KAAK,CAAEC,OAAO,IAAKA,OAAO,CAACb,QAAQ,KAAK,CAAC,CAAC,CAAC,EAAE;QACtDW,QAAQ,CAAC,CAAC,CAAC,CAACX,QAAQ,GAAG,CAAC;MAC5B;IACJ;EACJ;EACAD,yBAAyBA,CAACX,WAAW,EAAE;IACnC,IAAIM,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAACP,WAAW,CAAC;IAC9D,IAAIM,iBAAiB,EAAE;MACnB,IAAIA,iBAAiB,CAACG,kBAAkB,EACpC,OAAOH,iBAAiB,CAACG,kBAAkB,CAAC,KAE5C,OAAO,IAAI,CAACE,yBAAyB,CAACL,iBAAiB,CAAC;IAChE,CAAC,MACI;MACD,OAAO,IAAI;IACf;EACJ;EACAD,yBAAyBA,CAACL,WAAW,EAAE;IACnC,MAAMQ,WAAW,GAAGkB,KAAK,CAACC,IAAI,CAAC3B,WAAW,CAAC/Q,QAAQ,CAAC,CAACgS,IAAI,CAAEC,EAAE,IAAKvY,UAAU,CAACiZ,QAAQ,CAACV,EAAE,EAAE,YAAY,CAAC,CAAC;IACxG,MAAMW,mBAAmB,GAAGrB,WAAW,CAACvR,QAAQ,CAAC,CAAC,CAAC;IACnD,IAAI4S,mBAAmB,IAAIA,mBAAmB,CAAC5S,QAAQ,CAACgC,MAAM,GAAG,CAAC,EAAE;MAChE,MAAM6Q,gBAAgB,GAAGD,mBAAmB,CAAC5S,QAAQ,CAAC4S,mBAAmB,CAAC5S,QAAQ,CAACgC,MAAM,GAAG,CAAC,CAAC;MAC9F,OAAO,IAAI,CAACoP,yBAAyB,CAACyB,gBAAgB,CAAC;IAC3D,CAAC,MACI;MACD,OAAO9B,WAAW;IACtB;EACJ;EACAO,oBAAoBA,CAACP,WAAW,EAAE;IAC9B,MAAMM,iBAAiB,GAAGN,WAAW,CAACE,aAAa,EAAEA,aAAa,EAAEA,aAAa;IACjF,OAAOI,iBAAiB,EAAEyB,OAAO,KAAK,YAAY,GAAGzB,iBAAiB,GAAG,IAAI;EACjF;EACA0B,SAASA,CAACP,OAAO,EAAE;IACf,IAAI,IAAI,CAAC3U,IAAI,CAACoH,cAAc,EACxBuN,OAAO,CAACxS,QAAQ,CAAC,CAAC,CAAC,CAACgT,KAAK,CAAC,CAAC,CAAC,KAE5BR,OAAO,CAACxS,QAAQ,CAAC,CAAC,CAAC,CAACgT,KAAK,CAAC,CAAC;EACnC;EACA7B,cAAcA,CAAC8B,iBAAiB,EAAEC,iBAAiB,EAAEC,qBAAqB,EAAE;IACxEF,iBAAiB,CAACtB,QAAQ,GAAG,IAAI;IACjCuB,iBAAiB,CAAClT,QAAQ,CAAC,CAAC,CAAC,CAAC2R,QAAQ,GAAG,GAAG;IAC5C,IAAI,CAACoB,SAAS,CAACI,qBAAqB,IAAID,iBAAiB,CAAC;EAC9D;EACA7F,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACd,OAAO,GAAGqF,UAAU,CAAC,MAAM;MAC5B,IAAIpU,IAAI,GAAG9D,UAAU,CAAC0Z,UAAU,CAACC,QAAQ,CAACC,IAAI,EAAG,aAAY,IAAI,CAAC9V,IAAI,EAAEsP,GAAG,IAAI,IAAI,CAACtP,IAAI,EAAE+V,IAAK,IAAG,CAAC;MACnG7Z,UAAU,CAACsZ,KAAK,CAACxV,IAAI,CAAC;IAC1B,CAAC,EAAE,CAAC,CAAC;EACT;EACA,OAAOgW,IAAI,YAAAC,mBAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFvH,UAAU,EAApB1T,EAAE,CAAAkb,iBAAA,CAAoCjb,UAAU,CAAC,MAAMkb,IAAI,CAAC;EAAA;EACrJ,OAAOC,IAAI,kBAD8Epb,EAAE,CAAAqb,iBAAA;IAAAC,IAAA,EACJ5H,UAAU;IAAA6H,SAAA;IAAAC,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,wBAAA3Y,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QADRhD,EAAE,CAAAqJ,WAAA,SACJ,UAAU;MAAA;IAAA;IAAAuS,MAAA;MAAAhI,OAAA;MAAA7O,IAAA;MAAA8O,UAAA;MAAAvH,IAAA;MAAApF,KAAA;MAAAwD,UAAA;MAAAC,SAAA;MAAAvD,KAAA;MAAAqC,WAAA;MAAAtC,QAAA;IAAA;IAAA0U,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,oBAAAjZ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QADRhD,EAAE,CAAA4E,UAAA,IAAA2H,iCAAA,wBAE7D,CAAC;MAAA;MAAA,IAAAvJ,EAAA;QAF0DhD,EAAE,CAAAoE,UAAA,SAAAnB,GAAA,CAAA8B,IAE9D,CAAC;MAAA;IAAA;IAAAmX,YAAA,EAAAA,CAAA,MA6ImDpc,EAAE,CAACqc,OAAO,EAAyGrc,EAAE,CAACsc,OAAO,EAAwItc,EAAE,CAACuc,IAAI,EAAkHvc,EAAE,CAACwc,gBAAgB,EAAyKxc,EAAE,CAACyc,OAAO,EAAgGrb,EAAE,CAACsb,MAAM,EAA2Ejb,SAAS,EAA2EC,eAAe,EAAiFC,gBAAgB,EAAkFC,SAAS,EAA2EC,QAAQ,EAA0E+R,UAAU;IAAA+I,aAAA;EAAA;AACnxC;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAjJ6F1c,EAAE,CAAA2c,iBAAA,CAiJJjJ,UAAU,EAAc,CAAC;IACxG4H,IAAI,EAAEpb,SAAS;IACf0c,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,YAAY;MACtBb,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACeS,aAAa,EAAEtc,iBAAiB,CAAC2c,IAAI;MACrCC,IAAI,EAAE;QACFC,KAAK,EAAE,WAAW;QAClB,aAAa,EAAE;MACnB;IACJ,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAE1B,IAAI,EAAEH,IAAI;IAAE8B,UAAU,EAAE,CAAC;MAC1C3B,IAAI,EAAElb,MAAM;MACZwc,IAAI,EAAE,CAAC3c,UAAU,CAAC,MAAMkb,IAAI,CAAC;IACjC,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAEvH,OAAO,EAAE,CAAC;MACnC0H,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAE0E,IAAI,EAAE,CAAC;MACPuW,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAEwT,UAAU,EAAE,CAAC;MACbyH,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAEiM,IAAI,EAAE,CAAC;MACPgP,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAE6G,KAAK,EAAE,CAAC;MACRoU,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAEqK,UAAU,EAAE,CAAC;MACb4Q,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAEsK,SAAS,EAAE,CAAC;MACZ2Q,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAE+G,KAAK,EAAE,CAAC;MACRkU,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAEoJ,WAAW,EAAE,CAAC;MACd6R,IAAI,EAAEjb;IACV,CAAC,CAAC;IAAE8G,QAAQ,EAAE,CAAC;MACXmU,IAAI,EAAEjb;IACV,CAAC;EAAE,CAAC;AAAA;AAChB;AACA;AACA;AACA;AACA,MAAM8a,IAAI,CAAC;EACP3B,EAAE;EACFlD,eAAe;EACf4G,MAAM;EACNC,EAAE;EACF;AACJ;AACA;AACA;EACI5O,KAAK;EACL;AACJ;AACA;AACA;EACI3E,aAAa;EACb;AACJ;AACA;AACA;EACIwT,SAAS;EACT;AACJ;AACA;AACA;EACIlU,KAAK;EACL;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACIyO,WAAW;EACX;AACJ;AACA;AACA;EACIyF,MAAM,GAAG,UAAU;EACnB;AACJ;AACA;AACA;EACItG,cAAc;EACd;AACJ;AACA;AACA;EACIuG,cAAc;EACd;AACJ;AACA;AACA;EACI5T,cAAc;EACd;AACJ;AACA;AACA;EACI8C,cAAc;EACd;AACJ;AACA;AACA;EACI+Q,gBAAgB,GAAG,IAAI;EACvB;AACJ;AACA;AACA;EACIC,oBAAoB,GAAG,IAAI;EAC3B;AACJ;AACA;AACA;EACIC,sBAAsB,GAAG,IAAI;EAC7B;AACJ;AACA;AACA;EACIjL,OAAO;EACP;AACJ;AACA;AACA;EACIrF,WAAW;EACX;AACJ;AACA;AACA;EACIuQ,YAAY,GAAG,EAAE;EACjB;AACJ;AACA;AACA;EACIrO,SAAS;EACT;AACJ;AACA;AACA;EACIxE,gBAAgB;EAChB;AACJ;AACA;AACA;EACIyE,cAAc;EACd;AACJ;AACA;AACA;EACIsG,YAAY;EACZ;AACJ;AACA;AACA;EACIlD,MAAM;EACN;AACJ;AACA;AACA;EACIiL,QAAQ,GAAG,OAAO;EAClB;AACJ;AACA;AACA;EACIC,UAAU,GAAG,SAAS;EACtB;AACJ;AACA;AACA;EACIpP,iBAAiB;EACjB;AACJ;AACA;AACA;EACIqP,aAAa;EACb;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}