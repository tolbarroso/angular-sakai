{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/database\";\nexport class OrderService {\n  constructor(db) {\n    this.db = db;\n    this.dbPath = '/orders';\n    this.orderRef = null;\n    this.orderRef = db.list(this.dbPath);\n  }\n  getOrders() {\n    // return this.orderRef.valueChanges();\n    return this.orderRef.snapshotChanges().pipe(map(changes => changes.map(c => ({\n      key: c.payload.key,\n      ...c.payload.val()\n    }))));\n  }\n  addOrder(order) {\n    this.orderRef.push(order);\n  }\n  updateOrder(key, value) {\n    this.orderRef.update(key, value).catch(error => this.handleError(error));\n  }\n  handleError(error) {\n    console.log(error);\n  }\n  deleteOrder(key) {\n    this.orderRef.remove(key);\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.AngularFireDatabase));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","OrderService","constructor","db","dbPath","orderRef","list","getOrders","snapshotChanges","pipe","changes","c","key","payload","val","addOrder","order","push","updateOrder","value","update","catch","error","handleError","console","log","deleteOrder","remove","_","i0","ɵɵinject","i1","AngularFireDatabase","_2","factory","ɵfac","providedIn"],"sources":["/workspace/angular-sakai/src/app/demo/components/pages/order/services/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/compat/database';\nimport { map, Observable } from 'rxjs';\nimport { Order } from '../models/order.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class OrderService {\n    private dbPath = '/orders';\n    orderRef: AngularFireList<Order> = null;\n\n    constructor(private db: AngularFireDatabase) {\n        this.orderRef = db.list(this.dbPath);\n    }\n\n    getOrders(): Observable<Order[]> {\n        // return this.orderRef.valueChanges();\n        return this.orderRef.snapshotChanges().pipe(\n            map(changes =>\n                changes.map(c => ({ key: c.payload.key, ...c.payload.val() }))\n            )\n        );\n    }\n\n    addOrder(order: Order): void {\n        this.orderRef.push(order);\n    }\n\n    updateOrder(key: string, value: any): void {\n        this.orderRef.update(key, value).catch(error => this.handleError(error));\n    }\n\n    private handleError(error) {\n        console.log(error);\n    }\n\n    deleteOrder(key: string): void {\n        this.orderRef.remove(key);\n    }\n}\n"],"mappings":"AAEA,SAASA,GAAG,QAAoB,MAAM;;;AAMtC,OAAM,MAAOC,YAAY;EAIrBC,YAAoBC,EAAuB;IAAvB,KAAAA,EAAE,GAAFA,EAAE;IAHd,KAAAC,MAAM,GAAG,SAAS;IAC1B,KAAAC,QAAQ,GAA2B,IAAI;IAGnC,IAAI,CAACA,QAAQ,GAAGF,EAAE,CAACG,IAAI,CAAC,IAAI,CAACF,MAAM,CAAC;EACxC;EAEAG,SAASA,CAAA;IACL;IACA,OAAO,IAAI,CAACF,QAAQ,CAACG,eAAe,EAAE,CAACC,IAAI,CACvCT,GAAG,CAACU,OAAO,IACPA,OAAO,CAACV,GAAG,CAACW,CAAC,KAAK;MAAEC,GAAG,EAAED,CAAC,CAACE,OAAO,CAACD,GAAG;MAAE,GAAGD,CAAC,CAACE,OAAO,CAACC,GAAG;IAAE,CAAE,CAAC,CAAC,CACjE,CACJ;EACL;EAEAC,QAAQA,CAACC,KAAY;IACjB,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACD,KAAK,CAAC;EAC7B;EAEAE,WAAWA,CAACN,GAAW,EAAEO,KAAU;IAC/B,IAAI,CAACd,QAAQ,CAACe,MAAM,CAACR,GAAG,EAAEO,KAAK,CAAC,CAACE,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;EAC5E;EAEQC,WAAWA,CAACD,KAAK;IACrBE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EACtB;EAEAI,WAAWA,CAACd,GAAW;IACnB,IAAI,CAACP,QAAQ,CAACsB,MAAM,CAACf,GAAG,CAAC;EAC7B;EAAC,QAAAgB,CAAA,G;qBA/BQ3B,YAAY,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZhC,YAAY;IAAAiC,OAAA,EAAZjC,YAAY,CAAAkC,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}