{"ast":null,"code":"import { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CepService {\n  constructor(http) {\n    this.http = http;\n  }\n  buscar(cep) {\n    return this.http.get(`https://viacep.com.br/ws/${cep}/json/`).pipe(catchError(error => {\n      console.log(error);\n      return error;\n    }));\n  }\n  buscarEstados() {\n    return this.http.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/`).pipe(catchError(error => {\n      console.log(error);\n      return error;\n    }));\n  }\n  buscarMunicipios(code) {\n    return this.http.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${code}/municipios`).pipe(catchError(error => {\n      console.log(error);\n      return error;\n    }));\n  }\n  static #_ = this.ɵfac = function CepService_Factory(t) {\n    return new (t || CepService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CepService,\n    factory: CepService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","CepService","constructor","http","buscar","cep","get","pipe","error","console","log","buscarEstados","buscarMunicipios","code","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/workspace/angular-sakai/src/app/demo/components/pages/client/services/cep.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, map } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CepService{\n    constructor(private http:HttpClient) {}\n    \n    buscar(cep:string){\n        return this.http.get(`https://viacep.com.br/ws/${cep}/json/`).pipe(\n            catchError((error:any)=>{\n                console.log(error);\n                return error\n            }) \n        )\n    }\n\n    buscarEstados(){\n        return this.http.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/`).pipe(\n            catchError((error:any)=>{\n                console.log(error);\n                return error\n            }) \n        )\n    }\n\n    buscarMunicipios(code:any){\n        return this.http.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${code}/municipios`).pipe(\n            catchError((error:any)=>{\n                console.log(error);\n                return error\n            }) \n        )\n    }\n\n\n}"],"mappings":"AAEA,SAASA,UAAU,QAAa,MAAM;;;AAKtC,OAAM,MAAOC,UAAU;EACnBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAc;EAEtCC,MAAMA,CAACC,GAAU;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,4BAA4BD,GAAG,QAAQ,CAAC,CAACE,IAAI,CAC9DP,UAAU,CAAEQ,KAAS,IAAG;MACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOA,KAAK;IAChB,CAAC,CAAC,CACL;EACL;EAEAG,aAAaA,CAAA;IACT,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAC,8DAA8D,CAAC,CAACC,IAAI,CACrFP,UAAU,CAAEQ,KAAS,IAAG;MACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOA,KAAK;IAChB,CAAC,CAAC,CACL;EACL;EAEAI,gBAAgBA,CAACC,IAAQ;IACrB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,+DAA+DO,IAAI,aAAa,CAAC,CAACN,IAAI,CACvGP,UAAU,CAAEQ,KAAS,IAAG;MACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOA,KAAK;IAChB,CAAC,CAAC,CACL;EACL;EAAC,QAAAM,CAAA,G;qBA5BQb,UAAU,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVlB,UAAU;IAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;IAAAC,UAAA,EAFP;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}