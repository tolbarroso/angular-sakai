{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { ComponentContainer, Provider, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\nconst name = \"@firebase/database-compat\";\nconst version = \"1.0.5\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database-compat');\nconst warn = function (msg) {\n  const message = 'FIREBASE WARNING: ' + msg;\n  logClient.warn(message);\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\nconst validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass OnDisconnect {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  cancel(onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  set(value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass TransactionResult {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  constructor(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nclass DataSnapshot {\n  constructor(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  val() {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  exportVal() {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n  exists() {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n  child(path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    _validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n  hasChild(path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    _validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n  getPriority() {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n  forEach(action) {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\n  }\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n  hasChildren() {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n  get key() {\n    return this._delegate.key;\n  }\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n  numChildren() {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n  getRef() {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n  get ref() {\n    return this.getRef();\n  }\n}\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nclass Query {\n  constructor(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    var _a;\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n    const valueCallback = (expSnapshot, previousChildName) => {\n      callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  }\n  off(eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  }\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n  get() {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n  once(eventType, callback, failureCallbackOrContext, context) {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    const deferred = new Deferred();\n    const valueCallback = (expSnapshot, previousChildName) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = error => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n    return deferred.promise;\n  }\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n  limitToFirst(limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n  limitToLast(limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n  orderByChild(path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n  orderByKey() {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n  orderByPriority() {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n  orderByValue() {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n  startAt(value = null, name) {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  }\n  startAfter(value = null, name) {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  }\n  endAt(value = null, name) {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n  endBefore(value = null, name) {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  }\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n  equalTo(value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  }\n  /**\r\n   * @returns URL for this location.\r\n   */\n  toString() {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n  isEqual(other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n  static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\n    const ret = {\n      cancel: undefined,\n      context: undefined\n    };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n    return ret;\n  }\n  get ref() {\n    return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\n  }\n}\nclass Reference extends Query {\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n  constructor(database, _delegate) {\n    super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  /** @returns {?string} */\n  getKey() {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n  child(pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n  /** @returns {?Reference} */\n  getParent() {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n  /** @returns {!Reference} */\n  getRoot() {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n  set(newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    if (Array.isArray(values)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n    _validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\n    if (onComplete) {\n      result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\n    }\n    return result;\n  }\n  setPriority(priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  push(value, onComplete) {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    const expPromise = push(this._delegate, value);\n    const promise = expPromise.then(expRef => new Reference(this.database, expRef));\n    if (onComplete) {\n      promise.then(() => onComplete(null), error => onComplete(error));\n    }\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n  onDisconnect() {\n    _validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  }\n  get key() {\n    return this.getKey();\n  }\n  get parent() {\n    return this.getParent();\n  }\n  get root() {\n    return this.getRoot();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase database.\r\n */\nclass Database {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  constructor(_delegate, app) {\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: () => this._delegate._delete(),\n      forceWebSockets,\n      forceLongPolling\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n  useEmulator(host, port, options = {}) {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n  ref(path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n  refFromURL(url) {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\nDatabase.ServerValue = {\n  TIMESTAMP: serverTimestamp(),\n  increment: delta => increment(delta)\n};\n\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\nfunction initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  namespace,\n  nodeAdmin = false\n}) {\n  _setSDKVersion(version);\n  const container = new ComponentContainer('database-standalone');\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  const authProvider = new Provider('auth-internal', container);\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  let appCheckProvider = undefined;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider('app-check-internal', container);\n    appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  }\n  return {\n    instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin), app),\n    namespace\n  };\n}\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ServerValue = Database.ServerValue;\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  instance.INTERNAL.registerComponent(new Component('database-compat', (container, {\n    instanceIdentifier: url\n  }) => {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const databaseExp = container.getProvider('database').getImmediate({\n      identifier: url\n    });\n    return new Database(databaseExp, app);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(\n  // firebase.database namespace properties\n  {\n    Reference,\n    Query,\n    Database,\n    DataSnapshot,\n    enableLogging,\n    INTERNAL,\n    ServerValue\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterDatabase(firebase);\nexport { registerDatabase };","map":{"version":3,"names":["firebase","ComponentContainer","Provider","Component","_validatePathString","onChildMoved","onChildChanged","onChildRemoved","onChildAdded","onValue","off","get","query","limitToFirst","limitToLast","orderByChild","orderByKey","orderByPriority","orderByValue","startAt","startAfter","endAt","endBefore","equalTo","_ReferenceImpl","_QueryImpl","_QueryParams","child","set","_validateWritablePath","update","setWithPriority","remove","runTransaction","setPriority","push","OnDisconnect","OnDisconnect$1","forceWebSockets","forceLongPolling","connectDatabaseEmulator","refFromURL","ref","goOffline","goOnline","serverTimestamp","increment","_setSDKVersion","_repoManagerDatabaseFromApp","enableLogging","errorPrefix","validateArgCount","validateCallback","validateContextObject","Deferred","Logger","name","version","logClient","warn","msg","message","validateBoolean","fnName","argumentName","bool","optional","undefined","Error","validateEventType","eventType","constructor","_delegate","cancel","onComplete","arguments","length","result","then","error","value","priority","objectToMerge","Array","isArray","newObjectToMerge","i","TransactionResult","committed","snapshot","toJSON","DataSnapshot","_database","val","exportVal","exists","path","String","hasChild","getPriority","forEach","action","expDataSnapshot","hasChildren","key","numChildren","size","getRef","Reference","Query","database","on","callback","cancelCallbackOrContext","context","_a","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","previousChildName","call","userCallback","cancelCallback","bind","once","failureCallbackOrContext","deferred","resolve","reject","onlyOnce","promise","limit","toString","isEqual","other","cancelOrContext","_repo","_path","getKey","pathString","getParent","parent","getRoot","root","newVal","values","newPriority","transaction","transactionUpdate","applyLocally","transactionResult","expPromise","expRef","catch","onDisconnect","Database","app","INTERNAL","delete","_delete","useEmulator","host","port","options","childRef","url","apiName","ServerValue","TIMESTAMP","delta","initStandalone","customAuthImpl","customAppCheckImpl","namespace","nodeAdmin","container","authProvider","setComponent","appCheckProvider","instance","Object","freeze","__proto__","registerDatabase","registerComponent","instanceIdentifier","getProvider","getImmediate","databaseExp","identifier","setServiceProps","setMultipleInstances","registerVersion"],"sources":["/workspace/angular-sakai/node_modules/@firebase/database-compat/dist/index.esm2017.js"],"sourcesContent":["import firebase from '@firebase/app-compat';\nimport { ComponentContainer, Provider, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"1.0.5\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete(),\r\n            forceWebSockets,\r\n            forceLongPolling\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    const container = new ComponentContainer('database-standalone');\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', container);\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    let appCheckProvider = undefined;\r\n    if (customAppCheckImpl) {\r\n        appCheckProvider = new Provider('app-check-internal', container);\r\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    }\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,kBAAkB,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,qBAAqB;AAC7E,SAASC,mBAAmB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,cAAc,EAAEC,YAAY,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,YAAY,EAAEC,WAAW,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,EAAEC,YAAY,EAAEC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAEC,cAAc,EAAEC,UAAU,EAAEC,YAAY,EAAEC,KAAK,EAAEC,GAAG,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,eAAe,EAAEC,MAAM,EAAEC,cAAc,EAAEC,WAAW,EAAEC,IAAI,EAAEC,YAAY,IAAIC,cAAc,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,SAAS,EAAEC,cAAc,EAAEC,2BAA2B,EAAEC,aAAa,QAAQ,oBAAoB;AAC7nB,SAASC,WAAW,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,QAAQ,QAAQ,gBAAgB;AACjH,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,MAAMC,IAAI,GAAG,2BAA2B;AACxC,MAAMC,OAAO,GAAG,OAAO;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAIH,MAAM,CAAC,2BAA2B,CAAC;AACzD,MAAMI,IAAI,GAAG,SAAAA,CAAUC,GAAG,EAAE;EACxB,MAAMC,OAAO,GAAG,oBAAoB,GAAGD,GAAG;EAC1CF,SAAS,CAACC,IAAI,CAACE,OAAO,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,SAAAA,CAAUC,MAAM,EAAEC,YAAY,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EACpE,IAAIA,QAAQ,IAAID,IAAI,KAAKE,SAAS,EAAE;IAChC;EACJ;EACA,IAAI,OAAOF,IAAI,KAAK,SAAS,EAAE;IAC3B,MAAM,IAAIG,KAAK,CAAClB,WAAW,CAACa,MAAM,EAAEC,YAAY,CAAC,GAAG,oBAAoB,CAAC;EAC7E;AACJ,CAAC;AACD,MAAMK,iBAAiB,GAAG,SAAAA,CAAUN,MAAM,EAAEO,SAAS,EAAEJ,QAAQ,EAAE;EAC7D,IAAIA,QAAQ,IAAII,SAAS,KAAKH,SAAS,EAAE;IACrC;EACJ;EACA,QAAQG,SAAS;IACb,KAAK,OAAO;IACZ,KAAK,aAAa;IAClB,KAAK,eAAe;IACpB,KAAK,eAAe;IACpB,KAAK,aAAa;MACd;IACJ;MACI,MAAM,IAAIF,KAAK,CAAClB,WAAW,CAACa,MAAM,EAAE,WAAW,CAAC,GAC5C,wEAAwE,GACxE,oCAAoC,CAAC;EACjD;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM3B,YAAY,CAAC;EACfmC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,MAAMA,CAACC,UAAU,EAAE;IACfvB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC/DxB,gBAAgB,CAAC,qBAAqB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACvE,MAAMG,MAAM,GAAG,IAAI,CAACL,SAAS,CAACC,MAAM,CAAC,CAAC;IACtC,IAAIC,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA7C,MAAMA,CAAC0C,UAAU,EAAE;IACfvB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC/DxB,gBAAgB,CAAC,qBAAqB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACvE,MAAMG,MAAM,GAAG,IAAI,CAACL,SAAS,CAACxC,MAAM,CAAC,CAAC;IACtC,IAAI0C,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACAjD,GAAGA,CAACoD,KAAK,EAAEN,UAAU,EAAE;IACnBvB,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5DxB,gBAAgB,CAAC,kBAAkB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACpE,MAAMG,MAAM,GAAG,IAAI,CAACL,SAAS,CAAC5C,GAAG,CAACoD,KAAK,CAAC;IACxC,IAAIN,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA9C,eAAeA,CAACiD,KAAK,EAAEC,QAAQ,EAAEP,UAAU,EAAE;IACzCvB,gBAAgB,CAAC,8BAA8B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACxExB,gBAAgB,CAAC,8BAA8B,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IAChF,MAAMG,MAAM,GAAG,IAAI,CAACL,SAAS,CAACzC,eAAe,CAACiD,KAAK,EAAEC,QAAQ,CAAC;IAC9D,IAAIP,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA/C,MAAMA,CAACoD,aAAa,EAAER,UAAU,EAAE;IAC9BvB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC/D,IAAIO,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;MAC9B,MAAMG,gBAAgB,GAAG,CAAC,CAAC;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,CAACN,MAAM,EAAE,EAAEU,CAAC,EAAE;QAC3CD,gBAAgB,CAAC,EAAE,GAAGC,CAAC,CAAC,GAAGJ,aAAa,CAACI,CAAC,CAAC;MAC/C;MACAJ,aAAa,GAAGG,gBAAgB;MAChC1B,IAAI,CAAC,sHAAsH,GACvH,0GAA0G,CAAC;IACnH;IACAP,gBAAgB,CAAC,qBAAqB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACvE,MAAMG,MAAM,GAAG,IAAI,CAACL,SAAS,CAAC1C,MAAM,CAACoD,aAAa,CAAC;IACnD,IAAIR,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,iBAAiB,CAAC;EACpB;AACJ;AACA;EACIhB,WAAWA,CAACiB,SAAS,EAAEC,QAAQ,EAAE;IAC7B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;EACA;EACAC,MAAMA,CAAA,EAAG;IACLvC,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACpE,OAAO;MAAEY,SAAS,EAAE,IAAI,CAACA,SAAS;MAAEC,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACC,MAAM,CAAC;IAAE,CAAC;EAC1E;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACfpB,WAAWA,CAACqB,SAAS,EAAEpB,SAAS,EAAE;IAC9B,IAAI,CAACoB,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACpB,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIqB,GAAGA,CAAA,EAAG;IACF1C,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,OAAO,IAAI,CAACJ,SAAS,CAACqB,GAAG,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIC,SAASA,CAAA,EAAG;IACR3C,gBAAgB,CAAC,wBAAwB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAClE,OAAO,IAAI,CAACJ,SAAS,CAACsB,SAAS,CAAC,CAAC;EACrC;EACA;EACA;EACAJ,MAAMA,CAAA,EAAG;IACL;IACAvC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC/D,OAAO,IAAI,CAACJ,SAAS,CAACkB,MAAM,CAAC,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;EACIK,MAAMA,CAAA,EAAG;IACL5C,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC/D,OAAO,IAAI,CAACJ,SAAS,CAACuB,MAAM,CAAC,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIpE,KAAKA,CAACqE,IAAI,EAAE;IACR7C,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC9D;IACAoB,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC;IACnB5F,mBAAmB,CAAC,oBAAoB,EAAE,MAAM,EAAE4F,IAAI,EAAE,KAAK,CAAC;IAC9D,OAAO,IAAIL,YAAY,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACpB,SAAS,CAAC7C,KAAK,CAACqE,IAAI,CAAC,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,QAAQA,CAACF,IAAI,EAAE;IACX7C,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACjExE,mBAAmB,CAAC,uBAAuB,EAAE,MAAM,EAAE4F,IAAI,EAAE,KAAK,CAAC;IACjE,OAAO,IAAI,CAACxB,SAAS,CAAC0B,QAAQ,CAACF,IAAI,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIG,WAAWA,CAAA,EAAG;IACVhD,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACpE,OAAO,IAAI,CAACJ,SAAS,CAACS,QAAQ;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACImB,OAAOA,CAACC,MAAM,EAAE;IACZlD,gBAAgB,CAAC,sBAAsB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAChExB,gBAAgB,CAAC,sBAAsB,EAAE,QAAQ,EAAEiD,MAAM,EAAE,KAAK,CAAC;IACjE,OAAO,IAAI,CAAC7B,SAAS,CAAC4B,OAAO,CAACE,eAAe,IAAID,MAAM,CAAC,IAAIV,YAAY,CAAC,IAAI,CAACC,SAAS,EAAEU,eAAe,CAAC,CAAC,CAAC;EAC/G;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACVpD,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACpE,OAAO,IAAI,CAACJ,SAAS,CAAC+B,WAAW,CAAC,CAAC;EACvC;EACA,IAAIC,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAAChC,SAAS,CAACgC,GAAG;EAC7B;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACVtD,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACpE,OAAO,IAAI,CAACJ,SAAS,CAACkC,IAAI;EAC9B;EACA;AACJ;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACLxD,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,OAAO,IAAIgC,SAAS,CAAC,IAAI,CAAChB,SAAS,EAAE,IAAI,CAACpB,SAAS,CAAC9B,GAAG,CAAC;EAC5D;EACA,IAAIA,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAACiE,MAAM,CAAC,CAAC;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,KAAK,CAAC;EACRtC,WAAWA,CAACuC,QAAQ,EAAEtC,SAAS,EAAE;IAC7B,IAAI,CAACsC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACtC,SAAS,GAAGA,SAAS;EAC9B;EACAuC,EAAEA,CAACzC,SAAS,EAAE0C,QAAQ,EAAEC,uBAAuB,EAAEC,OAAO,EAAE;IACtD,IAAIC,EAAE;IACNhE,gBAAgB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACpDxB,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE4D,QAAQ,EAAE,KAAK,CAAC;IACzD,MAAMI,GAAG,GAAGP,KAAK,CAACQ,wBAAwB,CAAC,UAAU,EAAEJ,uBAAuB,EAAEC,OAAO,CAAC;IACxF,MAAMI,aAAa,GAAGA,CAACC,WAAW,EAAEC,iBAAiB,KAAK;MACtDR,QAAQ,CAACS,IAAI,CAACL,GAAG,CAACF,OAAO,EAAE,IAAIvB,YAAY,CAAC,IAAI,CAACmB,QAAQ,EAAES,WAAW,CAAC,EAAEC,iBAAiB,CAAC;IAC/F,CAAC;IACDF,aAAa,CAACI,YAAY,GAAGV,QAAQ;IACrCM,aAAa,CAACJ,OAAO,GAAGE,GAAG,CAACF,OAAO;IACnC,MAAMS,cAAc,GAAG,CAACR,EAAE,GAAGC,GAAG,CAAC3C,MAAM,MAAM,IAAI,IAAI0C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,IAAI,CAACR,GAAG,CAACF,OAAO,CAAC;IAClG,QAAQ5C,SAAS;MACb,KAAK,OAAO;QACR7D,OAAO,CAAC,IAAI,CAAC+D,SAAS,EAAE8C,aAAa,EAAEK,cAAc,CAAC;QACtD,OAAOX,QAAQ;MACnB,KAAK,aAAa;QACdxG,YAAY,CAAC,IAAI,CAACgE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,CAAC;QAC3D,OAAOX,QAAQ;MACnB,KAAK,eAAe;QAChBzG,cAAc,CAAC,IAAI,CAACiE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,CAAC;QAC7D,OAAOX,QAAQ;MACnB,KAAK,eAAe;QAChB1G,cAAc,CAAC,IAAI,CAACkE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,CAAC;QAC7D,OAAOX,QAAQ;MACnB,KAAK,aAAa;QACd3G,YAAY,CAAC,IAAI,CAACmE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,CAAC;QAC3D,OAAOX,QAAQ;MACnB;QACI,MAAM,IAAI5C,KAAK,CAAClB,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,GAChD,wEAAwE,GACxE,oCAAoC,CAAC;IACjD;EACJ;EACAxC,GAAGA,CAAC4D,SAAS,EAAE0C,QAAQ,EAAEE,OAAO,EAAE;IAC9B/D,gBAAgB,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACrDP,iBAAiB,CAAC,WAAW,EAAEC,SAAS,EAAE,IAAI,CAAC;IAC/ClB,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE4D,QAAQ,EAAE,IAAI,CAAC;IACzD3D,qBAAqB,CAAC,WAAW,EAAE,SAAS,EAAE6D,OAAO,EAAE,IAAI,CAAC;IAC5D,IAAIF,QAAQ,EAAE;MACV,MAAMM,aAAa,GAAGA,CAAA,KAAM,CAAE,CAAC;MAC/BA,aAAa,CAACI,YAAY,GAAGV,QAAQ;MACrCM,aAAa,CAACJ,OAAO,GAAGA,OAAO;MAC/BxG,GAAG,CAAC,IAAI,CAAC8D,SAAS,EAAEF,SAAS,EAAEgD,aAAa,CAAC;IACjD,CAAC,MACI;MACD5G,GAAG,CAAC,IAAI,CAAC8D,SAAS,EAAEF,SAAS,CAAC;IAClC;EACJ;EACA;AACJ;AACA;EACI3D,GAAGA,CAAA,EAAG;IACF,OAAOA,GAAG,CAAC,IAAI,CAAC6D,SAAS,CAAC,CAACM,IAAI,CAACyC,WAAW,IAAI;MAC3C,OAAO,IAAI5B,YAAY,CAAC,IAAI,CAACmB,QAAQ,EAAES,WAAW,CAAC;IACvD,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIM,IAAIA,CAACvD,SAAS,EAAE0C,QAAQ,EAAEc,wBAAwB,EAAEZ,OAAO,EAAE;IACzD/D,gBAAgB,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACtDxB,gBAAgB,CAAC,YAAY,EAAE,UAAU,EAAE4D,QAAQ,EAAE,IAAI,CAAC;IAC1D,MAAMI,GAAG,GAAGP,KAAK,CAACQ,wBAAwB,CAAC,YAAY,EAAES,wBAAwB,EAAEZ,OAAO,CAAC;IAC3F,MAAMa,QAAQ,GAAG,IAAIzE,QAAQ,CAAC,CAAC;IAC/B,MAAMgE,aAAa,GAAGA,CAACC,WAAW,EAAEC,iBAAiB,KAAK;MACtD,MAAM3C,MAAM,GAAG,IAAIc,YAAY,CAAC,IAAI,CAACmB,QAAQ,EAAES,WAAW,CAAC;MAC3D,IAAIP,QAAQ,EAAE;QACVA,QAAQ,CAACS,IAAI,CAACL,GAAG,CAACF,OAAO,EAAErC,MAAM,EAAE2C,iBAAiB,CAAC;MACzD;MACAO,QAAQ,CAACC,OAAO,CAACnD,MAAM,CAAC;IAC5B,CAAC;IACDyC,aAAa,CAACI,YAAY,GAAGV,QAAQ;IACrCM,aAAa,CAACJ,OAAO,GAAGE,GAAG,CAACF,OAAO;IACnC,MAAMS,cAAc,GAAI5C,KAAK,IAAK;MAC9B,IAAIqC,GAAG,CAAC3C,MAAM,EAAE;QACZ2C,GAAG,CAAC3C,MAAM,CAACgD,IAAI,CAACL,GAAG,CAACF,OAAO,EAAEnC,KAAK,CAAC;MACvC;MACAgD,QAAQ,CAACE,MAAM,CAAClD,KAAK,CAAC;IAC1B,CAAC;IACD,QAAQT,SAAS;MACb,KAAK,OAAO;QACR7D,OAAO,CAAC,IAAI,CAAC+D,SAAS,EAAE8C,aAAa,EAAEK,cAAc,EAAE;UACnDO,QAAQ,EAAE;QACd,CAAC,CAAC;QACF;MACJ,KAAK,aAAa;QACd1H,YAAY,CAAC,IAAI,CAACgE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,EAAE;UACxDO,QAAQ,EAAE;QACd,CAAC,CAAC;QACF;MACJ,KAAK,eAAe;QAChB3H,cAAc,CAAC,IAAI,CAACiE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,EAAE;UAC1DO,QAAQ,EAAE;QACd,CAAC,CAAC;QACF;MACJ,KAAK,eAAe;QAChB5H,cAAc,CAAC,IAAI,CAACkE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,EAAE;UAC1DO,QAAQ,EAAE;QACd,CAAC,CAAC;QACF;MACJ,KAAK,aAAa;QACd7H,YAAY,CAAC,IAAI,CAACmE,SAAS,EAAE8C,aAAa,EAAEK,cAAc,EAAE;UACxDO,QAAQ,EAAE;QACd,CAAC,CAAC;QACF;MACJ;QACI,MAAM,IAAI9D,KAAK,CAAClB,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,GAClD,wEAAwE,GACxE,oCAAoC,CAAC;IACjD;IACA,OAAO6E,QAAQ,CAACI,OAAO;EAC3B;EACA;AACJ;AACA;EACItH,YAAYA,CAACuH,KAAK,EAAE;IAChBjF,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC9D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAE3D,YAAY,CAACuH,KAAK,CAAC,CAAC,CAAC;EAC/E;EACA;AACJ;AACA;EACItH,WAAWA,CAACsH,KAAK,EAAE;IACfjF,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC7D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAE1D,WAAW,CAACsH,KAAK,CAAC,CAAC,CAAC;EAC9E;EACA;AACJ;AACA;EACIrH,YAAYA,CAACiF,IAAI,EAAE;IACf7C,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC9D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEzD,YAAY,CAACiF,IAAI,CAAC,CAAC,CAAC;EAC9E;EACA;AACJ;AACA;EACIhF,UAAUA,CAAA,EAAG;IACTmC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAExD,UAAU,CAAC,CAAC,CAAC,CAAC;EACxE;EACA;AACJ;AACA;EACIC,eAAeA,CAAA,EAAG;IACdkC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACjE,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEvD,eAAe,CAAC,CAAC,CAAC,CAAC;EAC7E;EACA;AACJ;AACA;EACIC,YAAYA,CAAA,EAAG;IACXiC,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC9D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEtD,YAAY,CAAC,CAAC,CAAC,CAAC;EAC1E;EACAC,OAAOA,CAAC6D,KAAK,GAAG,IAAI,EAAExB,IAAI,EAAE;IACxBL,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACzD,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAErD,OAAO,CAAC6D,KAAK,EAAExB,IAAI,CAAC,CAAC,CAAC;EAChF;EACApC,UAAUA,CAAC4D,KAAK,GAAG,IAAI,EAAExB,IAAI,EAAE;IAC3BL,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEpD,UAAU,CAAC4D,KAAK,EAAExB,IAAI,CAAC,CAAC,CAAC;EACnF;EACAnC,KAAKA,CAAC2D,KAAK,GAAG,IAAI,EAAExB,IAAI,EAAE;IACtBL,gBAAgB,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACvD,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEnD,KAAK,CAAC2D,KAAK,EAAExB,IAAI,CAAC,CAAC,CAAC;EAC9E;EACAlC,SAASA,CAAC0D,KAAK,GAAG,IAAI,EAAExB,IAAI,EAAE;IAC1BL,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC3D,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAElD,SAAS,CAAC0D,KAAK,EAAExB,IAAI,CAAC,CAAC,CAAC;EAClF;EACA;AACJ;AACA;AACA;EACIjC,OAAOA,CAACyD,KAAK,EAAExB,IAAI,EAAE;IACjBL,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACzD,OAAO,IAAIiC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAElG,KAAK,CAAC,IAAI,CAAC4D,SAAS,EAAEjD,OAAO,CAACyD,KAAK,EAAExB,IAAI,CAAC,CAAC,CAAC;EAChF;EACA;AACJ;AACA;EACI6E,QAAQA,CAAA,EAAG;IACPlF,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC1D,OAAO,IAAI,CAACJ,SAAS,CAAC6D,QAAQ,CAAC,CAAC;EACpC;EACA;EACA;EACA3C,MAAMA,CAAA,EAAG;IACL;IACAvC,gBAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACxD,OAAO,IAAI,CAACJ,SAAS,CAACkB,MAAM,CAAC,CAAC;EAClC;EACA;AACJ;AACA;EACI4C,OAAOA,CAACC,KAAK,EAAE;IACXpF,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACzD,IAAI,EAAE2D,KAAK,YAAY1B,KAAK,CAAC,EAAE;MAC3B,MAAM9B,KAAK,GAAG,sFAAsF;MACpG,MAAM,IAAIX,KAAK,CAACW,KAAK,CAAC;IAC1B;IACA,OAAO,IAAI,CAACP,SAAS,CAAC8D,OAAO,CAACC,KAAK,CAAC/D,SAAS,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO6C,wBAAwBA,CAACtD,MAAM,EAAEyE,eAAe,EAAEtB,OAAO,EAAE;IAC9D,MAAME,GAAG,GAAG;MAAE3C,MAAM,EAAEN,SAAS;MAAE+C,OAAO,EAAE/C;IAAU,CAAC;IACrD,IAAIqE,eAAe,IAAItB,OAAO,EAAE;MAC5BE,GAAG,CAAC3C,MAAM,GAAG+D,eAAe;MAC5BpF,gBAAgB,CAACW,MAAM,EAAE,QAAQ,EAAEqD,GAAG,CAAC3C,MAAM,EAAE,IAAI,CAAC;MACpD2C,GAAG,CAACF,OAAO,GAAGA,OAAO;MACrB7D,qBAAqB,CAACU,MAAM,EAAE,SAAS,EAAEqD,GAAG,CAACF,OAAO,EAAE,IAAI,CAAC;IAC/D,CAAC,MACI,IAAIsB,eAAe,EAAE;MACtB;MACA,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAIA,eAAe,KAAK,IAAI,EAAE;QACjE;QACApB,GAAG,CAACF,OAAO,GAAGsB,eAAe;MACjC,CAAC,MACI,IAAI,OAAOA,eAAe,KAAK,UAAU,EAAE;QAC5CpB,GAAG,CAAC3C,MAAM,GAAG+D,eAAe;MAChC,CAAC,MACI;QACD,MAAM,IAAIpE,KAAK,CAAClB,WAAW,CAACa,MAAM,EAAE,iBAAiB,CAAC,GAClD,wDAAwD,CAAC;MACjE;IACJ;IACA,OAAOqD,GAAG;EACd;EACA,IAAI1E,GAAGA,CAAA,EAAG;IACN,OAAO,IAAIkE,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAE,IAAItF,cAAc,CAAC,IAAI,CAACgD,SAAS,CAACiE,KAAK,EAAE,IAAI,CAACjE,SAAS,CAACkE,KAAK,CAAC,CAAC;EACvG;AACJ;AACA,MAAM9B,SAAS,SAASC,KAAK,CAAC;EAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;EACItC,WAAWA,CAACuC,QAAQ,EAAEtC,SAAS,EAAE;IAC7B,KAAK,CAACsC,QAAQ,EAAE,IAAIrF,UAAU,CAAC+C,SAAS,CAACiE,KAAK,EAAEjE,SAAS,CAACkE,KAAK,EAAE,IAAIhH,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5F,IAAI,CAACoF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACtC,SAAS,GAAGA,SAAS;EAC9B;EACA;EACAmE,MAAMA,CAAA,EAAG;IACLxF,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACzD,OAAO,IAAI,CAACJ,SAAS,CAACgC,GAAG;EAC7B;EACA7E,KAAKA,CAACiH,UAAU,EAAE;IACdzF,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC3D,IAAI,OAAOgE,UAAU,KAAK,QAAQ,EAAE;MAChCA,UAAU,GAAG3C,MAAM,CAAC2C,UAAU,CAAC;IACnC;IACA,OAAO,IAAIhC,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAEnF,KAAK,CAAC,IAAI,CAAC6C,SAAS,EAAEoE,UAAU,CAAC,CAAC;EAC1E;EACA;EACAC,SAASA,CAAA,EAAG;IACR1F,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,MAAMkE,MAAM,GAAG,IAAI,CAACtE,SAAS,CAACsE,MAAM;IACpC,OAAOA,MAAM,GAAG,IAAIlC,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAEgC,MAAM,CAAC,GAAG,IAAI;EAC/D;EACA;EACAC,OAAOA,CAAA,EAAG;IACN5F,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC1D,OAAO,IAAIgC,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACtC,SAAS,CAACwE,IAAI,CAAC;EAC5D;EACApH,GAAGA,CAACqH,MAAM,EAAEvE,UAAU,EAAE;IACpBvB,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACzDxB,gBAAgB,CAAC,eAAe,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACjE,MAAMG,MAAM,GAAGjD,GAAG,CAAC,IAAI,CAAC4C,SAAS,EAAEyE,MAAM,CAAC;IAC1C,IAAIvE,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA/C,MAAMA,CAACoH,MAAM,EAAExE,UAAU,EAAE;IACvBvB,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5D,IAAIO,KAAK,CAACC,OAAO,CAAC8D,MAAM,CAAC,EAAE;MACvB,MAAM7D,gBAAgB,GAAG,CAAC,CAAC;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4D,MAAM,CAACtE,MAAM,EAAE,EAAEU,CAAC,EAAE;QACpCD,gBAAgB,CAAC,EAAE,GAAGC,CAAC,CAAC,GAAG4D,MAAM,CAAC5D,CAAC,CAAC;MACxC;MACA4D,MAAM,GAAG7D,gBAAgB;MACzB1B,IAAI,CAAC,uDAAuD,GACxD,2DAA2D,GAC3D,uDAAuD,GACvD,mCAAmC,CAAC;IAC5C;IACA9B,qBAAqB,CAAC,kBAAkB,EAAE,IAAI,CAAC2C,SAAS,CAACkE,KAAK,CAAC;IAC/DtF,gBAAgB,CAAC,kBAAkB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACpE,MAAMG,MAAM,GAAG/C,MAAM,CAAC,IAAI,CAAC0C,SAAS,EAAE0E,MAAM,CAAC;IAC7C,IAAIxE,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA9C,eAAeA,CAACkH,MAAM,EAAEE,WAAW,EAAEzE,UAAU,EAAE;IAC7CvB,gBAAgB,CAAC,2BAA2B,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACrExB,gBAAgB,CAAC,2BAA2B,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IAC7E,MAAMG,MAAM,GAAG9C,eAAe,CAAC,IAAI,CAACyC,SAAS,EAAEyE,MAAM,EAAEE,WAAW,CAAC;IACnE,IAAIzE,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA7C,MAAMA,CAAC0C,UAAU,EAAE;IACfvB,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC5DxB,gBAAgB,CAAC,kBAAkB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACpE,MAAMG,MAAM,GAAG7C,MAAM,CAAC,IAAI,CAACwC,SAAS,CAAC;IACrC,IAAIE,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACAuE,WAAWA,CAACC,iBAAiB,EAAE3E,UAAU,EAAE4E,YAAY,EAAE;IACrDnG,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACjExB,gBAAgB,CAAC,uBAAuB,EAAE,mBAAmB,EAAEiG,iBAAiB,EAAE,KAAK,CAAC;IACxFjG,gBAAgB,CAAC,uBAAuB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACzEZ,eAAe,CAAC,uBAAuB,EAAE,cAAc,EAAEwF,YAAY,EAAE,IAAI,CAAC;IAC5E,MAAMzE,MAAM,GAAG5C,cAAc,CAAC,IAAI,CAACuC,SAAS,EAAE6E,iBAAiB,EAAE;MAC7DC;IACJ,CAAC,CAAC,CAACxE,IAAI,CAACyE,iBAAiB,IAAI,IAAIhE,iBAAiB,CAACgE,iBAAiB,CAAC/D,SAAS,EAAE,IAAIG,YAAY,CAAC,IAAI,CAACmB,QAAQ,EAAEyC,iBAAiB,CAAC9D,QAAQ,CAAC,CAAC,CAAC;IAC7I,IAAIf,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAACyE,iBAAiB,IAAI7E,UAAU,CAAC,IAAI,EAAE6E,iBAAiB,CAAC/D,SAAS,EAAE+D,iBAAiB,CAAC9D,QAAQ,CAAC,EAAEV,KAAK,IAAIL,UAAU,CAACK,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACxJ;IACA,OAAOF,MAAM;EACjB;EACA3C,WAAWA,CAAC+C,QAAQ,EAAEP,UAAU,EAAE;IAC9BvB,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACjExB,gBAAgB,CAAC,uBAAuB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IACzE,MAAMG,MAAM,GAAG3C,WAAW,CAAC,IAAI,CAACsC,SAAS,EAAES,QAAQ,CAAC;IACpD,IAAIP,UAAU,EAAE;MACZG,MAAM,CAACC,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACnE;IACA,OAAOF,MAAM;EACjB;EACA1C,IAAIA,CAAC6C,KAAK,EAAEN,UAAU,EAAE;IACpBvB,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC1DxB,gBAAgB,CAAC,gBAAgB,EAAE,YAAY,EAAEsB,UAAU,EAAE,IAAI,CAAC;IAClE,MAAM8E,UAAU,GAAGrH,IAAI,CAAC,IAAI,CAACqC,SAAS,EAAEQ,KAAK,CAAC;IAC9C,MAAMmD,OAAO,GAAGqB,UAAU,CAAC1E,IAAI,CAAC2E,MAAM,IAAI,IAAI7C,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAE2C,MAAM,CAAC,CAAC;IAC/E,IAAI/E,UAAU,EAAE;MACZyD,OAAO,CAACrD,IAAI,CAAC,MAAMJ,UAAU,CAAC,IAAI,CAAC,EAAEK,KAAK,IAAIL,UAAU,CAACK,KAAK,CAAC,CAAC;IACpE;IACA,MAAMF,MAAM,GAAG,IAAI+B,SAAS,CAAC,IAAI,CAACE,QAAQ,EAAE0C,UAAU,CAAC;IACvD3E,MAAM,CAACC,IAAI,GAAGqD,OAAO,CAACrD,IAAI,CAAC8C,IAAI,CAACO,OAAO,CAAC;IACxCtD,MAAM,CAAC6E,KAAK,GAAGvB,OAAO,CAACuB,KAAK,CAAC9B,IAAI,CAACO,OAAO,EAAEhE,SAAS,CAAC;IACrD,OAAOU,MAAM;EACjB;EACA8E,YAAYA,CAAA,EAAG;IACX9H,qBAAqB,CAAC,wBAAwB,EAAE,IAAI,CAAC2C,SAAS,CAACkE,KAAK,CAAC;IACrE,OAAO,IAAItG,YAAY,CAAC,IAAIC,cAAc,CAAC,IAAI,CAACmC,SAAS,CAACiE,KAAK,EAAE,IAAI,CAACjE,SAAS,CAACkE,KAAK,CAAC,CAAC;EAC3F;EACA,IAAIlC,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAACmC,MAAM,CAAC,CAAC;EACxB;EACA,IAAIG,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACD,SAAS,CAAC,CAAC;EAC3B;EACA,IAAIG,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,QAAQ,CAAC;EACX;AACJ;AACA;EACIrF,WAAWA,CAACC,SAAS,EAAEqF,GAAG,EAAE;IACxB,IAAI,CAACrF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACqF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,QAAQ,GAAG;MACZC,MAAM,EAAEA,CAAA,KAAM,IAAI,CAACvF,SAAS,CAACwF,OAAO,CAAC,CAAC;MACtC1H,eAAe;MACfC;IACJ,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0H,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC5H,uBAAuB,CAAC,IAAI,CAACgC,SAAS,EAAE0F,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;EAChE;EACA1H,GAAGA,CAACsD,IAAI,EAAE;IACN7C,gBAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IACxD,IAAIoB,IAAI,YAAYY,SAAS,EAAE;MAC3B,MAAMyD,QAAQ,GAAG5H,UAAU,CAAC,IAAI,CAAC+B,SAAS,EAAEwB,IAAI,CAACqC,QAAQ,CAAC,CAAC,CAAC;MAC5D,OAAO,IAAIzB,SAAS,CAAC,IAAI,EAAEyD,QAAQ,CAAC;IACxC,CAAC,MACI;MACD,MAAMA,QAAQ,GAAG3H,GAAG,CAAC,IAAI,CAAC8B,SAAS,EAAEwB,IAAI,CAAC;MAC1C,OAAO,IAAIY,SAAS,CAAC,IAAI,EAAEyD,QAAQ,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI5H,UAAUA,CAAC6H,GAAG,EAAE;IACZ,MAAMC,OAAO,GAAG,qBAAqB;IACrCpH,gBAAgB,CAACoH,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE5F,SAAS,CAACC,MAAM,CAAC;IACjD,MAAMyF,QAAQ,GAAG5H,UAAU,CAAC,IAAI,CAAC+B,SAAS,EAAE8F,GAAG,CAAC;IAChD,OAAO,IAAI1D,SAAS,CAAC,IAAI,EAAEyD,QAAQ,CAAC;EACxC;EACA;EACA1H,SAASA,CAAA,EAAG;IACRQ,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC9D,OAAOjC,SAAS,CAAC,IAAI,CAAC6B,SAAS,CAAC;EACpC;EACA5B,QAAQA,CAAA,EAAG;IACPO,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAEwB,SAAS,CAACC,MAAM,CAAC;IAC7D,OAAOhC,QAAQ,CAAC,IAAI,CAAC4B,SAAS,CAAC;EACnC;AACJ;AACAoF,QAAQ,CAACY,WAAW,GAAG;EACnBC,SAAS,EAAE5H,eAAe,CAAC,CAAC;EAC5BC,SAAS,EAAG4H,KAAK,IAAK5H,SAAS,CAAC4H,KAAK;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAC;EAAEd,GAAG;EAAES,GAAG;EAAE7G,OAAO;EAAEmH,cAAc;EAAEC,kBAAkB;EAAEC,SAAS;EAAEC,SAAS,GAAG;AAAM,CAAC,EAAE;EAC7GhI,cAAc,CAACU,OAAO,CAAC;EACvB,MAAMuH,SAAS,GAAG,IAAI/K,kBAAkB,CAAC,qBAAqB,CAAC;EAC/D;AACJ;AACA;AACA;EACI,MAAMgL,YAAY,GAAG,IAAI/K,QAAQ,CAAC,eAAe,EAAE8K,SAAS,CAAC;EAC7DC,YAAY,CAACC,YAAY,CAAC,IAAI/K,SAAS,CAAC,eAAe,EAAE,MAAMyK,cAAc,EAAE,SAAS,CAAC,2BAA2B,CAAC,CAAC;EACtH,IAAIO,gBAAgB,GAAGhH,SAAS;EAChC,IAAI0G,kBAAkB,EAAE;IACpBM,gBAAgB,GAAG,IAAIjL,QAAQ,CAAC,oBAAoB,EAAE8K,SAAS,CAAC;IAChEG,gBAAgB,CAACD,YAAY,CAAC,IAAI/K,SAAS,CAAC,oBAAoB,EAAE,MAAM0K,kBAAkB,EAAE,SAAS,CAAC,2BAA2B,CAAC,CAAC;EACvI;EACA,OAAO;IACHO,QAAQ,EAAE,IAAIxB,QAAQ,CAAC5G,2BAA2B,CAAC6G,GAAG,EAAEoB,YAAY,EAAEE,gBAAgB,EAAEb,GAAG,EAAES,SAAS,CAAC,EAAElB,GAAG,CAAC;IAC7GiB;EACJ,CAAC;AACL;AAEA,IAAIhB,QAAQ,GAAG,aAAauB,MAAM,CAACC,MAAM,CAAC;EACxCC,SAAS,EAAE,IAAI;EACfZ,cAAc,EAAEA;AAClB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMH,WAAW,GAAGZ,QAAQ,CAACY,WAAW;AACxC,SAASgB,gBAAgBA,CAACJ,QAAQ,EAAE;EAChC;EACAA,QAAQ,CAACtB,QAAQ,CAAC2B,iBAAiB,CAAC,IAAItL,SAAS,CAAC,iBAAiB,EAAE,CAAC6K,SAAS,EAAE;IAAEU,kBAAkB,EAAEpB;EAAI,CAAC,KAAK;IAC7G;IACA;IACA,MAAMT,GAAG,GAAGmB,SAAS,CAACW,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,CAAC,CAAC;IAC9D,MAAMC,WAAW,GAAGb,SAAS,CACxBW,WAAW,CAAC,UAAU,CAAC,CACvBC,YAAY,CAAC;MAAEE,UAAU,EAAExB;IAAI,CAAC,CAAC;IACtC,OAAO,IAAIV,QAAQ,CAACiC,WAAW,EAAEhC,GAAG,CAAC;EACzC,CAAC,EAAE,QAAQ,CAAC,0BAA0B,CAAC,CAClCkC,eAAe;EACpB;EACA;IACInF,SAAS;IACTC,KAAK;IACL+C,QAAQ;IACRjE,YAAY;IACZ1C,aAAa;IACb6G,QAAQ;IACRU;EACJ,CAAC,CAAC,CACGwB,oBAAoB,CAAC,IAAI,CAAC,CAAC;EAChCZ,QAAQ,CAACa,eAAe,CAACzI,IAAI,EAAEC,OAAO,CAAC;AAC3C;AACA+H,gBAAgB,CAACxL,QAAQ,CAAC;AAE1B,SAASwL,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}